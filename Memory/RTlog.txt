Simulation progress: 11/250000[MMU][do_refer] address = 12617 offset = 329 page no = 12 Thread(0:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(0:1/RU) 22 Page(12:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(0:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(0:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(12:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(12:1/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(12:1/0) do swap-in Thread(0:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(0),Device(0),Page(12:1/0),Diskblock(12),FileRead,Openfile(0:1/0),Thread(0:1/W1)) this Page(12:1/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(12:1/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(12:1/0) swap-in finish Thread(0:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 11301 offset = 37 page no = 11 Thread(0:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(0:1/RU) 21 Page(11:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(0:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(0:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(11:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(11:1/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(11:1/1) do swap-in Thread(0:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(1),Device(0),Page(11:1/1),Diskblock(11),FileRead,Openfile(0:1/0),Thread(0:1/W1)) this Page(11:1/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(11:1/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(11:1/1) swap-in finish Thread(0:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 44693 offset = 661 page no = 43 Thread(0:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(0:1/RU) 21 Page(43:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(0:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(0:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(43:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(43:1/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(43:1/2) do swap-in Thread(0:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(2),Device(0),Page(43:1/2),Diskblock(43),FileRead,Openfile(0:1/0),Thread(0:1/W1)) this Page(43:1/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(43:1/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(43:1/2) swap-in finish Thread(0:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 29827 offset = 131 page no = 29 Thread(1:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(1:1/RU) 22 Page(29:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(1:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(1:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(29:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(29:1/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(29:1/3) do swap-in Thread(1:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(3),Device(0),Page(29:1/3),Diskblock(29),FileRead,Openfile(0:1/0),Thread(1:1/W1)) this Page(29:1/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(29:1/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(29:1/3) swap-in finish Thread(1:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 1945 offset = 921 page no = 1 Thread(2:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(2:1/RU) 22 Page(1:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(2:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(2:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(1:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(1:1/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(1:1/4) do swap-in Thread(2:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(4),Device(0),Page(1:1/4),Diskblock(1),FileRead,Openfile(0:1/0),Thread(2:1/W1)) this Page(1:1/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 56461 offset = 141 page no = 55 Thread(1:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(1:1/RU) 22 Page(55:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(1:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(1:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(55:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(55:1/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(55:1/5) do swap-in Thread(1:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(5),Device(0),Page(55:1/5),Diskblock(55),FileRead,Openfile(0:1/0),Thread(1:1/W1)) this Page(55:1/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:1/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(1:1/4) swap-in finish Thread(2:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(55:1/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(55:1/5) swap-in finish Thread(1:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 19295 offset = 863 page no = 18 Thread(3:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(3:1/RU) 22 Page(18:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(3:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(3:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(18:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(55:1/5)
[PageFaultHandler][do_handlePageFault] Frame(5) is dirty, do swap-out Thread(3:1/W0)
[PageFaultHandler][SwapOut] page Page(55:1/5) frame Frame(5)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 55
PageTableEntry][do_lock] iorb IORB(Id(6),Device(0),Page(55:1/5),Diskblock(55),FileWrite,Openfile(0:1/0),Thread(3:1/W1)) this Page(55:1/5)
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(7),Device(1),Page(1:1/4),Diskblock(0),FileRead,Openfile(2:1/1),Thread(2:1/W0)) this Page(1:1/4)
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 1017/250000[PageTableEntry][do_unlock] this Page(1:1/4)
[PageTableEntry][do_unlock] this Page(55:1/5)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(5) Page(55:1/5) Thread(3:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(18:1/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(18:1/5) do swap-in Thread(3:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(8),Device(0),Page(18:1/5),Diskblock(18),FileRead,Openfile(0:1/0),Thread(3:1/W1)) this Page(18:1/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 52630 offset = 406 page no = 51 Thread(2:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(2:1/RU) 21 Page(51:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(2:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(2:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(7) for Page(51:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(7) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(51:1/null) and Frame(7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(51:1/7) do swap-in Thread(2:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(9),Device(0),Page(51:1/7),Diskblock(51),FileRead,Openfile(0:1/0),Thread(2:1/W1)) this Page(51:1/7)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 14810 offset = 474 page no = 14 Thread(1:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(1:1/RU) 22 Page(14:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(1:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(1:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(14:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(14:1/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(14:1/8) do swap-in Thread(1:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(10),Device(0),Page(14:1/8),Diskblock(14),FileRead,Openfile(0:1/0),Thread(1:1/W1)) this Page(14:1/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(18:1/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(18:1/5) swap-in finish Thread(3:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 12187 offset = 923 page no = 11 Thread(3:1/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 27157 offset = 533 page no = 26 Thread(3:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(3:1/RU) 21 Page(26:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(3:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(3:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(26:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(26:1/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(26:1/9) do swap-in Thread(3:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(11),Device(0),Page(26:1/9),Diskblock(26),FileRead,Openfile(0:1/0),Thread(3:1/W1)) this Page(26:1/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(51:1/7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(51:1/7) swap-in finish Thread(2:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(14:1/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(14:1/8) swap-in finish Thread(1:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(26:1/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(26:1/9) swap-in finish Thread(3:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 21501 offset = 1021 page no = 20 Thread(3:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(3:1/RU) 21 Page(20:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(3:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(3:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(7) for Page(20:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(7) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(51:1/7)
[PageFaultHandler][do_handlePageFault] set Page(20:1/null) and Frame(7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(20:1/7) do swap-in Thread(3:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(12),Device(0),Page(20:1/7),Diskblock(20),FileRead,Openfile(0:1/0),Thread(3:1/W1)) this Page(20:1/7)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(20:1/7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(20:1/7) swap-in finish Thread(3:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 2093/250000[MMU][do_refer] address = 47661 offset = 557 page no = 46 Thread(2:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(2:1/RU) 22 Page(46:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(2:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(2:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(46:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(26:1/9)
[PageFaultHandler][do_handlePageFault] set Page(46:1/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(46:1/9) do swap-in Thread(2:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(13),Device(0),Page(46:1/9),Diskblock(46),FileRead,Openfile(0:1/0),Thread(2:1/W1)) this Page(46:1/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(14),Device(1),Page(1:1/4),Diskblock(0),FileWrite,Openfile(2:1/1),Thread(7:1/W0)) this Page(1:1/4)
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(46:1/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(46:1/9) swap-in finish Thread(2:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(1:1/4)
[MMU][do_refer] address = 34039 offset = 247 page no = 33 Thread(0:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(0:1/RU) 22 Page(33:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(0:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(0:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(33:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(33:1/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(33:1/12) do swap-in Thread(0:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(15),Device(0),Page(33:1/12),Diskblock(33),FileRead,Openfile(0:1/0),Thread(0:1/W1)) this Page(33:1/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(33:1/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(33:1/12) swap-in finish Thread(0:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 55236 offset = 964 page no = 53 Thread(9:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(9:1/RU) 21 Page(53:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(9:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(9:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(53:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(53:1/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(53:1/13) do swap-in Thread(9:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(16),Device(0),Page(53:1/13),Diskblock(53),FileRead,Openfile(0:1/0),Thread(9:1/W1)) this Page(53:1/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(53:1/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(53:1/13) swap-in finish Thread(9:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 3036/250000[MMU][do_refer] address = 621 offset = 621 page no = 0 Thread(5:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(5:1/RU) 22 Page(0:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(5:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(5:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(0:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(0:1/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(0:1/14) do swap-in Thread(5:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(17),Device(0),Page(0:1/14),Diskblock(0),FileRead,Openfile(0:1/0),Thread(5:1/W1)) this Page(0:1/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:1/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(0:1/14) swap-in finish Thread(5:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(18),Device(2),Page(0:1/14),Diskblock(4),FileRead,Openfile(6:1/2),Thread(0:1/W0)) this Page(0:1/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 18189 offset = 781 page no = 17 Thread(3:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(3:1/RU) 22 Page(17:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(3:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(3:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(17:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(17:1/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(17:1/15) do swap-in Thread(3:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(19),Device(0),Page(17:1/15),Diskblock(17),FileRead,Openfile(0:1/0),Thread(3:1/W1)) this Page(17:1/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(17:1/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(17:1/15) swap-in finish Thread(3:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(20),Device(2),Page(2:1/null),Diskblock(4),FileWrite,Openfile(6:1/2),Thread(12:1/W0)) this Page(2:1/null)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] validating_thread is null, handlePageFault
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(12:1/W0) 23 Page(2:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(12:1/W0) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(12:1/W1) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(2:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(2:1/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(2:1/16) do swap-in Thread(12:1/W1)
PageTableEntry][do_lock] iorb IORB(Id(21),Device(0),Page(2:1/16),Diskblock(2),FileRead,Openfile(0:1/0),Thread(12:1/W2)) this Page(2:1/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(2:1/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(2:1/16) swap-in finish Thread(12:1/W1)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 4060/250000[PageTableEntry][do_unlock] this Page(0:1/14)
[MMU][do_refer] address = 30489 offset = 793 page no = 29 Thread(2:1/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 21841 offset = 337 page no = 21 Thread(4:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(4:1/RU) 22 Page(21:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(4:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(4:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(21:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(21:1/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(21:1/17) do swap-in Thread(4:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(22),Device(0),Page(21:1/17),Diskblock(21),FileRead,Openfile(0:1/0),Thread(4:1/W1)) this Page(21:1/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(2:1/16)
[MMU][do_refer] address = 52361 offset = 137 page no = 51 Thread(7:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(7:1/RU) 22 Page(51:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(7:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(7:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(51:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(51:1/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(51:1/18) do swap-in Thread(7:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(23),Device(0),Page(51:1/18),Diskblock(51),FileRead,Openfile(0:1/0),Thread(7:1/W1)) this Page(51:1/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(21:1/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(21:1/17) swap-in finish Thread(4:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 2662 offset = 614 page no = 2 Thread(3:1/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(51:1/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(51:1/18) swap-in finish Thread(7:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 12638 offset = 350 page no = 12 Thread(11:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(11:2/RU) 22 Page(12:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(11:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(11:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(12:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(51:1/18)
[PageFaultHandler][do_handlePageFault] Frame(18) is dirty, do swap-out Thread(11:2/W0)
[PageFaultHandler][SwapOut] page Page(51:1/18) frame Frame(18)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 51
PageTableEntry][do_lock] iorb IORB(Id(24),Device(0),Page(51:1/18),Diskblock(115),FileWrite,Openfile(4:2/0),Thread(11:2/W1)) this Page(51:1/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 5767 offset = 647 page no = 5 Thread(1:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(1:1/RU) 21 Page(5:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(1:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(1:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(5:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(5:1/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(5:1/20) do swap-in Thread(1:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(25),Device(0),Page(5:1/20),Diskblock(5),FileRead,Openfile(0:1/0),Thread(1:1/W1)) this Page(5:1/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(51:1/18)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(18) Page(51:1/18) Thread(11:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(12:2/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(12:2/18) do swap-in Thread(11:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(26),Device(0),Page(12:2/18),Diskblock(76),FileRead,Openfile(4:2/0),Thread(11:2/W1)) this Page(12:2/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 60038 offset = 646 page no = 58 Thread(9:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(9:1/RU) 22 Page(58:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(9:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(9:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(58:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(58:1/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(58:1/21) do swap-in Thread(9:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(27),Device(0),Page(58:1/21),Diskblock(58),FileRead,Openfile(0:1/0),Thread(9:1/W1)) this Page(58:1/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(5:1/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(5:1/20) swap-in finish Thread(1:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 18899 offset = 467 page no = 18 Thread(0:1/RU)
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(28),Device(1),Page(0:1/14),Diskblock(3),FileRead,Openfile(8:1/1),Thread(0:1/W0)) this Page(0:1/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:1/14)
Simulation progress: 5028/250000[PageTableEntry][do_unlock] this Page(12:2/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(12:2/18) swap-in finish Thread(11:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(58:1/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(58:1/21) swap-in finish Thread(9:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 11976 offset = 712 page no = 11 Thread(13:1/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 48408 offset = 280 page no = 47 Thread(13:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(13:1/RU) 22 Page(47:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(13:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(13:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(47:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(58:1/21)
[PageFaultHandler][do_handlePageFault] Frame(21) is dirty, do swap-out Thread(13:1/W0)
[PageFaultHandler][SwapOut] page Page(58:1/21) frame Frame(21)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 58
PageTableEntry][do_lock] iorb IORB(Id(29),Device(0),Page(58:1/21),Diskblock(58),FileWrite,Openfile(0:1/0),Thread(13:1/W1)) this Page(58:1/21)
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(58:1/21)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(21) Page(58:1/21) Thread(13:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(47:1/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(47:1/21) do swap-in Thread(13:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(30),Device(0),Page(47:1/21),Diskblock(47),FileRead,Openfile(0:1/0),Thread(13:1/W1)) this Page(47:1/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(47:1/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(47:1/21) swap-in finish Thread(13:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 61507 offset = 67 page no = 60 Thread(3:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(3:1/RU) 21 Page(60:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(3:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(3:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(60:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(60:1/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(60:1/22) do swap-in Thread(3:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(31),Device(0),Page(60:1/22),Diskblock(60),FileRead,Openfile(0:1/0),Thread(3:1/W1)) this Page(60:1/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(60:1/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(60:1/22) swap-in finish Thread(3:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 50484 offset = 308 page no = 49 Thread(10:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(10:1/RU) 21 Page(49:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(10:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(10:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(49:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(49:1/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(49:1/24) do swap-in Thread(10:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(32),Device(0),Page(49:1/24),Diskblock(49),FileRead,Openfile(0:1/0),Thread(10:1/W1)) this Page(49:1/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(49:1/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(49:1/24) swap-in finish Thread(10:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 57834 offset = 490 page no = 56 Thread(5:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(5:1/RU) 22 Page(56:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(5:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(5:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(56:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(56:1/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(56:1/25) do swap-in Thread(5:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(33),Device(0),Page(56:1/25),Diskblock(56),FileRead,Openfile(0:1/0),Thread(5:1/W1)) this Page(56:1/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 49347 offset = 195 page no = 48 Thread(11:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(11:2/RU) 22 Page(48:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(11:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(11:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(48:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] set Page(48:2/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(48:2/26) do swap-in Thread(11:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(34),Device(0),Page(48:2/26),Diskblock(112),FileRead,Openfile(4:2/0),Thread(11:2/W1)) this Page(48:2/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(56:1/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(56:1/25) swap-in finish Thread(5:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 6572 offset = 428 page no = 6 Thread(9:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(9:1/RU) 22 Page(6:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(9:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(9:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(6:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(6:1/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(6:1/27) do swap-in Thread(9:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(35),Device(0),Page(6:1/27),Diskblock(6),FileRead,Openfile(0:1/0),Thread(9:1/W1)) this Page(6:1/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 6004/250000[PageTableEntry][do_unlock] this Page(48:2/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(48:2/26) swap-in finish Thread(11:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 53655 offset = 407 page no = 52 Thread(4:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(4:1/RU) 21 Page(52:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(4:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(4:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(52:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(48:2/26)
[PageFaultHandler][do_handlePageFault] Frame(26) is dirty, do swap-out Thread(4:1/W0)
[PageFaultHandler][SwapOut] page Page(48:2/26) frame Frame(26)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 48
PageTableEntry][do_lock] iorb IORB(Id(36),Device(0),Page(48:2/26),Diskblock(48),FileWrite,Openfile(0:1/0),Thread(4:1/W1)) this Page(48:2/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(6:1/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(6:1/27) swap-in finish Thread(9:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 6638 offset = 494 page no = 6 Thread(3:1/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(48:2/26)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(26) Page(48:2/26) Thread(4:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(52:1/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(52:1/26) do swap-in Thread(4:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(37),Device(0),Page(52:1/26),Diskblock(52),FileRead,Openfile(0:1/0),Thread(4:1/W1)) this Page(52:1/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 23250 offset = 722 page no = 22 Thread(6:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(6:1/RU) 21 Page(22:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(6:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(6:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(22:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(22:1/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(22:1/29) do swap-in Thread(6:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(38),Device(0),Page(22:1/29),Diskblock(22),FileRead,Openfile(0:1/0),Thread(6:1/W1)) this Page(22:1/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(52:1/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(52:1/26) swap-in finish Thread(4:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 38817 offset = 929 page no = 37 Thread(10:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(10:1/RU) 22 Page(37:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(10:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(10:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(37:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(12:1/0)
[PageFaultHandler][do_handlePageFault] Frame(0) is dirty, do swap-out Thread(10:1/W0)
[PageFaultHandler][SwapOut] page Page(12:1/0) frame Frame(0)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 12
PageTableEntry][do_lock] iorb IORB(Id(39),Device(0),Page(12:1/0),Diskblock(12),FileWrite,Openfile(0:1/0),Thread(10:1/W1)) this Page(12:1/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(22:1/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(22:1/29) swap-in finish Thread(6:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 38569 offset = 681 page no = 37 Thread(5:1/RU)
[PageTableEntry][do_unlock] this Page(12:1/0)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(0) Page(12:1/0) Thread(10:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(37:1/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(37:1/0) do swap-in Thread(10:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(40),Device(0),Page(37:1/0),Diskblock(37),FileRead,Openfile(0:1/0),Thread(10:1/W1)) this Page(37:1/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(37:1/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(37:1/0) swap-in finish Thread(10:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 20023 offset = 567 page no = 19 Thread(9:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(9:1/RU) 22 Page(19:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(9:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(9:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(19:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(22:1/29)
[PageFaultHandler][do_handlePageFault] set Page(19:1/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(19:1/29) do swap-in Thread(9:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(41),Device(0),Page(19:1/29),Diskblock(19),FileRead,Openfile(0:1/0),Thread(9:1/W1)) this Page(19:1/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(19:1/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(19:1/29) swap-in finish Thread(9:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 34346 offset = 554 page no = 33 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 22 Page(33:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(33:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(43:1/2)
[PageFaultHandler][do_handlePageFault] set Page(33:3/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(33:3/2) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(42),Device(0),Page(33:3/2),Diskblock(161),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(33:3/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 1304 offset = 280 page no = 1 Thread(8:1/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 37044 offset = 180 page no = 36 Thread(8:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(8:1/RU) 22 Page(36:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(8:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(8:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(36:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(29:1/3)
[PageFaultHandler][do_handlePageFault] Frame(3) is dirty, do swap-out Thread(8:1/W0)
[PageFaultHandler][SwapOut] page Page(29:1/3) frame Frame(3)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 29
PageTableEntry][do_lock] iorb IORB(Id(43),Device(0),Page(29:1/3),Diskblock(29),FileWrite,Openfile(0:1/0),Thread(8:1/W1)) this Page(29:1/3)
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(33:3/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(33:3/2) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 62629 offset = 165 page no = 61 Thread(4:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(4:1/RU) 21 Page(61:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(4:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(4:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(61:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(1:1/4)
[PageFaultHandler][do_handlePageFault] Frame(4) is dirty, do swap-out Thread(4:1/W0)
[PageFaultHandler][SwapOut] page Page(1:1/4) frame Frame(4)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 1
PageTableEntry][do_lock] iorb IORB(Id(44),Device(0),Page(1:1/4),Diskblock(1),FileWrite,Openfile(0:1/0),Thread(4:1/W1)) this Page(1:1/4)
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 28790 offset = 118 page no = 28 Thread(1:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(1:1/RU) 22 Page(28:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(1:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(1:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(28:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(28:1/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(28:1/6) do swap-in Thread(1:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(45),Device(0),Page(28:1/6),Diskblock(28),FileRead,Openfile(0:1/0),Thread(1:1/W1)) this Page(28:1/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 35437 offset = 621 page no = 34 Thread(6:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(6:1/RU) 21 Page(34:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(6:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(6:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(34:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(18:1/5)
[PageFaultHandler][do_handlePageFault] Frame(5) is dirty, do swap-out Thread(6:1/W0)
[PageFaultHandler][SwapOut] page Page(18:1/5) frame Frame(5)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 18
PageTableEntry][do_lock] iorb IORB(Id(46),Device(0),Page(18:1/5),Diskblock(18),FileWrite,Openfile(0:1/0),Thread(6:1/W1)) this Page(18:1/5)
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(29:1/3)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(3) Page(29:1/3) Thread(8:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(36:1/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(36:1/3) do swap-in Thread(8:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(47),Device(0),Page(36:1/3),Diskblock(36),FileRead,Openfile(0:1/0),Thread(8:1/W1)) this Page(36:1/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 7017/250000[PageTableEntry][do_unlock] this Page(1:1/4)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(4) Page(1:1/4) Thread(4:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(61:1/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(61:1/4) do swap-in Thread(4:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(48),Device(0),Page(61:1/4),Diskblock(61),FileRead,Openfile(0:1/0),Thread(4:1/W1)) this Page(61:1/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(28:1/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(28:1/6) swap-in finish Thread(1:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 61680 offset = 240 page no = 60 Thread(10:1/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(18:1/5)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(5) Page(18:1/5) Thread(6:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(34:1/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(34:1/5) do swap-in Thread(6:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(49),Device(0),Page(34:1/5),Diskblock(34),FileRead,Openfile(0:1/0),Thread(6:1/W1)) this Page(34:1/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(36:1/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(36:1/3) swap-in finish Thread(8:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(61:1/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(61:1/4) swap-in finish Thread(4:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(34:1/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(34:1/5) swap-in finish Thread(6:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 45015 offset = 983 page no = 43 Thread(2:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(2:1/RU) 22 Page(43:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(2:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(2:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(43:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(36:1/3)
[PageFaultHandler][do_handlePageFault] Frame(3) is dirty, do swap-out Thread(2:1/W0)
[PageFaultHandler][SwapOut] page Page(36:1/3) frame Frame(3)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 36
PageTableEntry][do_lock] iorb IORB(Id(50),Device(0),Page(36:1/3),Diskblock(36),FileWrite,Openfile(0:1/0),Thread(2:1/W1)) this Page(36:1/3)
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(36:1/3)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(3) Page(36:1/3) Thread(2:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(43:1/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(43:1/3) do swap-in Thread(2:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(51),Device(0),Page(43:1/3),Diskblock(43),FileRead,Openfile(0:1/0),Thread(2:1/W1)) this Page(43:1/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 6535 offset = 391 page no = 6 Thread(5:1/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 32937 offset = 169 page no = 32 Thread(5:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(5:1/RU) 22 Page(32:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(5:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(5:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(32:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(14:1/8)
[PageFaultHandler][do_handlePageFault] Frame(8) is dirty, do swap-out Thread(5:1/W0)
[PageFaultHandler][SwapOut] page Page(14:1/8) frame Frame(8)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 14
PageTableEntry][do_lock] iorb IORB(Id(52),Device(0),Page(14:1/8),Diskblock(14),FileWrite,Openfile(0:1/0),Thread(5:1/W1)) this Page(14:1/8)
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(53),Device(2),Page(0:1/14),Diskblock(5),FileWrite,Openfile(6:1/2),Thread(10:1/W0)) this Page(0:1/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 57383 offset = 39 page no = 56 Thread(8:1/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(43:1/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(43:1/3) swap-in finish Thread(2:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(14:1/8)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(8) Page(14:1/8) Thread(5:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(32:1/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(32:1/8) do swap-in Thread(5:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(54),Device(0),Page(32:1/8),Diskblock(32),FileRead,Openfile(0:1/0),Thread(5:1/W1)) this Page(32:1/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 8022/250000[PageTableEntry][do_unlock] this Page(32:1/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(32:1/8) swap-in finish Thread(5:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(0:1/14)
[MMU][do_refer] address = 2351 offset = 303 page no = 2 Thread(6:1/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 9465 offset = 249 page no = 9 Thread(6:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(6:1/RU) 22 Page(9:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(6:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(6:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(9:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(32:1/8)
[PageFaultHandler][do_handlePageFault] Frame(8) is dirty, do swap-out Thread(6:1/W0)
[PageFaultHandler][SwapOut] page Page(32:1/8) frame Frame(8)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 32
PageTableEntry][do_lock] iorb IORB(Id(55),Device(0),Page(32:1/8),Diskblock(32),FileWrite,Openfile(0:1/0),Thread(6:1/W1)) this Page(32:1/8)
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 18222 offset = 814 page no = 17 Thread(13:1/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(32:1/8)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(8) Page(32:1/8) Thread(6:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(9:1/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(9:1/8) do swap-in Thread(6:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(56),Device(0),Page(9:1/8),Diskblock(9),FileRead,Openfile(0:1/0),Thread(6:1/W1)) this Page(9:1/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(9:1/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(9:1/8) swap-in finish Thread(6:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 30240 offset = 544 page no = 29 Thread(0:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(0:1/RU) 21 Page(29:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(0:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(0:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(7) for Page(29:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(7) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(20:1/7)
[PageFaultHandler][do_handlePageFault] set Page(29:1/null) and Frame(7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(29:1/7) do swap-in Thread(0:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(57),Device(0),Page(29:1/7),Diskblock(29),FileRead,Openfile(0:1/0),Thread(0:1/W1)) this Page(29:1/7)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(29:1/7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(29:1/7) swap-in finish Thread(0:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 15669 offset = 309 page no = 15 Thread(2:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(2:1/RU) 21 Page(15:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(2:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(2:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(15:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(46:1/9)
[PageFaultHandler][do_handlePageFault] Frame(9) is dirty, do swap-out Thread(2:1/W0)
[PageFaultHandler][SwapOut] page Page(46:1/9) frame Frame(9)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 46
PageTableEntry][do_lock] iorb IORB(Id(58),Device(0),Page(46:1/9),Diskblock(46),FileWrite,Openfile(0:1/0),Thread(2:1/W1)) this Page(46:1/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(46:1/9)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(9) Page(46:1/9) Thread(2:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(15:1/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(15:1/9) do swap-in Thread(2:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(59),Device(0),Page(15:1/9),Diskblock(15),FileRead,Openfile(0:1/0),Thread(2:1/W1)) this Page(15:1/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(15:1/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(15:1/9) swap-in finish Thread(2:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 47848 offset = 744 page no = 46 Thread(5:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(5:1/RU) 21 Page(46:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(5:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(5:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(46:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(33:1/12)
[PageFaultHandler][do_handlePageFault] Frame(12) is dirty, do swap-out Thread(5:1/W0)
[PageFaultHandler][SwapOut] page Page(33:1/12) frame Frame(12)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 33
PageTableEntry][do_lock] iorb IORB(Id(60),Device(0),Page(33:1/12),Diskblock(33),FileWrite,Openfile(0:1/0),Thread(5:1/W1)) this Page(33:1/12)
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(61),Device(1),Page(0:1/14),Diskblock(7),FileWrite,Openfile(8:1/1),Thread(15:1/W0)) this Page(0:1/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(33:1/12)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(12) Page(33:1/12) Thread(5:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(46:1/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(46:1/12) do swap-in Thread(5:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(62),Device(0),Page(46:1/12),Diskblock(46),FileRead,Openfile(0:1/0),Thread(5:1/W1)) this Page(46:1/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:1/14)
[PageTableEntry][do_unlock] this Page(46:1/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(46:1/12) swap-in finish Thread(5:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 9100/250000[MMU][do_refer] address = 63478 offset = 1014 page no = 61 Thread(9:1/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 41584 offset = 624 page no = 40 Thread(6:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(6:1/RU) 21 Page(40:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(6:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(6:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(40:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(53:1/13)
[PageFaultHandler][do_handlePageFault] set Page(40:1/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(40:1/13) do swap-in Thread(6:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(63),Device(0),Page(40:1/13),Diskblock(40),FileRead,Openfile(0:1/0),Thread(6:1/W1)) this Page(40:1/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(40:1/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(40:1/13) swap-in finish Thread(6:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 55012 offset = 740 page no = 53 Thread(0:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(0:1/RU) 22 Page(53:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(0:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(0:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(53:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(0:1/14)
[PageFaultHandler][do_handlePageFault] Frame(14) is dirty, do swap-out Thread(0:1/W0)
[PageFaultHandler][SwapOut] page Page(0:1/14) frame Frame(14)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 0
PageTableEntry][do_lock] iorb IORB(Id(64),Device(0),Page(0:1/14),Diskblock(0),FileWrite,Openfile(0:1/0),Thread(0:1/W1)) this Page(0:1/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:1/14)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(14) Page(0:1/14) Thread(0:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(53:1/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(53:1/14) do swap-in Thread(0:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(65),Device(0),Page(53:1/14),Diskblock(53),FileRead,Openfile(0:1/0),Thread(0:1/W1)) this Page(53:1/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(53:1/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(53:1/14) swap-in finish Thread(0:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 11549 offset = 285 page no = 11 Thread(2:1/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 22790 offset = 262 page no = 22 Thread(2:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(2:1/RU) 21 Page(22:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(2:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(2:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(22:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(17:1/15)
[PageFaultHandler][do_handlePageFault] Frame(15) is dirty, do swap-out Thread(2:1/W0)
[PageFaultHandler][SwapOut] page Page(17:1/15) frame Frame(15)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 17
PageTableEntry][do_lock] iorb IORB(Id(66),Device(0),Page(17:1/15),Diskblock(17),FileWrite,Openfile(0:1/0),Thread(2:1/W1)) this Page(17:1/15)
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(17:1/15)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(15) Page(17:1/15) Thread(2:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(22:1/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(22:1/15) do swap-in Thread(2:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(67),Device(0),Page(22:1/15),Diskblock(22),FileRead,Openfile(0:1/0),Thread(2:1/W1)) this Page(22:1/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 24400 offset = 848 page no = 23 Thread(15:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(15:1/RU) 21 Page(23:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(15:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(15:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(23:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(2:1/16)
[PageFaultHandler][do_handlePageFault] Frame(16) is dirty, do swap-out Thread(15:1/W0)
[PageFaultHandler][SwapOut] page Page(2:1/16) frame Frame(16)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 2
PageTableEntry][do_lock] iorb IORB(Id(68),Device(0),Page(2:1/16),Diskblock(2),FileWrite,Openfile(0:1/0),Thread(15:1/W1)) this Page(2:1/16)
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(22:1/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(22:1/15) swap-in finish Thread(2:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(2:1/16)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(16) Page(2:1/16) Thread(15:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(23:1/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(23:1/16) do swap-in Thread(15:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(69),Device(0),Page(23:1/16),Diskblock(23),FileRead,Openfile(0:1/0),Thread(15:1/W1)) this Page(23:1/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(23:1/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(23:1/16) swap-in finish Thread(15:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(70),Device(2),Page(5:1/20),Diskblock(0),FileRead,Openfile(6:1/2),Thread(9:1/W0)) this Page(5:1/20)
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 10030/250000PageTableEntry][do_lock] iorb IORB(Id(71),Device(1),Page(6:1/27),Diskblock(7),FileWrite,Openfile(8:1/1),Thread(6:1/W0)) this Page(6:1/27)
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(6:1/27)
[MMU][do_refer] address = 26415 offset = 815 page no = 25 Thread(11:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(11:2/RU) 22 Page(25:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(11:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(11:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(25:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(23:1/16)
[PageFaultHandler][do_handlePageFault] set Page(25:2/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(25:2/16) do swap-in Thread(11:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(72),Device(0),Page(25:2/16),Diskblock(89),FileRead,Openfile(4:2/0),Thread(11:2/W1)) this Page(25:2/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 1903 offset = 879 page no = 1 Thread(2:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(2:1/RU) 22 Page(1:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(2:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(2:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(1:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(1:1/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(1:1/19) do swap-in Thread(2:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(73),Device(0),Page(1:1/19),Diskblock(1),FileRead,Openfile(0:1/0),Thread(2:1/W1)) this Page(1:1/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(5:1/20)
[PageTableEntry][do_unlock] this Page(25:2/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(25:2/16) swap-in finish Thread(11:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(1:1/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(1:1/19) swap-in finish Thread(2:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 14123 offset = 811 page no = 13 Thread(6:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(6:1/RU) 21 Page(13:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(6:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(6:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(13:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(1:1/19)
[PageFaultHandler][do_handlePageFault] Frame(19) is dirty, do swap-out Thread(6:1/W0)
[PageFaultHandler][SwapOut] page Page(1:1/19) frame Frame(19)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 1
PageTableEntry][do_lock] iorb IORB(Id(74),Device(0),Page(1:1/19),Diskblock(1),FileWrite,Openfile(0:1/0),Thread(6:1/W1)) this Page(1:1/19)
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:1/19)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(19) Page(1:1/19) Thread(6:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(13:1/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(13:1/19) do swap-in Thread(6:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(75),Device(0),Page(13:1/19),Diskblock(13),FileRead,Openfile(0:1/0),Thread(6:1/W1)) this Page(13:1/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(13:1/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(13:1/19) swap-in finish Thread(6:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 7173 offset = 5 page no = 7 Thread(0:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(0:1/RU) 21 Page(7:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(0:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(0:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(7:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(12:2/18)
[PageFaultHandler][do_handlePageFault] Frame(18) is dirty, do swap-out Thread(0:1/W0)
[PageFaultHandler][SwapOut] page Page(12:2/18) frame Frame(18)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 12
PageTableEntry][do_lock] iorb IORB(Id(76),Device(0),Page(12:2/18),Diskblock(12),FileWrite,Openfile(0:1/0),Thread(0:1/W1)) this Page(12:2/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(77),Device(1),Page(5:1/20),Diskblock(9),FileWrite,Openfile(8:1/1),Thread(8:1/W0)) this Page(5:1/20)
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 17074 offset = 690 page no = 16 Thread(9:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(9:1/RU) 22 Page(16:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(9:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(9:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(16:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(16:1/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(16:1/23) do swap-in Thread(9:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(78),Device(0),Page(16:1/23),Diskblock(16),FileRead,Openfile(0:1/0),Thread(9:1/W1)) this Page(16:1/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(12:2/18)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(18) Page(12:2/18) Thread(0:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(7:1/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(7:1/18) do swap-in Thread(0:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(79),Device(0),Page(7:1/18),Diskblock(7),FileRead,Openfile(0:1/0),Thread(0:1/W1)) this Page(7:1/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(5:1/20)
[PageTableEntry][do_unlock] this Page(16:1/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(16:1/23) swap-in finish Thread(9:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 11023/250000[PageTableEntry][do_unlock] this Page(7:1/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(7:1/18) swap-in finish Thread(0:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 52147 offset = 947 page no = 50 Thread(3:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(3:1/RU) 21 Page(50:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(3:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(3:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(50:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(47:1/21)
[PageFaultHandler][do_handlePageFault] Frame(21) is dirty, do swap-out Thread(3:1/W0)
[PageFaultHandler][SwapOut] page Page(47:1/21) frame Frame(21)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 47
PageTableEntry][do_lock] iorb IORB(Id(80),Device(0),Page(47:1/21),Diskblock(47),FileWrite,Openfile(0:1/0),Thread(3:1/W1)) this Page(47:1/21)
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(47:1/21)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(21) Page(47:1/21) Thread(3:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(50:1/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(50:1/21) do swap-in Thread(3:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(81),Device(0),Page(50:1/21),Diskblock(50),FileRead,Openfile(0:1/0),Thread(3:1/W1)) this Page(50:1/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(50:1/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(50:1/21) swap-in finish Thread(3:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 14067 offset = 755 page no = 13 Thread(11:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(11:2/RU) 21 Page(13:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(11:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(11:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(13:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(60:1/22)
[PageFaultHandler][do_handlePageFault] Frame(22) is dirty, do swap-out Thread(11:2/W0)
[PageFaultHandler][SwapOut] page Page(60:1/22) frame Frame(22)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 60
PageTableEntry][do_lock] iorb IORB(Id(82),Device(0),Page(60:1/22),Diskblock(124),FileWrite,Openfile(4:2/0),Thread(11:2/W1)) this Page(60:1/22)
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 7650 offset = 482 page no = 7 Thread(9:1/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(60:1/22)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(22) Page(60:1/22) Thread(11:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(13:2/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(13:2/22) do swap-in Thread(11:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(83),Device(0),Page(13:2/22),Diskblock(77),FileRead,Openfile(4:2/0),Thread(11:2/W1)) this Page(13:2/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(13:2/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(13:2/22) swap-in finish Thread(11:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 61249 offset = 833 page no = 59 Thread(2:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(2:1/RU) 22 Page(59:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(2:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(2:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(59:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(49:1/24)
[PageFaultHandler][do_handlePageFault] set Page(59:1/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(59:1/24) do swap-in Thread(2:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(84),Device(0),Page(59:1/24),Diskblock(59),FileRead,Openfile(0:1/0),Thread(2:1/W1)) this Page(59:1/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(59:1/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(59:1/24) swap-in finish Thread(2:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 12009/250000[MMU][do_refer] address = 22014 offset = 510 page no = 21 Thread(6:1/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 37273 offset = 409 page no = 36 Thread(1:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(1:1/RU) 22 Page(36:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(1:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(1:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(36:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(56:1/25)
[PageFaultHandler][do_handlePageFault] Frame(25) is dirty, do swap-out Thread(1:1/W0)
[PageFaultHandler][SwapOut] page Page(56:1/25) frame Frame(25)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 56
PageTableEntry][do_lock] iorb IORB(Id(85),Device(0),Page(56:1/25),Diskblock(56),FileWrite,Openfile(0:1/0),Thread(1:1/W1)) this Page(56:1/25)
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(56:1/25)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(25) Page(56:1/25) Thread(1:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(36:1/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(36:1/25) do swap-in Thread(1:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(86),Device(0),Page(36:1/25),Diskblock(36),FileRead,Openfile(0:1/0),Thread(1:1/W1)) this Page(36:1/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(36:1/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(36:1/25) swap-in finish Thread(1:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 42482 offset = 498 page no = 41 Thread(8:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(8:1/RU) 21 Page(41:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(8:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(8:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(41:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(6:1/27)
[PageFaultHandler][do_handlePageFault] Frame(27) is dirty, do swap-out Thread(8:1/W0)
[PageFaultHandler][SwapOut] page Page(6:1/27) frame Frame(27)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 6
PageTableEntry][do_lock] iorb IORB(Id(87),Device(0),Page(6:1/27),Diskblock(6),FileWrite,Openfile(0:1/0),Thread(8:1/W1)) this Page(6:1/27)
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(6:1/27)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(27) Page(6:1/27) Thread(8:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(41:1/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(41:1/27) do swap-in Thread(8:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(88),Device(0),Page(41:1/27),Diskblock(41),FileRead,Openfile(0:1/0),Thread(8:1/W1)) this Page(41:1/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(41:1/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(41:1/27) swap-in finish Thread(8:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 9943 offset = 727 page no = 9 Thread(4:1/RU)
[MMU][do_refer] Do memory write.
Simulation progress: 13012/250000[MMU][do_refer] address = 38373 offset = 485 page no = 37 Thread(6:1/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 37753 offset = 889 page no = 36 Thread(6:1/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 40453 offset = 517 page no = 39 Thread(9:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(9:1/RU) 21 Page(39:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(9:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(9:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(39:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] set Page(39:1/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(39:1/28) do swap-in Thread(9:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(89),Device(0),Page(39:1/28),Diskblock(39),FileRead,Openfile(0:1/0),Thread(9:1/W1)) this Page(39:1/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(39:1/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(39:1/28) swap-in finish Thread(9:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 14025/250000[MMU][do_refer] address = 46037 offset = 981 page no = 44 Thread(8:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(8:1/RU) 22 Page(44:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(8:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(8:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(44:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(52:1/26)
[PageFaultHandler][do_handlePageFault] set Page(44:1/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(44:1/26) do swap-in Thread(8:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(90),Device(0),Page(44:1/26),Diskblock(44),FileRead,Openfile(0:1/0),Thread(8:1/W1)) this Page(44:1/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(44:1/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(44:1/26) swap-in finish Thread(8:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 53185 offset = 961 page no = 51 Thread(0:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(0:1/RU) 22 Page(51:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(0:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(0:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(51:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(37:1/0)
[PageFaultHandler][do_handlePageFault] Frame(0) is dirty, do swap-out Thread(0:1/W0)
[PageFaultHandler][SwapOut] page Page(37:1/0) frame Frame(0)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 37
PageTableEntry][do_lock] iorb IORB(Id(91),Device(0),Page(37:1/0),Diskblock(37),FileWrite,Openfile(0:1/0),Thread(0:1/W1)) this Page(37:1/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(37:1/0)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(0) Page(37:1/0) Thread(0:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(51:1/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(51:1/0) do swap-in Thread(0:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(92),Device(0),Page(51:1/0),Diskblock(51),FileRead,Openfile(0:1/0),Thread(0:1/W1)) this Page(51:1/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(93),Device(2),Page(5:1/20),Diskblock(6),FileRead,Openfile(14:1/2),Thread(4:1/W0)) this Page(5:1/20)
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(51:1/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(51:1/0) swap-in finish Thread(0:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 60883 offset = 467 page no = 59 Thread(3:1/RU)
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(94),Device(2),Page(7:1/18),Diskblock(6),FileRead,Openfile(14:1/2),Thread(3:1/W0)) this Page(7:1/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 5796 offset = 676 page no = 5 Thread(9:1/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(5:1/20)
Simulation progress: 15093/250000[PageTableEntry][do_unlock] this Page(7:1/18)
[MMU][do_refer] address = 30012 offset = 316 page no = 29 Thread(17:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(17:4/RU) 22 Page(29:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(17:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(17:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(29:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(11:1/1)
[PageFaultHandler][do_handlePageFault] Frame(1) is dirty, do swap-out Thread(17:4/W0)
[PageFaultHandler][SwapOut] page Page(11:1/1) frame Frame(1)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 11
PageTableEntry][do_lock] iorb IORB(Id(95),Device(0),Page(11:1/1),Diskblock(203),FileWrite,Openfile(12:4/0),Thread(17:4/W1)) this Page(11:1/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 21810 offset = 306 page no = 21 Thread(5:1/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 18493 offset = 61 page no = 18 Thread(6:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(6:1/RU) 22 Page(18:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(6:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(6:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(18:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(19:1/29)
[PageFaultHandler][do_handlePageFault] Frame(29) is dirty, do swap-out Thread(6:1/W0)
[PageFaultHandler][SwapOut] page Page(19:1/29) frame Frame(29)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 19
PageTableEntry][do_lock] iorb IORB(Id(96),Device(0),Page(19:1/29),Diskblock(19),FileWrite,Openfile(0:1/0),Thread(6:1/W1)) this Page(19:1/29)
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(11:1/1)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(1) Page(11:1/1) Thread(17:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(29:4/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(29:4/1) do swap-in Thread(17:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(97),Device(0),Page(29:4/1),Diskblock(221),FileRead,Openfile(12:4/0),Thread(17:4/W1)) this Page(29:4/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(19:1/29)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(29) Page(19:1/29) Thread(6:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(18:1/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(18:1/29) do swap-in Thread(6:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(98),Device(0),Page(18:1/29),Diskblock(18),FileRead,Openfile(0:1/0),Thread(6:1/W1)) this Page(18:1/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 5828 offset = 708 page no = 5 Thread(4:1/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 58246 offset = 902 page no = 56 Thread(9:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(9:1/RU) 21 Page(56:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(9:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(9:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(56:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(33:3/2)
[PageFaultHandler][do_handlePageFault] Frame(2) is dirty, do swap-out Thread(9:1/W0)
[PageFaultHandler][SwapOut] page Page(33:3/2) frame Frame(2)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 33
PageTableEntry][do_lock] iorb IORB(Id(99),Device(0),Page(33:3/2),Diskblock(33),FileWrite,Openfile(0:1/0),Thread(9:1/W1)) this Page(33:3/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 16048/250000[PageTableEntry][do_unlock] this Page(29:4/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(29:4/1) swap-in finish Thread(17:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 60104 offset = 712 page no = 58 Thread(8:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(8:1/RU) 21 Page(58:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(8:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(8:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(58:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(28:1/6)
[PageFaultHandler][do_handlePageFault] Frame(6) is dirty, do swap-out Thread(8:1/W0)
[PageFaultHandler][SwapOut] page Page(28:1/6) frame Frame(6)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 28
PageTableEntry][do_lock] iorb IORB(Id(100),Device(0),Page(28:1/6),Diskblock(28),FileWrite,Openfile(0:1/0),Thread(8:1/W1)) this Page(28:1/6)
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 35997 offset = 157 page no = 35 Thread(3:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(3:1/RU) 22 Page(35:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(3:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(3:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(35:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(61:1/4)
[PageFaultHandler][do_handlePageFault] Frame(4) is dirty, do swap-out Thread(3:1/W0)
[PageFaultHandler][SwapOut] page Page(61:1/4) frame Frame(4)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 61
PageTableEntry][do_lock] iorb IORB(Id(101),Device(0),Page(61:1/4),Diskblock(61),FileWrite,Openfile(0:1/0),Thread(3:1/W1)) this Page(61:1/4)
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 25917 offset = 317 page no = 25 Thread(11:2/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(18:1/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(18:1/29) swap-in finish Thread(6:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(33:3/2)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(2) Page(33:3/2) Thread(9:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(56:1/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(56:1/2) do swap-in Thread(9:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(102),Device(0),Page(56:1/2),Diskblock(56),FileRead,Openfile(0:1/0),Thread(9:1/W1)) this Page(56:1/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 18981 offset = 549 page no = 18 Thread(0:1/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(28:1/6)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(6) Page(28:1/6) Thread(8:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(58:1/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(58:1/6) do swap-in Thread(8:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(103),Device(0),Page(58:1/6),Diskblock(58),FileRead,Openfile(0:1/0),Thread(8:1/W1)) this Page(58:1/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(61:1/4)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(4) Page(61:1/4) Thread(3:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(35:1/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(35:1/4) do swap-in Thread(3:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(104),Device(0),Page(35:1/4),Diskblock(35),FileRead,Openfile(0:1/0),Thread(3:1/W1)) this Page(35:1/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(105),Device(2),Page(5:1/20),Diskblock(6),FileRead,Openfile(16:1/2),Thread(5:1/W0)) this Page(5:1/20)
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(56:1/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(56:1/2) swap-in finish Thread(9:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(58:1/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(58:1/6) swap-in finish Thread(8:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(35:1/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(35:1/4) swap-in finish Thread(3:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 44187 offset = 155 page no = 43 Thread(17:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(17:4/RU) 21 Page(43:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(17:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(17:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(43:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(18:1/29)
[PageFaultHandler][do_handlePageFault] Frame(29) is dirty, do swap-out Thread(17:4/W0)
[PageFaultHandler][SwapOut] page Page(18:1/29) frame Frame(29)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 18
PageTableEntry][do_lock] iorb IORB(Id(106),Device(0),Page(18:1/29),Diskblock(210),FileWrite,Openfile(12:4/0),Thread(17:4/W1)) this Page(18:1/29)
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 7505 offset = 337 page no = 7 Thread(18:1/RU)
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(107),Device(2),Page(7:1/18),Diskblock(8),FileWrite,Openfile(16:1/2),Thread(18:1/W0)) this Page(7:1/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 50249 offset = 73 page no = 49 Thread(6:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(6:1/RU) 21 Page(49:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(6:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(6:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(49:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(58:1/6)
[PageFaultHandler][do_handlePageFault] set Page(49:1/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(49:1/6) do swap-in Thread(6:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(108),Device(0),Page(49:1/6),Diskblock(49),FileRead,Openfile(0:1/0),Thread(6:1/W1)) this Page(49:1/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(5:1/20)
[MMU][do_refer] address = 18686 offset = 254 page no = 18 Thread(19:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(19:4/RU) 22 Page(18:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(19:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(19:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(18:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] set Page(18:4/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(18:4/11) do swap-in Thread(19:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(109),Device(0),Page(18:4/11),Diskblock(210),FileRead,Openfile(12:4/0),Thread(19:4/W1)) this Page(18:4/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 7438 offset = 270 page no = 7 Thread(16:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(16:4/RU) 22 Page(7:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(16:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(16:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(7:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] set Page(7:4/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(7:4/10) do swap-in Thread(16:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(110),Device(0),Page(7:4/10),Diskblock(199),FileRead,Openfile(12:4/0),Thread(16:4/W1)) this Page(7:4/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(18:1/29)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(29) Page(18:1/29) Thread(17:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(43:4/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(43:4/29) do swap-in Thread(17:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(111),Device(0),Page(43:4/29),Diskblock(235),FileRead,Openfile(12:4/0),Thread(17:4/W1)) this Page(43:4/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 17044/250000[PageTableEntry][do_unlock] this Page(49:1/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(49:1/6) swap-in finish Thread(6:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 22820 offset = 292 page no = 22 Thread(8:1/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 9889 offset = 673 page no = 9 Thread(8:1/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 64832 offset = 320 page no = 63 Thread(8:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(8:1/RU) 22 Page(63:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(8:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(8:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(63:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(9:1/8)
[PageFaultHandler][do_handlePageFault] Frame(8) is dirty, do swap-out Thread(8:1/W0)
[PageFaultHandler][SwapOut] page Page(9:1/8) frame Frame(8)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 9
PageTableEntry][do_lock] iorb IORB(Id(112),Device(0),Page(9:1/8),Diskblock(9),FileWrite,Openfile(0:1/0),Thread(8:1/W1)) this Page(9:1/8)
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 33447 offset = 679 page no = 32 Thread(10:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(10:1/RU) 21 Page(32:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(10:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(10:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(7) for Page(32:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(7) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(29:1/7)
[PageFaultHandler][do_handlePageFault] set Page(32:1/null) and Frame(7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(32:1/7) do swap-in Thread(10:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(113),Device(0),Page(32:1/7),Diskblock(32),FileRead,Openfile(0:1/0),Thread(10:1/W1)) this Page(32:1/7)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(7:1/18)
[MMU][do_refer] address = 33385 offset = 617 page no = 32 Thread(4:1/RU)
[PageTableEntry][do_unlock] this Page(18:4/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(18:4/11) swap-in finish Thread(19:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(7:4/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(7:4/10) swap-in finish Thread(16:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(43:4/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(43:4/29) swap-in finish Thread(17:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 31729 offset = 1009 page no = 30 Thread(6:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(6:1/RU) 22 Page(30:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(6:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(6:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(30:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(18:4/11)
[PageFaultHandler][do_handlePageFault] Frame(11) is dirty, do swap-out Thread(6:1/W0)
[PageFaultHandler][SwapOut] page Page(18:4/11) frame Frame(11)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 18
PageTableEntry][do_lock] iorb IORB(Id(114),Device(0),Page(18:4/11),Diskblock(18),FileWrite,Openfile(0:1/0),Thread(6:1/W1)) this Page(18:4/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 18698 offset = 266 page no = 18 Thread(18:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(18:1/RU) 21 Page(18:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(18:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(18:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(18:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(15:1/9)
[PageFaultHandler][do_handlePageFault] set Page(18:1/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(18:1/9) do swap-in Thread(18:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(115),Device(0),Page(18:1/9),Diskblock(18),FileRead,Openfile(0:1/0),Thread(18:1/W1)) this Page(18:1/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(9:1/8)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(8) Page(9:1/8) Thread(8:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(63:1/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(63:1/8) do swap-in Thread(8:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(116),Device(0),Page(63:1/8),Diskblock(63),FileRead,Openfile(0:1/0),Thread(8:1/W1)) this Page(63:1/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 28670 offset = 1022 page no = 27 Thread(5:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(5:1/RU) 22 Page(27:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(5:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(5:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(27:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(46:1/12)
[PageFaultHandler][do_handlePageFault] set Page(27:1/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(27:1/12) do swap-in Thread(5:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(117),Device(0),Page(27:1/12),Diskblock(27),FileRead,Openfile(0:1/0),Thread(5:1/W1)) this Page(27:1/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(32:1/7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(32:1/7) swap-in finish Thread(10:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 2562 offset = 514 page no = 2 Thread(16:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(16:4/RU) 21 Page(2:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(16:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(16:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(2:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(53:1/14)
[PageFaultHandler][do_handlePageFault] Frame(14) is dirty, do swap-out Thread(16:4/W0)
[PageFaultHandler][SwapOut] page Page(53:1/14) frame Frame(14)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 53
PageTableEntry][do_lock] iorb IORB(Id(118),Device(0),Page(53:1/14),Diskblock(245),FileWrite,Openfile(12:4/0),Thread(16:4/W1)) this Page(53:1/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(18:4/11)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(11) Page(18:4/11) Thread(6:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(30:1/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(30:1/11) do swap-in Thread(6:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(119),Device(0),Page(30:1/11),Diskblock(30),FileRead,Openfile(0:1/0),Thread(6:1/W1)) this Page(30:1/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 15914 offset = 554 page no = 15 Thread(2:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(2:1/RU) 21 Page(15:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(2:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(2:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(15:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(22:1/15)
[PageFaultHandler][do_handlePageFault] Frame(15) is dirty, do swap-out Thread(2:1/W0)
[PageFaultHandler][SwapOut] page Page(22:1/15) frame Frame(15)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 22
PageTableEntry][do_lock] iorb IORB(Id(120),Device(0),Page(22:1/15),Diskblock(22),FileWrite,Openfile(0:1/0),Thread(2:1/W1)) this Page(22:1/15)
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(18:1/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(18:1/9) swap-in finish Thread(18:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 46250 offset = 170 page no = 45 Thread(9:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(9:1/RU) 21 Page(45:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(9:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(9:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(45:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(21:1/17)
[PageFaultHandler][do_handlePageFault] Frame(17) is dirty, do swap-out Thread(9:1/W0)
[PageFaultHandler][SwapOut] page Page(21:1/17) frame Frame(17)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 21
PageTableEntry][do_lock] iorb IORB(Id(121),Device(0),Page(21:1/17),Diskblock(21),FileWrite,Openfile(0:1/0),Thread(9:1/W1)) this Page(21:1/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 18049/250000[PageTableEntry][do_unlock] this Page(63:1/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(63:1/8) swap-in finish Thread(8:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(27:1/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(27:1/12) swap-in finish Thread(5:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 64143 offset = 655 page no = 62 Thread(19:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(19:4/RU) 22 Page(62:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(19:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(19:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(62:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(63:1/8)
[PageFaultHandler][do_handlePageFault] Frame(8) is dirty, do swap-out Thread(19:4/W0)
[PageFaultHandler][SwapOut] page Page(63:1/8) frame Frame(8)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 63
PageTableEntry][do_lock] iorb IORB(Id(122),Device(0),Page(63:1/8),Diskblock(255),FileWrite,Openfile(12:4/0),Thread(19:4/W1)) this Page(63:1/8)
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(123),Device(2),Page(5:1/20),Diskblock(8),FileWrite,Openfile(16:1/2),Thread(4:1/W0)) this Page(5:1/20)
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(124),Device(2),Page(7:1/18),Diskblock(6),FileRead,Openfile(16:1/2),Thread(10:1/W0)) this Page(7:1/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(53:1/14)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(14) Page(53:1/14) Thread(16:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(2:4/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(2:4/14) do swap-in Thread(16:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(125),Device(0),Page(2:4/14),Diskblock(194),FileRead,Openfile(12:4/0),Thread(16:4/W1)) this Page(2:4/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(30:1/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(30:1/11) swap-in finish Thread(6:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(5:1/20)
[PageTableEntry][do_unlock] this Page(22:1/15)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(15) Page(22:1/15) Thread(2:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(15:1/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(15:1/15) do swap-in Thread(2:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(126),Device(0),Page(15:1/15),Diskblock(15),FileRead,Openfile(0:1/0),Thread(2:1/W1)) this Page(15:1/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(21:1/17)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(17) Page(21:1/17) Thread(9:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(45:1/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(45:1/17) do swap-in Thread(9:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(127),Device(0),Page(45:1/17),Diskblock(45),FileRead,Openfile(0:1/0),Thread(9:1/W1)) this Page(45:1/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 20389 offset = 933 page no = 19 Thread(3:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(3:1/RU) 21 Page(19:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(3:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(3:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(19:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(27:1/12)
[PageFaultHandler][do_handlePageFault] Frame(12) is dirty, do swap-out Thread(3:1/W0)
[PageFaultHandler][SwapOut] page Page(27:1/12) frame Frame(12)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 27
PageTableEntry][do_lock] iorb IORB(Id(128),Device(0),Page(27:1/12),Diskblock(27),FileWrite,Openfile(0:1/0),Thread(3:1/W1)) this Page(27:1/12)
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 5200 offset = 80 page no = 5 Thread(11:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(11:2/RU) 22 Page(5:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(11:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(11:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(5:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(25:2/16)
[PageFaultHandler][do_handlePageFault] Frame(16) is dirty, do swap-out Thread(11:2/W0)
[PageFaultHandler][SwapOut] page Page(25:2/16) frame Frame(16)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 25
PageTableEntry][do_lock] iorb IORB(Id(129),Device(0),Page(25:2/16),Diskblock(89),FileWrite,Openfile(4:2/0),Thread(11:2/W1)) this Page(25:2/16)
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 42833 offset = 849 page no = 41 Thread(20:1/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 49804 offset = 652 page no = 48 Thread(6:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(6:1/RU) 21 Page(48:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(6:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(6:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(48:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(5:1/20)
[PageFaultHandler][do_handlePageFault] Frame(20) is dirty, do swap-out Thread(6:1/W0)
[PageFaultHandler][SwapOut] page Page(5:1/20) frame Frame(20)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 5
PageTableEntry][do_lock] iorb IORB(Id(130),Device(0),Page(5:1/20),Diskblock(5),FileWrite,Openfile(0:1/0),Thread(6:1/W1)) this Page(5:1/20)
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(63:1/8)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(8) Page(63:1/8) Thread(19:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(62:4/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(62:4/8) do swap-in Thread(19:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(131),Device(0),Page(62:4/8),Diskblock(254),FileRead,Openfile(12:4/0),Thread(19:4/W1)) this Page(62:4/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 19017/250000[PageTableEntry][do_unlock] this Page(7:1/18)
[MMU][do_refer] address = 55554 offset = 258 page no = 54 Thread(17:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(17:4/RU) 21 Page(54:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(17:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(17:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(54:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(13:1/19)
[PageFaultHandler][do_handlePageFault] set Page(54:4/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(54:4/19) do swap-in Thread(17:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(132),Device(0),Page(54:4/19),Diskblock(246),FileRead,Openfile(12:4/0),Thread(17:4/W1)) this Page(54:4/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(2:4/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(2:4/14) swap-in finish Thread(16:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 6703 offset = 559 page no = 6 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 21 Page(6:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(6:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(16:1/23)
[PageFaultHandler][do_handlePageFault] Frame(23) is dirty, do swap-out Thread(14:3/W0)
[PageFaultHandler][SwapOut] page Page(16:1/23) frame Frame(23)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 16
PageTableEntry][do_lock] iorb IORB(Id(133),Device(0),Page(16:1/23),Diskblock(144),FileWrite,Openfile(10:3/0),Thread(14:3/W1)) this Page(16:1/23)
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(15:1/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(15:1/15) swap-in finish Thread(2:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 13568 offset = 256 page no = 13 Thread(20:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(20:1/RU) 22 Page(13:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(20:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(20:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(13:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(7:1/18)
[PageFaultHandler][do_handlePageFault] Frame(18) is dirty, do swap-out Thread(20:1/W0)
[PageFaultHandler][SwapOut] page Page(7:1/18) frame Frame(18)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 7
PageTableEntry][do_lock] iorb IORB(Id(134),Device(0),Page(7:1/18),Diskblock(7),FileWrite,Openfile(0:1/0),Thread(20:1/W1)) this Page(7:1/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(45:1/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(45:1/17) swap-in finish Thread(9:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(27:1/12)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(12) Page(27:1/12) Thread(3:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(19:1/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(19:1/12) do swap-in Thread(3:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(135),Device(0),Page(19:1/12),Diskblock(19),FileRead,Openfile(0:1/0),Thread(3:1/W1)) this Page(19:1/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 9671 offset = 455 page no = 9 Thread(4:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(4:1/RU) 21 Page(9:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(4:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(4:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(9:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(45:1/17)
[PageFaultHandler][do_handlePageFault] set Page(9:1/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(9:1/17) do swap-in Thread(4:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(136),Device(0),Page(9:1/17),Diskblock(9),FileRead,Openfile(0:1/0),Thread(4:1/W1)) this Page(9:1/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 10145 offset = 929 page no = 9 Thread(2:1/RU)
[MMU][do_refer] address = 16317 offset = 957 page no = 15 Thread(5:1/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(25:2/16)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(16) Page(25:2/16) Thread(11:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(5:2/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(5:2/16) do swap-in Thread(11:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(137),Device(0),Page(5:2/16),Diskblock(69),FileRead,Openfile(4:2/0),Thread(11:2/W1)) this Page(5:2/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(5:1/20)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(20) Page(5:1/20) Thread(6:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(48:1/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(48:1/20) do swap-in Thread(6:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(138),Device(0),Page(48:1/20),Diskblock(48),FileRead,Openfile(0:1/0),Thread(6:1/W1)) this Page(48:1/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 40510 offset = 574 page no = 39 Thread(18:1/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(62:4/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(62:4/8) swap-in finish Thread(19:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 12876 offset = 588 page no = 12 Thread(5:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(5:1/RU) 22 Page(12:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(5:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(5:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(12:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(62:4/8)
[PageFaultHandler][do_handlePageFault] Frame(8) is dirty, do swap-out Thread(5:1/W0)
[PageFaultHandler][SwapOut] page Page(62:4/8) frame Frame(8)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 62
PageTableEntry][do_lock] iorb IORB(Id(139),Device(0),Page(62:4/8),Diskblock(62),FileWrite,Openfile(0:1/0),Thread(5:1/W1)) this Page(62:4/8)
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageCleanDaemon][unleash] osp.Memory.PageCleanDaemon@1bf99cf5 execute time 20000
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(24)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(25)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(27)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(26)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(0)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(1)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(24)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(24) Page(59:1/24) isDirty true
[PageFaultHandler][SwapOut] file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 59
PageTableEntry][do_lock] iorb IORB(Id(140),Device(0),Page(59:1/24),Diskblock(59),FileWrite,Openfile(0:1/0),Thread(21:0/W1)) this Page(59:1/24)
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 20020/250000[MMU][do_refer] address = 53520 offset = 272 page no = 52 Thread(18:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(18:1/RU) 22 Page(52:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(18:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(18:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(52:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(50:1/21)
[PageFaultHandler][do_handlePageFault] set Page(52:1/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(52:1/21) do swap-in Thread(18:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(141),Device(0),Page(52:1/21),Diskblock(52),FileRead,Openfile(0:1/0),Thread(18:1/W1)) this Page(52:1/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(54:4/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(54:4/19) swap-in finish Thread(17:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(16:1/23)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(23) Page(16:1/23) Thread(14:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(6:3/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(6:3/23) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(142),Device(0),Page(6:3/23),Diskblock(134),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(6:3/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(143),Device(2),Page(15:1/15),Diskblock(8),FileRead,Openfile(20:1/2),Thread(10:1/W0)) this Page(15:1/15)
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 50415 offset = 239 page no = 49 Thread(19:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(19:4/RU) 21 Page(49:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(19:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(19:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(49:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(54:4/19)
[PageFaultHandler][do_handlePageFault] set Page(49:4/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(49:4/19) do swap-in Thread(19:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(144),Device(0),Page(49:4/19),Diskblock(241),FileRead,Openfile(12:4/0),Thread(19:4/W1)) this Page(49:4/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(7:1/18)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(18) Page(7:1/18) Thread(20:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(13:1/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(13:1/18) do swap-in Thread(20:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(145),Device(0),Page(13:1/18),Diskblock(13),FileRead,Openfile(0:1/0),Thread(20:1/W1)) this Page(13:1/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(19:1/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(19:1/12) swap-in finish Thread(3:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(146),Device(2),Page(0:4/null),Diskblock(8),FileRead,Openfile(16:1/2),Thread(17:4/W0)) this Page(0:4/null)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] validating_thread is null, handlePageFault
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(17:4/W0) 23 Page(0:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(17:4/W0) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(17:4/W1) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(0:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(39:1/28)
[PageFaultHandler][do_handlePageFault] set Page(0:4/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(0:4/28) do swap-in Thread(17:4/W1)
PageTableEntry][do_lock] iorb IORB(Id(147),Device(0),Page(0:4/28),Diskblock(192),FileRead,Openfile(12:4/0),Thread(17:4/W2)) this Page(0:4/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(9:1/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(9:1/17) swap-in finish Thread(4:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(5:2/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(5:2/16) swap-in finish Thread(11:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(48:1/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(48:1/20) swap-in finish Thread(6:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 42623 offset = 639 page no = 41 Thread(2:1/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(62:4/8)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(8) Page(62:4/8) Thread(5:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(12:1/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(12:1/8) do swap-in Thread(5:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(148),Device(0),Page(12:1/8),Diskblock(12),FileRead,Openfile(0:1/0),Thread(5:1/W1)) this Page(12:1/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(59:1/24)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(24) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(25)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(25) Page(36:1/25) isDirty true
[PageFaultHandler][SwapOut] file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 36
PageTableEntry][do_lock] iorb IORB(Id(149),Device(0),Page(36:1/25),Diskblock(36),FileWrite,Openfile(0:1/0),Thread(21:0/W1)) this Page(36:1/25)
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(15:1/15)
[PageTableEntry][do_unlock] this Page(52:1/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(52:1/21) swap-in finish Thread(18:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(150),Device(2),Page(9:1/17),Diskblock(6),FileRead,Openfile(16:1/2),Thread(3:1/W0)) this Page(9:1/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(6:3/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(6:3/23) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 9033 offset = 841 page no = 8 Thread(4:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(4:1/RU) 22 Page(8:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(4:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(4:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(8:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(5:2/16)
[PageFaultHandler][do_handlePageFault] Frame(16) is dirty, do swap-out Thread(4:1/W0)
[PageFaultHandler][SwapOut] page Page(5:2/16) frame Frame(16)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 5
PageTableEntry][do_lock] iorb IORB(Id(151),Device(0),Page(5:2/16),Diskblock(5),FileWrite,Openfile(0:1/0),Thread(4:1/W1)) this Page(5:2/16)
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 21001/250000[PageTableEntry][do_unlock] this Page(49:4/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(49:4/19) swap-in finish Thread(19:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(13:1/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(13:1/18) swap-in finish Thread(20:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(9:1/17)
[MMU][do_refer] address = 38286 offset = 398 page no = 37 Thread(6:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(6:1/RU) 21 Page(37:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(6:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(6:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(37:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(52:1/21)
[PageFaultHandler][do_handlePageFault] Frame(21) is dirty, do swap-out Thread(6:1/W0)
[PageFaultHandler][SwapOut] page Page(52:1/21) frame Frame(21)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 52
PageTableEntry][do_lock] iorb IORB(Id(152),Device(0),Page(52:1/21),Diskblock(52),FileWrite,Openfile(0:1/0),Thread(6:1/W1)) this Page(52:1/21)
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:4/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(0:4/28) swap-in finish Thread(17:4/W1)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(12:1/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(12:1/8) swap-in finish Thread(5:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 51309 offset = 109 page no = 50 Thread(10:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(10:1/RU) 21 Page(50:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(10:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(10:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(50:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(35:1/4)
[PageFaultHandler][do_handlePageFault] Frame(4) is dirty, do swap-out Thread(10:1/W0)
[PageFaultHandler][SwapOut] page Page(35:1/4) frame Frame(4)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 35
PageTableEntry][do_lock] iorb IORB(Id(153),Device(0),Page(35:1/4),Diskblock(35),FileWrite,Openfile(0:1/0),Thread(10:1/W1)) this Page(35:1/4)
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(36:1/25)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(25) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(27)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(27) Page(41:1/27) isDirty true
[PageFaultHandler][SwapOut] file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 41
PageTableEntry][do_lock] iorb IORB(Id(154),Device(0),Page(41:1/27),Diskblock(41),FileWrite,Openfile(0:1/0),Thread(21:0/W1)) this Page(41:1/27)
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(5:2/16)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(16) Page(5:2/16) Thread(4:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(8:1/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(8:1/16) do swap-in Thread(4:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(155),Device(0),Page(8:1/16),Diskblock(8),FileRead,Openfile(0:1/0),Thread(4:1/W1)) this Page(8:1/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(156),Device(2),Page(9:1/17),Diskblock(11),FileWrite,Openfile(20:1/2),Thread(3:1/W0)) this Page(9:1/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(52:1/21)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(21) Page(52:1/21) Thread(6:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(37:1/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(37:1/21) do swap-in Thread(6:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(157),Device(0),Page(37:1/21),Diskblock(37),FileRead,Openfile(0:1/0),Thread(6:1/W1)) this Page(37:1/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(35:1/4)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(4) Page(35:1/4) Thread(10:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(50:1/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(50:1/4) do swap-in Thread(10:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(158),Device(0),Page(50:1/4),Diskblock(50),FileRead,Openfile(0:1/0),Thread(10:1/W1)) this Page(50:1/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(41:1/27)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(27) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(26)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(26) Page(44:1/26) isDirty true
[PageFaultHandler][SwapOut] file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 44
PageTableEntry][do_lock] iorb IORB(Id(159),Device(0),Page(44:1/26),Diskblock(44),FileWrite,Openfile(0:1/0),Thread(21:0/W1)) this Page(44:1/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:4/28)
Simulation progress: 22009/250000[PageTableEntry][do_unlock] this Page(8:1/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(8:1/16) swap-in finish Thread(4:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(37:1/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(37:1/21) swap-in finish Thread(6:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(50:1/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(50:1/4) swap-in finish Thread(10:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(44:1/26)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(26) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(0)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(0) Page(51:1/0) isDirty true
[PageFaultHandler][SwapOut] file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 51
PageTableEntry][do_lock] iorb IORB(Id(160),Device(0),Page(51:1/0),Diskblock(51),FileWrite,Openfile(0:1/0),Thread(21:0/W1)) this Page(51:1/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 6003 offset = 883 page no = 5 Thread(9:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(9:1/RU) 22 Page(5:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(9:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(9:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(5:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(8:1/16)
[PageFaultHandler][do_handlePageFault] Frame(16) is dirty, do swap-out Thread(9:1/W0)
[PageFaultHandler][SwapOut] page Page(8:1/16) frame Frame(16)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 8
PageTableEntry][do_lock] iorb IORB(Id(161),Device(0),Page(8:1/16),Diskblock(8),FileWrite,Openfile(0:1/0),Thread(9:1/W1)) this Page(8:1/16)
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(51:1/0)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(0) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(1)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(1) Page(29:4/1) isDirty true
[PageFaultHandler][SwapOut] file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 29
PageTableEntry][do_lock] iorb IORB(Id(162),Device(0),Page(29:4/1),Diskblock(221),FileWrite,Openfile(12:4/0),Thread(21:0/W1)) this Page(29:4/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 52336 offset = 112 page no = 51 Thread(5:1/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(8:1/16)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(16) Page(8:1/16) Thread(9:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(5:1/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(5:1/16) do swap-in Thread(9:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(163),Device(0),Page(5:1/16),Diskblock(5),FileRead,Openfile(0:1/0),Thread(9:1/W1)) this Page(5:1/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 47473 offset = 369 page no = 46 Thread(4:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(4:1/RU) 22 Page(46:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(4:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(4:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(46:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(44:1/26)
[PageFaultHandler][do_handlePageFault] set Page(46:1/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(46:1/26) do swap-in Thread(4:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(164),Device(0),Page(46:1/26),Diskblock(46),FileRead,Openfile(0:1/0),Thread(4:1/W1)) this Page(46:1/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(9:1/17)
[PageTableEntry][do_unlock] this Page(29:4/1)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(1) finish
[MMU][do_refer] address = 9733 offset = 517 page no = 9 Thread(10:1/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 27259 offset = 635 page no = 26 Thread(10:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(10:1/RU) 21 Page(26:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(10:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(10:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(26:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(50:1/4)
[PageFaultHandler][do_handlePageFault] set Page(26:1/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(26:1/4) do swap-in Thread(10:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(165),Device(0),Page(26:1/4),Diskblock(26),FileRead,Openfile(0:1/0),Thread(10:1/W1)) this Page(26:1/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(5:1/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(5:1/16) swap-in finish Thread(9:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 63576 offset = 88 page no = 62 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 22 Page(62:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(62:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(34:1/5)
[PageFaultHandler][do_handlePageFault] set Page(62:3/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(62:3/5) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(166),Device(0),Page(62:3/5),Diskblock(190),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(62:3/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(46:1/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(46:1/26) swap-in finish Thread(4:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 14226 offset = 914 page no = 13 Thread(5:1/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(26:1/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(26:1/4) swap-in finish Thread(10:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 60897 offset = 481 page no = 59 Thread(3:1/RU)
[MMU][do_refer] Do memory read.
Simulation progress: 23074/250000PageTableEntry][do_lock] iorb IORB(Id(167),Device(2),Page(0:4/28),Diskblock(13),FileWrite,Openfile(16:1/2),Thread(19:4/W0)) this Page(0:4/28)
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 14327 offset = 1015 page no = 13 Thread(6:1/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(62:3/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(62:3/5) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 43478 offset = 470 page no = 42 Thread(22:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(22:1/RU) 21 Page(42:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(22:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(22:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(42:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(46:1/26)
[PageFaultHandler][do_handlePageFault] Frame(26) is dirty, do swap-out Thread(22:1/W0)
[PageFaultHandler][SwapOut] page Page(46:1/26) frame Frame(26)file Openfile(0:1/0)
[PageFaultHandler][SwapOut] block no 46
PageTableEntry][do_lock] iorb IORB(Id(168),Device(0),Page(46:1/26),Diskblock(46),FileWrite,Openfile(0:1/0),Thread(22:1/W1)) this Page(46:1/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(46:1/26)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(26) Page(46:1/26) Thread(22:1/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(42:1/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(42:1/26) do swap-in Thread(22:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(169),Device(0),Page(42:1/26),Diskblock(42),FileRead,Openfile(0:1/0),Thread(22:1/W1)) this Page(42:1/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 34517 offset = 725 page no = 33 Thread(11:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(11:2/RU) 21 Page(33:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(11:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(11:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(33:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(62:3/5)
[PageFaultHandler][do_handlePageFault] Frame(5) is dirty, do swap-out Thread(11:2/W0)
[PageFaultHandler][SwapOut] page Page(62:3/5) frame Frame(5)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 62
PageTableEntry][do_lock] iorb IORB(Id(170),Device(0),Page(62:3/5),Diskblock(126),FileWrite,Openfile(4:2/0),Thread(11:2/W1)) this Page(62:3/5)
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:4/28)
[PageTableEntry][do_unlock] this Page(42:1/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(42:1/26) swap-in finish Thread(22:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(171),Device(2),Page(5:1/16),Diskblock(8),FileRead,Openfile(16:1/2),Thread(10:1/W0)) this Page(5:1/16)
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(62:3/5)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(5) Page(62:3/5) Thread(11:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(33:2/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(33:2/5) do swap-in Thread(11:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(172),Device(0),Page(33:2/5),Diskblock(97),FileRead,Openfile(4:2/0),Thread(11:2/W1)) this Page(33:2/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 25663 offset = 63 page no = 25 Thread(3:1/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(3:1/RU) 22 Page(25:1/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(3:1/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(3:1/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(25:1/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(1/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(43:4/29)
[PageFaultHandler][do_handlePageFault] set Page(25:1/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(25:1/29) do swap-in Thread(3:1/W0)
PageTableEntry][do_lock] iorb IORB(Id(173),Device(0),Page(25:1/29),Diskblock(25),FileRead,Openfile(0:1/0),Thread(3:1/W1)) this Page(25:1/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 29795 offset = 99 page no = 29 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 22 Page(29:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(29:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(40:1/13)
[PageFaultHandler][do_handlePageFault] set Page(29:3/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(29:3/13) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(174),Device(0),Page(29:3/13),Diskblock(157),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(29:3/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(33:2/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(33:2/5) swap-in finish Thread(11:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(25:1/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(25:1/29) swap-in finish Thread(3:1/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTable][do_deallocateMemory] this Pagetable(Task(1/T))
[PageTable][do_deallocateMemory]  page_table_entry Page(5:1/16) frame_table_entry Frame(16)
[PageTable][do_deallocateMemory]  page_table_entry Page(9:1/17) frame_table_entry Frame(17)
[PageTable][do_deallocateMemory]  page_table_entry Page(12:1/8) frame_table_entry Frame(8)
[PageTable][do_deallocateMemory]  page_table_entry Page(13:1/18) frame_table_entry Frame(18)
[PageTable][do_deallocateMemory]  page_table_entry Page(15:1/15) frame_table_entry Frame(15)
[PageTable][do_deallocateMemory]  page_table_entry Page(18:1/9) frame_table_entry Frame(9)
[PageTable][do_deallocateMemory]  page_table_entry Page(19:1/12) frame_table_entry Frame(12)
[PageTable][do_deallocateMemory]  page_table_entry Page(25:1/29) frame_table_entry Frame(29)
[PageTable][do_deallocateMemory]  page_table_entry Page(26:1/4) frame_table_entry Frame(4)
[PageTable][do_deallocateMemory]  page_table_entry Page(30:1/11) frame_table_entry Frame(11)
[PageTable][do_deallocateMemory]  page_table_entry Page(32:1/7) frame_table_entry Frame(7)
[PageTable][do_deallocateMemory]  page_table_entry Page(36:1/25) frame_table_entry Frame(25)
[PageTable][do_deallocateMemory]  page_table_entry Page(37:1/21) frame_table_entry Frame(21)
[PageTable][do_deallocateMemory]  page_table_entry Page(41:1/27) frame_table_entry Frame(27)
[PageTable][do_deallocateMemory]  page_table_entry Page(42:1/26) frame_table_entry Frame(26)
[PageTable][do_deallocateMemory]  page_table_entry Page(43:1/3) frame_table_entry Frame(3)
[PageTable][do_deallocateMemory]  page_table_entry Page(48:1/20) frame_table_entry Frame(20)
[PageTable][do_deallocateMemory]  page_table_entry Page(49:1/6) frame_table_entry Frame(6)
[PageTable][do_deallocateMemory]  page_table_entry Page(51:1/0) frame_table_entry Frame(0)
[PageTable][do_deallocateMemory]  page_table_entry Page(56:1/2) frame_table_entry Frame(2)
[PageTable][do_deallocateMemory]  page_table_entry Page(59:1/24) frame_table_entry Frame(24)
Simulation progress: 24040/250000[PageTableEntry][do_unlock] this Page(29:3/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(29:3/13) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(5:1/16)
[MMU][do_refer] address = 16742 offset = 358 page no = 16 Thread(23:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(23:4/RU) 22 Page(16:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(23:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(23:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(16:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(33:2/5)
[PageFaultHandler][do_handlePageFault] set Page(16:4/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(16:4/5) do swap-in Thread(23:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(175),Device(0),Page(16:4/5),Diskblock(208),FileRead,Openfile(12:4/0),Thread(23:4/W1)) this Page(16:4/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 1224 offset = 200 page no = 1 Thread(19:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(19:4/RU) 21 Page(1:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(19:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(19:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(1:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] set Page(1:4/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(1:4/9) do swap-in Thread(19:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(176),Device(0),Page(1:4/9),Diskblock(193),FileRead,Openfile(12:4/0),Thread(19:4/W1)) this Page(1:4/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 33147 offset = 379 page no = 32 Thread(11:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(11:2/RU) 22 Page(32:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(11:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(11:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(32:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] set Page(32:2/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(32:2/15) do swap-in Thread(11:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(177),Device(0),Page(32:2/15),Diskblock(96),FileRead,Openfile(4:2/0),Thread(11:2/W1)) this Page(32:2/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:4/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(16:4/5) swap-in finish Thread(23:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 54759 offset = 487 page no = 53 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 22 Page(53:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(53:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] set Page(53:3/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(53:3/11) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(178),Device(0),Page(53:3/11),Diskblock(181),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(53:3/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:4/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(1:4/9) swap-in finish Thread(19:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 25007 offset = 431 page no = 24 Thread(17:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(17:4/RU) 22 Page(24:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(17:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(17:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(24:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(1:4/9)
[PageFaultHandler][do_handlePageFault] set Page(24:4/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(24:4/9) do swap-in Thread(17:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(179),Device(0),Page(24:4/9),Diskblock(216),FileRead,Openfile(12:4/0),Thread(17:4/W1)) this Page(24:4/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(32:2/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(32:2/15) swap-in finish Thread(11:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 39612 offset = 700 page no = 38 Thread(24:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(24:4/RU) 22 Page(38:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(24:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(24:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(38:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(6:3/23)
[PageFaultHandler][do_handlePageFault] set Page(38:4/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(38:4/23) do swap-in Thread(24:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(180),Device(0),Page(38:4/23),Diskblock(230),FileRead,Openfile(12:4/0),Thread(24:4/W1)) this Page(38:4/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 52866 offset = 642 page no = 51 Thread(25:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(25:4/RU) 21 Page(51:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(25:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(25:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(51:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] set Page(51:4/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(51:4/18) do swap-in Thread(25:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(181),Device(0),Page(51:4/18),Diskblock(243),FileRead,Openfile(12:4/0),Thread(25:4/W1)) this Page(51:4/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(53:3/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(53:3/11) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 25003/250000[PageTableEntry][do_unlock] this Page(24:4/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(24:4/9) swap-in finish Thread(17:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(38:4/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(38:4/23) swap-in finish Thread(24:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 31278 offset = 558 page no = 30 Thread(11:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(11:2/RU) 22 Page(30:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(11:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(11:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(30:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(53:3/11)
[PageFaultHandler][do_handlePageFault] Frame(11) is dirty, do swap-out Thread(11:2/W0)
[PageFaultHandler][SwapOut] page Page(53:3/11) frame Frame(11)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 53
PageTableEntry][do_lock] iorb IORB(Id(182),Device(0),Page(53:3/11),Diskblock(117),FileWrite,Openfile(4:2/0),Thread(11:2/W1)) this Page(53:3/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 37910 offset = 22 page no = 37 Thread(17:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(17:4/RU) 22 Page(37:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(17:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(17:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(37:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(13:2/22)
[PageFaultHandler][do_handlePageFault] set Page(37:4/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(37:4/22) do swap-in Thread(17:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(183),Device(0),Page(37:4/22),Diskblock(229),FileRead,Openfile(12:4/0),Thread(17:4/W1)) this Page(37:4/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(51:4/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(51:4/18) swap-in finish Thread(25:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(53:3/11)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(11) Page(53:3/11) Thread(11:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(30:2/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(30:2/11) do swap-in Thread(11:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(184),Device(0),Page(30:2/11),Diskblock(94),FileRead,Openfile(4:2/0),Thread(11:2/W1)) this Page(30:2/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(37:4/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(37:4/22) swap-in finish Thread(17:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(30:2/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(30:2/11) swap-in finish Thread(11:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 40598 offset = 662 page no = 39 Thread(25:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(25:4/RU) 22 Page(39:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(25:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(25:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(39:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(51:4/18)
[PageFaultHandler][do_handlePageFault] set Page(39:4/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(39:4/18) do swap-in Thread(25:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(185),Device(0),Page(39:4/18),Diskblock(231),FileRead,Openfile(12:4/0),Thread(25:4/W1)) this Page(39:4/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 26040/250000[PageTableEntry][do_unlock] this Page(39:4/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(39:4/18) swap-in finish Thread(25:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 28152 offset = 504 page no = 27 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 21 Page(27:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(27:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(49:4/19)
[PageFaultHandler][do_handlePageFault] set Page(27:2/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(27:2/19) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(186),Device(0),Page(27:2/19),Diskblock(91),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(27:2/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(27:2/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(27:2/19) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 58634 offset = 266 page no = 57 Thread(29:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(29:4/RU) 21 Page(57:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(29:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(29:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(57:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] set Page(57:4/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(57:4/24) do swap-in Thread(29:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(187),Device(0),Page(57:4/24),Diskblock(249),FileRead,Openfile(12:4/0),Thread(29:4/W1)) this Page(57:4/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 41360 offset = 400 page no = 40 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 21 Page(40:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(40:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] set Page(40:3/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(40:3/27) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(188),Device(0),Page(40:3/27),Diskblock(168),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(40:3/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 19652 offset = 196 page no = 19 Thread(25:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(25:4/RU) 22 Page(19:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(25:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(25:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(19:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(0:4/28)
[PageFaultHandler][do_handlePageFault] Frame(28) is dirty, do swap-out Thread(25:4/W0)
[PageFaultHandler][SwapOut] page Page(0:4/28) frame Frame(28)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 0
PageTableEntry][do_lock] iorb IORB(Id(189),Device(0),Page(0:4/28),Diskblock(192),FileWrite,Openfile(12:4/0),Thread(25:4/W1)) this Page(0:4/28)
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(57:4/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(57:4/24) swap-in finish Thread(29:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 54478 offset = 206 page no = 53 Thread(30:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(30:4/RU) 22 Page(53:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(30:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(30:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(53:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] set Page(53:4/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(53:4/0) do swap-in Thread(30:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(190),Device(0),Page(53:4/0),Diskblock(245),FileRead,Openfile(12:4/0),Thread(30:4/W1)) this Page(53:4/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(40:3/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(40:3/27) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(0:4/28)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(28) Page(0:4/28) Thread(25:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(19:4/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(19:4/28) do swap-in Thread(25:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(191),Device(0),Page(19:4/28),Diskblock(211),FileRead,Openfile(12:4/0),Thread(25:4/W1)) this Page(19:4/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 59995 offset = 603 page no = 58 Thread(26:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(26:2/RU) 21 Page(58:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(26:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(26:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(58:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(40:3/27)
[PageFaultHandler][do_handlePageFault] set Page(58:2/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(58:2/27) do swap-in Thread(26:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(192),Device(0),Page(58:2/27),Diskblock(122),FileRead,Openfile(4:2/0),Thread(26:2/W1)) this Page(58:2/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 27020/250000[MMU][do_refer] address = 29062 offset = 390 page no = 28 Thread(31:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(31:4/RU) 22 Page(28:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(31:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(31:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(28:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] set Page(28:4/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(28:4/25) do swap-in Thread(31:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(193),Device(0),Page(28:4/25),Diskblock(220),FileRead,Openfile(12:4/0),Thread(31:4/W1)) this Page(28:4/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(53:4/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(53:4/0) swap-in finish Thread(30:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(19:4/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(19:4/28) swap-in finish Thread(25:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 383 offset = 383 page no = 0 Thread(24:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(24:4/RU) 22 Page(0:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(24:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(24:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(0:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(53:4/0)
[PageFaultHandler][do_handlePageFault] Frame(0) is dirty, do swap-out Thread(24:4/W0)
[PageFaultHandler][SwapOut] page Page(53:4/0) frame Frame(0)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 53
PageTableEntry][do_lock] iorb IORB(Id(194),Device(0),Page(53:4/0),Diskblock(245),FileWrite,Openfile(12:4/0),Thread(24:4/W1)) this Page(53:4/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(58:2/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(58:2/27) swap-in finish Thread(26:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 23061 offset = 533 page no = 22 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 21 Page(22:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(22:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] set Page(22:2/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(22:2/3) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(195),Device(0),Page(22:2/3),Diskblock(86),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(22:2/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 54689 offset = 417 page no = 53 Thread(11:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(11:2/RU) 21 Page(53:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(11:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(11:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(53:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] set Page(53:2/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(53:2/8) do swap-in Thread(11:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(196),Device(0),Page(53:2/8),Diskblock(117),FileRead,Openfile(4:2/0),Thread(11:2/W1)) this Page(53:2/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 7737 offset = 569 page no = 7 Thread(30:4/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(28:4/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(28:4/25) swap-in finish Thread(31:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 11931 offset = 667 page no = 11 Thread(19:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(19:4/RU) 22 Page(11:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(19:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(19:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(11:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] set Page(11:4/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(11:4/21) do swap-in Thread(19:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(197),Device(0),Page(11:4/21),Diskblock(203),FileRead,Openfile(12:4/0),Thread(19:4/W1)) this Page(11:4/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 29406 offset = 734 page no = 28 Thread(29:4/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(53:4/0)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(0) Page(53:4/0) Thread(24:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(0:4/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(0:4/0) do swap-in Thread(24:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(198),Device(0),Page(0:4/0),Diskblock(192),FileRead,Openfile(12:4/0),Thread(24:4/W1)) this Page(0:4/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 8494 offset = 302 page no = 8 Thread(28:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(28:4/RU) 21 Page(8:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(28:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(28:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(8:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(29:4/1)
[PageFaultHandler][do_handlePageFault] set Page(8:4/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(8:4/1) do swap-in Thread(28:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(199),Device(0),Page(8:4/1),Diskblock(200),FileRead,Openfile(12:4/0),Thread(28:4/W1)) this Page(8:4/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(22:2/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(22:2/3) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 13453 offset = 141 page no = 13 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 21 Page(13:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(13:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] set Page(13:3/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(13:3/6) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(200),Device(0),Page(13:3/6),Diskblock(141),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(13:3/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(53:2/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(53:2/8) swap-in finish Thread(11:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 28068/250000[MMU][do_refer] address = 61064 offset = 648 page no = 59 Thread(31:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(31:4/RU) 21 Page(59:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(31:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(31:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(59:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] set Page(59:4/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(59:4/16) do swap-in Thread(31:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(201),Device(0),Page(59:4/16),Diskblock(251),FileRead,Openfile(12:4/0),Thread(31:4/W1)) this Page(59:4/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(11:4/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(11:4/21) swap-in finish Thread(19:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(0:4/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(0:4/0) swap-in finish Thread(24:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(8:4/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(8:4/1) swap-in finish Thread(28:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(13:3/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(13:3/6) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 31127 offset = 407 page no = 30 Thread(17:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(17:4/RU) 22 Page(30:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(17:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(17:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(30:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(0:4/0)
[PageFaultHandler][do_handlePageFault] Frame(0) is dirty, do swap-out Thread(17:4/W0)
[PageFaultHandler][SwapOut] page Page(0:4/0) frame Frame(0)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 0
PageTableEntry][do_lock] iorb IORB(Id(202),Device(0),Page(0:4/0),Diskblock(192),FileWrite,Openfile(12:4/0),Thread(17:4/W1)) this Page(0:4/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(59:4/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(59:4/16) swap-in finish Thread(31:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(0:4/0)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(0) Page(0:4/0) Thread(17:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(30:4/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(30:4/0) do swap-in Thread(17:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(203),Device(0),Page(30:4/0),Diskblock(222),FileRead,Openfile(12:4/0),Thread(17:4/W1)) this Page(30:4/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 29036/250000PageTableEntry][do_lock] iorb IORB(Id(204),Device(1),Page(2:4/14),Diskblock(5),FileRead,Openfile(26:4/1),Thread(24:4/W0)) this Page(2:4/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(2:4/14)
[PageTableEntry][do_unlock] this Page(30:4/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(30:4/0) swap-in finish Thread(17:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 11526 offset = 262 page no = 11 Thread(28:4/RU)
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(205),Device(1),Page(2:4/14),Diskblock(9),FileWrite,Openfile(26:4/1),Thread(28:4/W0)) this Page(2:4/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 62088 offset = 648 page no = 60 Thread(26:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(26:2/RU) 22 Page(60:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(26:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(26:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(60:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(59:4/16)
[PageFaultHandler][do_handlePageFault] set Page(60:2/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(60:2/16) do swap-in Thread(26:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(206),Device(0),Page(60:2/16),Diskblock(124),FileRead,Openfile(4:2/0),Thread(26:2/W1)) this Page(60:2/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(2:4/14)
[PageTableEntry][do_unlock] this Page(60:2/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(60:2/16) swap-in finish Thread(26:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 3191 offset = 119 page no = 3 Thread(19:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(19:4/RU) 21 Page(3:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(19:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(19:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(3:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] set Page(3:4/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(3:4/4) do swap-in Thread(19:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(207),Device(0),Page(3:4/4),Diskblock(195),FileRead,Openfile(12:4/0),Thread(19:4/W1)) this Page(3:4/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 7600 offset = 432 page no = 7 Thread(30:4/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 58424 offset = 56 page no = 57 Thread(24:4/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(3:4/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(3:4/4) swap-in finish Thread(19:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 7577 offset = 409 page no = 7 Thread(25:4/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 37432 offset = 568 page no = 36 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 21 Page(36:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(36:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] set Page(36:2/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(36:2/29) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(208),Device(0),Page(36:2/29),Diskblock(100),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(36:2/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(36:2/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(36:2/29) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 44408 offset = 376 page no = 43 Thread(23:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(23:4/RU) 21 Page(43:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(23:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(23:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(43:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(29:3/13)
[PageFaultHandler][do_handlePageFault] Frame(13) is dirty, do swap-out Thread(23:4/W0)
[PageFaultHandler][SwapOut] page Page(29:3/13) frame Frame(13)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 29
PageTableEntry][do_lock] iorb IORB(Id(209),Device(0),Page(29:3/13),Diskblock(221),FileWrite,Openfile(12:4/0),Thread(23:4/W1)) this Page(29:3/13)
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 50629 offset = 453 page no = 49 Thread(28:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(28:4/RU) 21 Page(49:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(28:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(28:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(49:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(2:4/14)
[PageFaultHandler][do_handlePageFault] Frame(14) is dirty, do swap-out Thread(28:4/W0)
[PageFaultHandler][SwapOut] page Page(2:4/14) frame Frame(14)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 2
PageTableEntry][do_lock] iorb IORB(Id(210),Device(0),Page(2:4/14),Diskblock(194),FileWrite,Openfile(12:4/0),Thread(28:4/W1)) this Page(2:4/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(29:3/13)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(13) Page(29:3/13) Thread(23:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(43:4/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(43:4/13) do swap-in Thread(23:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(211),Device(0),Page(43:4/13),Diskblock(235),FileRead,Openfile(12:4/0),Thread(23:4/W1)) this Page(43:4/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 30069/250000[PageTableEntry][do_unlock] this Page(2:4/14)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(14) Page(2:4/14) Thread(28:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(49:4/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(49:4/14) do swap-in Thread(28:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(212),Device(0),Page(49:4/14),Diskblock(241),FileRead,Openfile(12:4/0),Thread(28:4/W1)) this Page(49:4/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(43:4/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(43:4/13) swap-in finish Thread(23:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 27055 offset = 431 page no = 26 Thread(24:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(24:4/RU) 22 Page(26:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(24:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(24:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(26:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(16:4/5)
[PageFaultHandler][do_handlePageFault] Frame(5) is dirty, do swap-out Thread(24:4/W0)
[PageFaultHandler][SwapOut] page Page(16:4/5) frame Frame(5)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 16
PageTableEntry][do_lock] iorb IORB(Id(213),Device(0),Page(16:4/5),Diskblock(208),FileWrite,Openfile(12:4/0),Thread(24:4/W1)) this Page(16:4/5)
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 13951 offset = 639 page no = 13 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 22 Page(13:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(13:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(32:2/15)
[PageFaultHandler][do_handlePageFault] Frame(15) is dirty, do swap-out Thread(27:2/W0)
[PageFaultHandler][SwapOut] page Page(32:2/15) frame Frame(15)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 32
PageTableEntry][do_lock] iorb IORB(Id(214),Device(0),Page(32:2/15),Diskblock(96),FileWrite,Openfile(4:2/0),Thread(27:2/W1)) this Page(32:2/15)
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 56944 offset = 624 page no = 55 Thread(17:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(17:4/RU) 22 Page(55:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(17:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(17:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(55:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] set Page(55:4/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(55:4/20) do swap-in Thread(17:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(215),Device(0),Page(55:4/20),Diskblock(247),FileRead,Openfile(12:4/0),Thread(17:4/W1)) this Page(55:4/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(49:4/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(49:4/14) swap-in finish Thread(28:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 64465 offset = 977 page no = 62 Thread(26:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(26:2/RU) 22 Page(62:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(26:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(26:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(62:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(49:4/14)
[PageFaultHandler][do_handlePageFault] set Page(62:2/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(62:2/14) do swap-in Thread(26:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(216),Device(0),Page(62:2/14),Diskblock(126),FileRead,Openfile(4:2/0),Thread(26:2/W1)) this Page(62:2/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 22391 offset = 887 page no = 21 Thread(11:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(11:2/RU) 22 Page(21:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(11:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(11:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(21:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(38:4/23)
[PageFaultHandler][do_handlePageFault] Frame(23) is dirty, do swap-out Thread(11:2/W0)
[PageFaultHandler][SwapOut] page Page(38:4/23) frame Frame(23)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 38
PageTableEntry][do_lock] iorb IORB(Id(217),Device(0),Page(38:4/23),Diskblock(102),FileWrite,Openfile(4:2/0),Thread(11:2/W1)) this Page(38:4/23)
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:4/5)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(5) Page(16:4/5) Thread(24:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(26:4/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(26:4/5) do swap-in Thread(24:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(218),Device(0),Page(26:4/5),Diskblock(218),FileRead,Openfile(12:4/0),Thread(24:4/W1)) this Page(26:4/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(32:2/15)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(15) Page(32:2/15) Thread(27:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(13:2/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(13:2/15) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(219),Device(0),Page(13:2/15),Diskblock(77),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(13:2/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 36196 offset = 356 page no = 35 Thread(28:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(28:4/RU) 21 Page(35:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(28:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(28:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(35:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(24:4/9)
[PageFaultHandler][do_handlePageFault] Frame(9) is dirty, do swap-out Thread(28:4/W0)
[PageFaultHandler][SwapOut] page Page(24:4/9) frame Frame(9)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 24
PageTableEntry][do_lock] iorb IORB(Id(220),Device(0),Page(24:4/9),Diskblock(216),FileWrite,Openfile(12:4/0),Thread(28:4/W1)) this Page(24:4/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 65527 offset = 1015 page no = 63 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 22 Page(63:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(63:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] set Page(63:3/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(63:3/12) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(221),Device(0),Page(63:3/12),Diskblock(191),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(63:3/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(222),Device(2),Page(3:4/4),Diskblock(9),FileRead,Openfile(28:4/2),Thread(23:4/W0)) this Page(3:4/4)
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(55:4/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(55:4/20) swap-in finish Thread(17:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(62:2/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(62:2/14) swap-in finish Thread(26:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 31031/250000[PageTableEntry][do_unlock] this Page(38:4/23)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(23) Page(38:4/23) Thread(11:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(21:2/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(21:2/23) do swap-in Thread(11:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(223),Device(0),Page(21:2/23),Diskblock(85),FileRead,Openfile(4:2/0),Thread(11:2/W1)) this Page(21:2/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 36799 offset = 959 page no = 35 Thread(26:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(26:2/RU) 21 Page(35:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(26:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(26:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(35:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(55:4/20)
[PageFaultHandler][do_handlePageFault] Frame(20) is dirty, do swap-out Thread(26:2/W0)
[PageFaultHandler][SwapOut] page Page(55:4/20) frame Frame(20)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 55
PageTableEntry][do_lock] iorb IORB(Id(224),Device(0),Page(55:4/20),Diskblock(119),FileWrite,Openfile(4:2/0),Thread(26:2/W1)) this Page(55:4/20)
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(3:4/4)
[PageTableEntry][do_unlock] this Page(26:4/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(26:4/5) swap-in finish Thread(24:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 16576 offset = 192 page no = 16 Thread(19:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(19:4/RU) 22 Page(16:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(19:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(19:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(16:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] set Page(16:4/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(16:4/17) do swap-in Thread(19:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(225),Device(0),Page(16:4/17),Diskblock(208),FileRead,Openfile(12:4/0),Thread(19:4/W1)) this Page(16:4/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(13:2/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(13:2/15) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 23643 offset = 91 page no = 23 Thread(24:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(24:4/RU) 21 Page(23:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(24:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(24:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(23:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(13:2/15)
[PageFaultHandler][do_handlePageFault] Frame(15) is dirty, do swap-out Thread(24:4/W0)
[PageFaultHandler][SwapOut] page Page(13:2/15) frame Frame(15)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 13
PageTableEntry][do_lock] iorb IORB(Id(226),Device(0),Page(13:2/15),Diskblock(205),FileWrite,Openfile(12:4/0),Thread(24:4/W1)) this Page(13:2/15)
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 23000 offset = 472 page no = 22 Thread(23:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(23:4/RU) 21 Page(22:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(23:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(23:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(22:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(37:4/22)
[PageFaultHandler][do_handlePageFault] Frame(22) is dirty, do swap-out Thread(23:4/W0)
[PageFaultHandler][SwapOut] page Page(37:4/22) frame Frame(22)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 37
PageTableEntry][do_lock] iorb IORB(Id(227),Device(0),Page(37:4/22),Diskblock(229),FileWrite,Openfile(12:4/0),Thread(23:4/W1)) this Page(37:4/22)
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 16691 offset = 307 page no = 16 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 21 Page(16:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(16:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(30:2/11)
[PageFaultHandler][do_handlePageFault] Frame(11) is dirty, do swap-out Thread(27:2/W0)
[PageFaultHandler][SwapOut] page Page(30:2/11) frame Frame(11)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 30
PageTableEntry][do_lock] iorb IORB(Id(228),Device(0),Page(30:2/11),Diskblock(94),FileWrite,Openfile(4:2/0),Thread(27:2/W1)) this Page(30:2/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 23277 offset = 749 page no = 22 Thread(17:4/RU)
[PageTableEntry][do_unlock] this Page(24:4/9)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(9) Page(24:4/9) Thread(28:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(35:4/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(35:4/9) do swap-in Thread(28:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(229),Device(0),Page(35:4/9),Diskblock(227),FileRead,Openfile(12:4/0),Thread(28:4/W1)) this Page(35:4/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(63:3/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(63:3/12) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(21:2/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(21:2/23) swap-in finish Thread(11:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 60623 offset = 207 page no = 59 Thread(11:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(11:2/RU) 22 Page(59:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(11:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(11:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(59:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(27:2/19)
[PageFaultHandler][do_handlePageFault] set Page(59:2/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(59:2/19) do swap-in Thread(11:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(230),Device(0),Page(59:2/19),Diskblock(123),FileRead,Openfile(4:2/0),Thread(11:2/W1)) this Page(59:2/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(55:4/20)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(20) Page(55:4/20) Thread(26:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(35:2/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(35:2/20) do swap-in Thread(26:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(231),Device(0),Page(35:2/20),Diskblock(99),FileRead,Openfile(4:2/0),Thread(26:2/W1)) this Page(35:2/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 32021/250000[PageTableEntry][do_unlock] this Page(16:4/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(16:4/17) swap-in finish Thread(19:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(13:2/15)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(15) Page(13:2/15) Thread(24:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(23:4/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(23:4/15) do swap-in Thread(24:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(232),Device(0),Page(23:4/15),Diskblock(215),FileRead,Openfile(12:4/0),Thread(24:4/W1)) this Page(23:4/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 1790 offset = 766 page no = 1 Thread(19:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(19:4/RU) 21 Page(1:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(19:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(19:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(1:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(16:4/17)
[PageFaultHandler][do_handlePageFault] Frame(17) is dirty, do swap-out Thread(19:4/W0)
[PageFaultHandler][SwapOut] page Page(16:4/17) frame Frame(17)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 16
PageTableEntry][do_lock] iorb IORB(Id(233),Device(0),Page(16:4/17),Diskblock(208),FileWrite,Openfile(12:4/0),Thread(19:4/W1)) this Page(16:4/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(37:4/22)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(22) Page(37:4/22) Thread(23:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(22:4/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(22:4/22) do swap-in Thread(23:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(234),Device(0),Page(22:4/22),Diskblock(214),FileRead,Openfile(12:4/0),Thread(23:4/W1)) this Page(22:4/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(30:2/11)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(11) Page(30:2/11) Thread(27:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(16:2/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(16:2/11) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(235),Device(0),Page(16:2/11),Diskblock(80),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(16:2/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(35:4/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(35:4/9) swap-in finish Thread(28:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(59:2/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(59:2/19) swap-in finish Thread(11:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 3860 offset = 788 page no = 3 Thread(11:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(11:2/RU) 22 Page(3:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(11:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(11:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(3:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(35:4/9)
[PageFaultHandler][do_handlePageFault] set Page(3:2/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(3:2/9) do swap-in Thread(11:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(236),Device(0),Page(3:2/9),Diskblock(67),FileRead,Openfile(4:2/0),Thread(11:2/W1)) this Page(3:2/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 18057 offset = 649 page no = 17 Thread(28:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(28:4/RU) 22 Page(17:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(28:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(28:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(17:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(59:2/19)
[PageFaultHandler][do_handlePageFault] Frame(19) is dirty, do swap-out Thread(28:4/W0)
[PageFaultHandler][SwapOut] page Page(59:2/19) frame Frame(19)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 59
PageTableEntry][do_lock] iorb IORB(Id(237),Device(0),Page(59:2/19),Diskblock(251),FileWrite,Openfile(12:4/0),Thread(28:4/W1)) this Page(59:2/19)
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(35:2/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(35:2/20) swap-in finish Thread(26:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 42494 offset = 510 page no = 41 Thread(26:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(26:2/RU) 22 Page(41:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(26:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(26:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(41:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(28:4/25)
[PageFaultHandler][do_handlePageFault] Frame(25) is dirty, do swap-out Thread(26:2/W0)
[PageFaultHandler][SwapOut] page Page(28:4/25) frame Frame(25)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 28
PageTableEntry][do_lock] iorb IORB(Id(238),Device(0),Page(28:4/25),Diskblock(92),FileWrite,Openfile(4:2/0),Thread(26:2/W1)) this Page(28:4/25)
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 33040/250000[PageTableEntry][do_unlock] this Page(23:4/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(23:4/15) swap-in finish Thread(24:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(16:4/17)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(17) Page(16:4/17) Thread(19:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(1:4/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(1:4/17) do swap-in Thread(19:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(239),Device(0),Page(1:4/17),Diskblock(193),FileRead,Openfile(12:4/0),Thread(19:4/W1)) this Page(1:4/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(22:4/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(22:4/22) swap-in finish Thread(23:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 2591 offset = 543 page no = 2 Thread(17:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(17:4/RU) 21 Page(2:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(17:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(17:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(2:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(58:2/27)
[PageFaultHandler][do_handlePageFault] set Page(2:4/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(2:4/27) do swap-in Thread(17:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(240),Device(0),Page(2:4/27),Diskblock(194),FileRead,Openfile(12:4/0),Thread(17:4/W1)) this Page(2:4/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:2/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(16:2/11) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 23126 offset = 598 page no = 22 Thread(24:4/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 6305 offset = 161 page no = 6 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 21 Page(6:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(6:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(22:2/3)
[PageFaultHandler][do_handlePageFault] set Page(6:2/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(6:2/3) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(241),Device(0),Page(6:2/3),Diskblock(70),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(6:2/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(3:2/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(3:2/9) swap-in finish Thread(11:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(59:2/19)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(19) Page(59:2/19) Thread(28:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(17:4/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(17:4/19) do swap-in Thread(28:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(242),Device(0),Page(17:4/19),Diskblock(209),FileRead,Openfile(12:4/0),Thread(28:4/W1)) this Page(17:4/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 40014 offset = 78 page no = 39 Thread(23:4/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(28:4/25)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(25) Page(28:4/25) Thread(26:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(41:2/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(41:2/25) do swap-in Thread(26:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(243),Device(0),Page(41:2/25),Diskblock(105),FileRead,Openfile(4:2/0),Thread(26:2/W1)) this Page(41:2/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 34020/250000[PageTableEntry][do_unlock] this Page(1:4/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(1:4/17) swap-in finish Thread(19:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(2:4/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(2:4/27) swap-in finish Thread(17:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(6:2/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(6:2/3) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 5643 offset = 523 page no = 5 Thread(24:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(24:4/RU) 22 Page(5:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(24:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(24:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(5:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(1:4/17)
[PageFaultHandler][do_handlePageFault] set Page(5:4/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(5:4/17) do swap-in Thread(24:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(244),Device(0),Page(5:4/17),Diskblock(197),FileRead,Openfile(12:4/0),Thread(24:4/W1)) this Page(5:4/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(17:4/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(17:4/19) swap-in finish Thread(28:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 32153 offset = 409 page no = 31 Thread(23:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(23:4/RU) 22 Page(31:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(23:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(23:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(31:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(6:2/3)
[PageFaultHandler][do_handlePageFault] set Page(31:4/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(31:4/3) do swap-in Thread(23:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(245),Device(0),Page(31:4/3),Diskblock(223),FileRead,Openfile(12:4/0),Thread(23:4/W1)) this Page(31:4/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(41:2/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(41:2/25) swap-in finish Thread(26:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(5:4/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(5:4/17) swap-in finish Thread(24:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 16471 offset = 87 page no = 16 Thread(11:2/RU)
[MMU][do_refer] Do memory read.
Simulation progress: 35031/250000[PageTableEntry][do_unlock] this Page(31:4/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(31:4/3) swap-in finish Thread(23:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 41021 offset = 61 page no = 40 Thread(17:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(17:4/RU) 21 Page(40:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(17:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(17:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(40:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(41:2/25)
[PageFaultHandler][do_handlePageFault] Frame(25) is dirty, do swap-out Thread(17:4/W0)
[PageFaultHandler][SwapOut] page Page(41:2/25) frame Frame(25)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 41
PageTableEntry][do_lock] iorb IORB(Id(246),Device(0),Page(41:2/25),Diskblock(233),FileWrite,Openfile(12:4/0),Thread(17:4/W1)) this Page(41:2/25)
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(41:2/25)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(25) Page(41:2/25) Thread(17:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(40:4/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(40:4/25) do swap-in Thread(17:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(247),Device(0),Page(40:4/25),Diskblock(232),FileRead,Openfile(12:4/0),Thread(17:4/W1)) this Page(40:4/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(40:4/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(40:4/25) swap-in finish Thread(17:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 30256 offset = 560 page no = 29 Thread(23:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(23:4/RU) 22 Page(29:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(23:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(23:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(29:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(31:4/3)
[PageFaultHandler][do_handlePageFault] Frame(3) is dirty, do swap-out Thread(23:4/W0)
[PageFaultHandler][SwapOut] page Page(31:4/3) frame Frame(3)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 31
PageTableEntry][do_lock] iorb IORB(Id(248),Device(0),Page(31:4/3),Diskblock(223),FileWrite,Openfile(12:4/0),Thread(23:4/W1)) this Page(31:4/3)
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 36001/250000[PageTableEntry][do_unlock] this Page(31:4/3)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(3) Page(31:4/3) Thread(23:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(29:4/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(29:4/3) do swap-in Thread(23:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(249),Device(0),Page(29:4/3),Diskblock(221),FileRead,Openfile(12:4/0),Thread(23:4/W1)) this Page(29:4/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 3608 offset = 536 page no = 3 Thread(27:2/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(29:4/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(29:4/3) swap-in finish Thread(23:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 59570 offset = 178 page no = 58 Thread(17:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(17:4/RU) 21 Page(58:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(17:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(17:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(58:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] set Page(58:4/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(58:4/26) do swap-in Thread(17:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(250),Device(0),Page(58:4/26),Diskblock(250),FileRead,Openfile(12:4/0),Thread(17:4/W1)) this Page(58:4/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 62672 offset = 208 page no = 61 Thread(24:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(24:4/RU) 22 Page(61:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(24:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(24:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(61:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(30:4/0)
[PageFaultHandler][do_handlePageFault] Frame(0) is dirty, do swap-out Thread(24:4/W0)
[PageFaultHandler][SwapOut] page Page(30:4/0) frame Frame(0)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 30
PageTableEntry][do_lock] iorb IORB(Id(251),Device(0),Page(30:4/0),Diskblock(222),FileWrite,Openfile(12:4/0),Thread(24:4/W1)) this Page(30:4/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 25750 offset = 150 page no = 25 Thread(11:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(11:2/RU) 22 Page(25:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(11:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(11:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(25:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(60:2/16)
[PageFaultHandler][do_handlePageFault] Frame(16) is dirty, do swap-out Thread(11:2/W0)
[PageFaultHandler][SwapOut] page Page(60:2/16) frame Frame(16)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 60
PageTableEntry][do_lock] iorb IORB(Id(252),Device(0),Page(60:2/16),Diskblock(124),FileWrite,Openfile(4:2/0),Thread(11:2/W1)) this Page(60:2/16)
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(58:4/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(58:4/26) swap-in finish Thread(17:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 12236 offset = 972 page no = 11 Thread(26:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(26:2/RU) 21 Page(11:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(26:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(26:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(11:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(3:4/4)
[PageFaultHandler][do_handlePageFault] Frame(4) is dirty, do swap-out Thread(26:2/W0)
[PageFaultHandler][SwapOut] page Page(3:4/4) frame Frame(4)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 3
PageTableEntry][do_lock] iorb IORB(Id(253),Device(0),Page(3:4/4),Diskblock(67),FileWrite,Openfile(4:2/0),Thread(26:2/W1)) this Page(3:4/4)
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 45522 offset = 466 page no = 44 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 22 Page(44:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(44:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(36:2/29)
[PageFaultHandler][do_handlePageFault] set Page(44:2/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(44:2/29) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(254),Device(0),Page(44:2/29),Diskblock(108),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(44:2/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(30:4/0)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(0) Page(30:4/0) Thread(24:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(61:4/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(61:4/0) do swap-in Thread(24:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(255),Device(0),Page(61:4/0),Diskblock(253),FileRead,Openfile(12:4/0),Thread(24:4/W1)) this Page(61:4/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(60:2/16)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(16) Page(60:2/16) Thread(11:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(25:2/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(25:2/16) do swap-in Thread(11:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(256),Device(0),Page(25:2/16),Diskblock(89),FileRead,Openfile(4:2/0),Thread(11:2/W1)) this Page(25:2/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(3:4/4)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(4) Page(3:4/4) Thread(26:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(11:2/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(11:2/4) do swap-in Thread(26:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(257),Device(0),Page(11:2/4),Diskblock(75),FileRead,Openfile(4:2/0),Thread(26:2/W1)) this Page(11:2/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(44:2/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(44:2/29) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 15421 offset = 61 page no = 15 Thread(28:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(28:4/RU) 21 Page(15:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(28:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(28:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(15:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(43:4/13)
[PageFaultHandler][do_handlePageFault] set Page(15:4/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(15:4/13) do swap-in Thread(28:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(258),Device(0),Page(15:4/13),Diskblock(207),FileRead,Openfile(12:4/0),Thread(28:4/W1)) this Page(15:4/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 25436 offset = 860 page no = 24 Thread(23:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(23:4/RU) 22 Page(24:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(23:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(23:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(24:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(26:4/5)
[PageFaultHandler][do_handlePageFault] Frame(5) is dirty, do swap-out Thread(23:4/W0)
[PageFaultHandler][SwapOut] page Page(26:4/5) frame Frame(5)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 26
PageTableEntry][do_lock] iorb IORB(Id(259),Device(0),Page(26:4/5),Diskblock(218),FileWrite,Openfile(12:4/0),Thread(23:4/W1)) this Page(26:4/5)
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 37002/250000[MMU][do_refer] address = 11676 offset = 412 page no = 11 Thread(19:4/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(61:4/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(61:4/0) swap-in finish Thread(24:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(25:2/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(25:2/16) swap-in finish Thread(11:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(11:2/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(11:2/4) swap-in finish Thread(26:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 38366 offset = 478 page no = 37 Thread(24:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(24:4/RU) 21 Page(37:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(24:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(24:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(37:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(61:4/0)
[PageFaultHandler][do_handlePageFault] Frame(0) is dirty, do swap-out Thread(24:4/W0)
[PageFaultHandler][SwapOut] page Page(61:4/0) frame Frame(0)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 61
PageTableEntry][do_lock] iorb IORB(Id(260),Device(0),Page(61:4/0),Diskblock(253),FileWrite,Openfile(12:4/0),Thread(24:4/W1)) this Page(61:4/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(15:4/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(15:4/13) swap-in finish Thread(28:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(26:4/5)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(5) Page(26:4/5) Thread(23:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(24:4/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(24:4/5) do swap-in Thread(23:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(261),Device(0),Page(24:4/5),Diskblock(216),FileRead,Openfile(12:4/0),Thread(23:4/W1)) this Page(24:4/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 10353 offset = 113 page no = 10 Thread(19:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(19:4/RU) 21 Page(10:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(19:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(19:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(10:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(11:2/4)
[PageFaultHandler][do_handlePageFault] set Page(10:4/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(10:4/4) do swap-in Thread(19:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(262),Device(0),Page(10:4/4),Diskblock(202),FileRead,Openfile(12:4/0),Thread(19:4/W1)) this Page(10:4/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 43796 offset = 788 page no = 42 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 22 Page(42:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(42:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(21:2/23)
[PageFaultHandler][do_handlePageFault] Frame(23) is dirty, do swap-out Thread(27:2/W0)
[PageFaultHandler][SwapOut] page Page(21:2/23) frame Frame(23)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 21
PageTableEntry][do_lock] iorb IORB(Id(263),Device(0),Page(21:2/23),Diskblock(85),FileWrite,Openfile(4:2/0),Thread(27:2/W1)) this Page(21:2/23)
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 5782 offset = 662 page no = 5 Thread(11:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(11:2/RU) 22 Page(5:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(11:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(11:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(5:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(35:2/20)
[PageFaultHandler][do_handlePageFault] set Page(5:2/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(5:2/20) do swap-in Thread(11:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(264),Device(0),Page(5:2/20),Diskblock(69),FileRead,Openfile(4:2/0),Thread(11:2/W1)) this Page(5:2/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(61:4/0)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(0) Page(61:4/0) Thread(24:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(37:4/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(37:4/0) do swap-in Thread(24:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(265),Device(0),Page(37:4/0),Diskblock(229),FileRead,Openfile(12:4/0),Thread(24:4/W1)) this Page(37:4/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 38045/250000[PageTableEntry][do_unlock] this Page(24:4/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(24:4/5) swap-in finish Thread(23:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 23647 offset = 95 page no = 23 Thread(32:5/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(32:5/RU) 21 Page(23:5/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(32:5/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(32:5/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(23:5/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(5/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(39:4/18)
[PageFaultHandler][do_handlePageFault] Frame(18) is dirty, do swap-out Thread(32:5/W0)
[PageFaultHandler][SwapOut] page Page(39:4/18) frame Frame(18)file Openfile(30:5/0)
[PageFaultHandler][SwapOut] block no 39
PageTableEntry][do_lock] iorb IORB(Id(266),Device(0),Page(39:4/18),Diskblock(39),FileWrite,Openfile(30:5/0),Thread(32:5/W1)) this Page(39:4/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 26377 offset = 777 page no = 25 Thread(26:2/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 41246 offset = 286 page no = 40 Thread(26:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(26:2/RU) 21 Page(40:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(26:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(26:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(40:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(22:4/22)
[PageFaultHandler][do_handlePageFault] Frame(22) is dirty, do swap-out Thread(26:2/W0)
[PageFaultHandler][SwapOut] page Page(22:4/22) frame Frame(22)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 22
PageTableEntry][do_lock] iorb IORB(Id(267),Device(0),Page(22:4/22),Diskblock(86),FileWrite,Openfile(4:2/0),Thread(26:2/W1)) this Page(22:4/22)
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(10:4/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(10:4/4) swap-in finish Thread(19:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(21:2/23)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(23) Page(21:2/23) Thread(27:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(42:2/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(42:2/23) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(268),Device(0),Page(42:2/23),Diskblock(106),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(42:2/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(269),Device(1),Page(2:4/27),Diskblock(7),FileWrite,Openfile(32:4/1),Thread(23:4/W0)) this Page(2:4/27)
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(5:2/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(5:2/20) swap-in finish Thread(11:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(2:4/27)
[PageTableEntry][do_unlock] this Page(37:4/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(37:4/0) swap-in finish Thread(24:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(39:4/18)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(18) Page(39:4/18) Thread(32:5/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(23:5/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(23:5/18) do swap-in Thread(32:5/W0)
PageTableEntry][do_lock] iorb IORB(Id(270),Device(0),Page(23:5/18),Diskblock(23),FileRead,Openfile(30:5/0),Thread(32:5/W1)) this Page(23:5/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(271),Device(1),Page(3:2/9),Diskblock(10),FileRead,Openfile(34:2/1),Thread(11:2/W0)) this Page(3:2/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(22:4/22)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(22) Page(22:4/22) Thread(26:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(40:2/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(40:2/22) do swap-in Thread(26:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(272),Device(0),Page(40:2/22),Diskblock(104),FileRead,Openfile(4:2/0),Thread(26:2/W1)) this Page(40:2/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(3:2/9)
[MMU][do_refer] address = 42154 offset = 170 page no = 41 Thread(11:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(11:2/RU) 22 Page(41:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(11:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(11:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(41:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(5:2/20)
[PageFaultHandler][do_handlePageFault] Frame(20) is dirty, do swap-out Thread(11:2/W0)
[PageFaultHandler][SwapOut] page Page(5:2/20) frame Frame(20)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 5
PageTableEntry][do_lock] iorb IORB(Id(273),Device(0),Page(5:2/20),Diskblock(69),FileWrite,Openfile(4:2/0),Thread(11:2/W1)) this Page(5:2/20)
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(274),Device(1),Page(2:4/27),Diskblock(11),FileWrite,Openfile(34:2/1),Thread(24:4/W0)) this Page(2:4/27)
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(42:2/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(42:2/23) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(2:4/27)
[PageTableEntry][do_unlock] this Page(23:5/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(23:5/18) swap-in finish Thread(32:5/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 39060/250000[PageTableEntry][do_unlock] this Page(40:2/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(40:2/22) swap-in finish Thread(26:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(5:2/20)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(20) Page(5:2/20) Thread(11:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(41:2/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(41:2/20) do swap-in Thread(11:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(275),Device(0),Page(41:2/20),Diskblock(105),FileRead,Openfile(4:2/0),Thread(11:2/W1)) this Page(41:2/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(41:2/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(41:2/20) swap-in finish Thread(11:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 38352 offset = 464 page no = 37 Thread(24:4/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 39976 offset = 40 page no = 39 Thread(24:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(24:4/RU) 21 Page(39:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(24:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(24:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(39:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(42:2/23)
[PageFaultHandler][do_handlePageFault] Frame(23) is dirty, do swap-out Thread(24:4/W0)
[PageFaultHandler][SwapOut] page Page(42:2/23) frame Frame(23)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 42
PageTableEntry][do_lock] iorb IORB(Id(276),Device(0),Page(42:2/23),Diskblock(234),FileWrite,Openfile(12:4/0),Thread(24:4/W1)) this Page(42:2/23)
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 52513 offset = 289 page no = 51 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 21 Page(51:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(51:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(16:2/11)
[PageFaultHandler][do_handlePageFault] set Page(51:2/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(51:2/11) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(277),Device(0),Page(51:2/11),Diskblock(115),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(51:2/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(42:2/23)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(23) Page(42:2/23) Thread(24:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(39:4/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(39:4/23) do swap-in Thread(24:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(278),Device(0),Page(39:4/23),Diskblock(231),FileRead,Openfile(12:4/0),Thread(24:4/W1)) this Page(39:4/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 52371 offset = 147 page no = 51 Thread(32:5/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(32:5/RU) 21 Page(51:5/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(32:5/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(32:5/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(51:5/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(5/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(57:4/24)
[PageFaultHandler][do_handlePageFault] Frame(24) is dirty, do swap-out Thread(32:5/W0)
[PageFaultHandler][SwapOut] page Page(57:4/24) frame Frame(24)file Openfile(30:5/0)
[PageFaultHandler][SwapOut] block no 57
PageTableEntry][do_lock] iorb IORB(Id(279),Device(0),Page(57:4/24),Diskblock(57),FileWrite,Openfile(30:5/0),Thread(32:5/W1)) this Page(57:4/24)
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(51:2/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(51:2/11) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 57368 offset = 24 page no = 56 Thread(26:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(26:2/RU) 22 Page(56:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(26:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(26:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(56:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(3:2/9)
[PageFaultHandler][do_handlePageFault] Frame(9) is dirty, do swap-out Thread(26:2/W0)
[PageFaultHandler][SwapOut] page Page(3:2/9) frame Frame(9)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 3
PageTableEntry][do_lock] iorb IORB(Id(280),Device(0),Page(3:2/9),Diskblock(67),FileWrite,Openfile(4:2/0),Thread(26:2/W1)) this Page(3:2/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 52660 offset = 436 page no = 51 Thread(33:2/RU)
[MMU][do_refer] Do memory read.
[PageCleanDaemon][unleash] osp.Memory.PageCleanDaemon@1bf99cf5 execute time 40000
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(19)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(21)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(10)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(17)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(3)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(29)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(19)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(19) Page(17:4/19) isDirty true
[PageFaultHandler][SwapOut] file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 17
PageTableEntry][do_lock] iorb IORB(Id(281),Device(0),Page(17:4/19),Diskblock(209),FileWrite,Openfile(12:4/0),Thread(34:0/W1)) this Page(17:4/19)
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 40036/250000[MMU][do_refer] address = 12863 offset = 575 page no = 12 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 21 Page(12:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(12:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] set Page(12:2/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(12:2/2) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(282),Device(0),Page(12:2/2),Diskblock(76),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(12:2/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(39:4/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(39:4/23) swap-in finish Thread(24:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 12834 offset = 546 page no = 12 Thread(33:2/RU)
[PageTableEntry][do_unlock] this Page(57:4/24)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(24) Page(57:4/24) Thread(32:5/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(51:5/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(51:5/24) do swap-in Thread(32:5/W0)
PageTableEntry][do_lock] iorb IORB(Id(283),Device(0),Page(51:5/24),Diskblock(51),FileRead,Openfile(30:5/0),Thread(32:5/W1)) this Page(51:5/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(3:2/9)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(9) Page(3:2/9) Thread(26:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(56:2/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(56:2/9) do swap-in Thread(26:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(284),Device(0),Page(56:2/9),Diskblock(120),FileRead,Openfile(4:2/0),Thread(26:2/W1)) this Page(56:2/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(17:4/19)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(19) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(21)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(21) Page(11:4/21) isDirty true
[PageFaultHandler][SwapOut] file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 11
PageTableEntry][do_lock] iorb IORB(Id(285),Device(0),Page(11:4/21),Diskblock(203),FileWrite,Openfile(12:4/0),Thread(34:0/W1)) this Page(11:4/21)
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 25095 offset = 519 page no = 24 Thread(11:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(11:2/RU) 21 Page(24:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(11:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(11:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(24:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(53:2/8)
[PageFaultHandler][do_handlePageFault] set Page(24:2/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(24:2/8) do swap-in Thread(11:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(286),Device(0),Page(24:2/8),Diskblock(88),FileRead,Openfile(4:2/0),Thread(11:2/W1)) this Page(24:2/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 52907 offset = 683 page no = 51 Thread(24:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(24:4/RU) 22 Page(51:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(24:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(24:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(51:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(17:4/19)
[PageFaultHandler][do_handlePageFault] set Page(51:4/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(51:4/19) do swap-in Thread(24:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(287),Device(0),Page(51:4/19),Diskblock(243),FileRead,Openfile(12:4/0),Thread(24:4/W1)) this Page(51:4/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(12:2/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(12:2/2) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(51:5/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(51:5/24) swap-in finish Thread(32:5/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(288),Device(1),Page(12:2/2),Diskblock(13),FileWrite,Openfile(36:2/1),Thread(33:2/W0)) this Page(12:2/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 65161 offset = 649 page no = 63 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 22 Page(63:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(63:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(51:5/24)
[PageFaultHandler][do_handlePageFault] set Page(63:2/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(63:2/24) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(289),Device(0),Page(63:2/24),Diskblock(127),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(63:2/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(12:2/2)
PageTableEntry][do_lock] iorb IORB(Id(290),Device(1),Page(23:5/18),Diskblock(14),FileWrite,Openfile(36:2/1),Thread(32:5/W0)) this Page(23:5/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(56:2/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(56:2/9) swap-in finish Thread(26:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(23:5/18)
[PageTableEntry][do_unlock] this Page(11:4/21)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(21) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(10)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(10) Page(7:4/10) isDirty true
[PageFaultHandler][SwapOut] file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 7
PageTableEntry][do_lock] iorb IORB(Id(291),Device(0),Page(7:4/10),Diskblock(199),FileWrite,Openfile(12:4/0),Thread(34:0/W1)) this Page(7:4/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(24:2/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(24:2/8) swap-in finish Thread(11:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 22500 offset = 996 page no = 21 Thread(35:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(35:2/RU) 22 Page(21:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(35:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(35:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(21:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(56:2/9)
[PageFaultHandler][do_handlePageFault] Frame(9) is dirty, do swap-out Thread(35:2/W0)
[PageFaultHandler][SwapOut] page Page(56:2/9) frame Frame(9)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 56
PageTableEntry][do_lock] iorb IORB(Id(292),Device(0),Page(56:2/9),Diskblock(120),FileWrite,Openfile(4:2/0),Thread(35:2/W1)) this Page(56:2/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 41020/250000[MMU][do_refer] address = 63033 offset = 569 page no = 61 Thread(32:5/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(32:5/RU) 22 Page(61:5/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(32:5/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(32:5/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(61:5/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(5/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(2:4/27)
[PageFaultHandler][do_handlePageFault] set Page(61:5/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(61:5/27) do swap-in Thread(32:5/W0)
PageTableEntry][do_lock] iorb IORB(Id(293),Device(0),Page(61:5/27),Diskblock(61),FileRead,Openfile(30:5/0),Thread(32:5/W1)) this Page(61:5/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 21448 offset = 968 page no = 20 Thread(33:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(33:2/RU) 21 Page(20:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(33:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(33:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(20:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(11:4/21)
[PageFaultHandler][do_handlePageFault] set Page(20:2/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(20:2/21) do swap-in Thread(33:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(294),Device(0),Page(20:2/21),Diskblock(84),FileRead,Openfile(4:2/0),Thread(33:2/W1)) this Page(20:2/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(51:4/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(51:4/19) swap-in finish Thread(24:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(63:2/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(63:2/24) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 45609 offset = 553 page no = 44 Thread(26:2/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(7:4/10)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(10) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(17)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(17) Page(5:4/17) isDirty true
[PageFaultHandler][SwapOut] file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 5
PageTableEntry][do_lock] iorb IORB(Id(295),Device(0),Page(5:4/17),Diskblock(197),FileWrite,Openfile(12:4/0),Thread(34:0/W1)) this Page(5:4/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 43009 offset = 1 page no = 42 Thread(23:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(23:4/RU) 22 Page(42:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(23:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(23:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(42:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(7:4/10)
[PageFaultHandler][do_handlePageFault] set Page(42:4/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(42:4/10) do swap-in Thread(23:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(296),Device(0),Page(42:4/10),Diskblock(234),FileRead,Openfile(12:4/0),Thread(23:4/W1)) this Page(42:4/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(297),Device(1),Page(12:2/2),Diskblock(14),FileRead,Openfile(36:2/1),Thread(27:2/W0)) this Page(12:2/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(56:2/9)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(9) Page(56:2/9) Thread(35:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(21:2/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(21:2/9) do swap-in Thread(35:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(298),Device(0),Page(21:2/9),Diskblock(85),FileRead,Openfile(4:2/0),Thread(35:2/W1)) this Page(21:2/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(12:2/2)
[PageTableEntry][do_unlock] this Page(61:5/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(61:5/27) swap-in finish Thread(32:5/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 21393 offset = 913 page no = 20 Thread(11:2/RU)
[PageTableEntry][do_unlock] this Page(20:2/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(20:2/21) swap-in finish Thread(33:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 19857 offset = 401 page no = 19 Thread(26:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(26:2/RU) 21 Page(19:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(26:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(26:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(19:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(61:5/27)
[PageFaultHandler][do_handlePageFault] Frame(27) is dirty, do swap-out Thread(26:2/W0)
[PageFaultHandler][SwapOut] page Page(61:5/27) frame Frame(27)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 61
PageTableEntry][do_lock] iorb IORB(Id(299),Device(0),Page(61:5/27),Diskblock(125),FileWrite,Openfile(4:2/0),Thread(26:2/W1)) this Page(61:5/27)
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 29260 offset = 588 page no = 28 Thread(24:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(24:4/RU) 21 Page(28:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(24:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(24:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(7) for Page(28:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(7) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] set Page(28:4/null) and Frame(7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(28:4/7) do swap-in Thread(24:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(300),Device(0),Page(28:4/7),Diskblock(220),FileRead,Openfile(12:4/0),Thread(24:4/W1)) this Page(28:4/7)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(5:4/17)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(17) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(3)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(3) Page(29:4/3) isDirty true
[PageFaultHandler][SwapOut] file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 29
PageTableEntry][do_lock] iorb IORB(Id(301),Device(0),Page(29:4/3),Diskblock(221),FileWrite,Openfile(12:4/0),Thread(34:0/W1)) this Page(29:4/3)
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(302),Device(1),Page(12:2/2),Diskblock(12),FileWrite,Openfile(36:2/1),Thread(33:2/W0)) this Page(12:2/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 49227 offset = 75 page no = 48 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 22 Page(48:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(48:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(40:4/25)
[PageFaultHandler][do_handlePageFault] set Page(48:2/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(48:2/25) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(303),Device(0),Page(48:2/25),Diskblock(112),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(48:2/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(12:2/2)
Simulation progress: 42099/250000[PageTableEntry][do_unlock] this Page(42:4/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(42:4/10) swap-in finish Thread(23:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(21:2/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(21:2/9) swap-in finish Thread(35:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 25736 offset = 136 page no = 25 Thread(32:5/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(32:5/RU) 21 Page(25:5/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(32:5/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(32:5/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(25:5/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(5/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(21:2/9)
[PageFaultHandler][do_handlePageFault] Frame(9) is dirty, do swap-out Thread(32:5/W0)
[PageFaultHandler][SwapOut] page Page(21:2/9) frame Frame(9)file Openfile(30:5/0)
[PageFaultHandler][SwapOut] block no 21
PageTableEntry][do_lock] iorb IORB(Id(304),Device(0),Page(21:2/9),Diskblock(21),FileWrite,Openfile(30:5/0),Thread(32:5/W1)) this Page(21:2/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 47942 offset = 838 page no = 46 Thread(23:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(23:4/RU) 22 Page(46:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(23:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(23:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(46:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(42:4/10)
[PageFaultHandler][do_handlePageFault] Frame(10) is dirty, do swap-out Thread(23:4/W0)
[PageFaultHandler][SwapOut] page Page(42:4/10) frame Frame(10)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 42
PageTableEntry][do_lock] iorb IORB(Id(305),Device(0),Page(42:4/10),Diskblock(234),FileWrite,Openfile(12:4/0),Thread(23:4/W1)) this Page(42:4/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(61:5/27)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(27) Page(61:5/27) Thread(26:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(19:2/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(19:2/27) do swap-in Thread(26:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(306),Device(0),Page(19:2/27),Diskblock(83),FileRead,Openfile(4:2/0),Thread(26:2/W1)) this Page(19:2/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(307),Device(1),Page(12:2/2),Diskblock(14),FileRead,Openfile(38:2/1),Thread(35:2/W0)) this Page(12:2/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 55449 offset = 153 page no = 54 Thread(33:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(33:2/RU) 22 Page(54:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(33:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(33:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(54:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(58:4/26)
[PageFaultHandler][do_handlePageFault] set Page(54:2/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(54:2/26) do swap-in Thread(33:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(308),Device(0),Page(54:2/26),Diskblock(118),FileRead,Openfile(4:2/0),Thread(33:2/W1)) this Page(54:2/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(12:2/2)
[PageTableEntry][do_unlock] this Page(28:4/7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(28:4/7) swap-in finish Thread(24:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(309),Device(1),Page(12:2/2),Diskblock(14),FileWrite,Openfile(38:2/1),Thread(11:2/W0)) this Page(12:2/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(12:2/2)
[PageTableEntry][do_unlock] this Page(29:4/3)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(3) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(29)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(29) Page(44:2/29) isDirty true
[PageFaultHandler][SwapOut] file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 44
PageTableEntry][do_lock] iorb IORB(Id(310),Device(0),Page(44:2/29),Diskblock(108),FileWrite,Openfile(4:2/0),Thread(34:0/W1)) this Page(44:2/29)
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(48:2/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(48:2/25) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 9249 offset = 33 page no = 9 Thread(24:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(24:4/RU) 22 Page(9:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(24:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(24:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(9:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(48:2/25)
[PageFaultHandler][do_handlePageFault] Frame(25) is dirty, do swap-out Thread(24:4/W0)
[PageFaultHandler][SwapOut] page Page(48:2/25) frame Frame(25)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 48
PageTableEntry][do_lock] iorb IORB(Id(311),Device(0),Page(48:2/25),Diskblock(240),FileWrite,Openfile(12:4/0),Thread(24:4/W1)) this Page(48:2/25)
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(21:2/9)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(9) Page(21:2/9) Thread(32:5/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(25:5/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(25:5/9) do swap-in Thread(32:5/W0)
PageTableEntry][do_lock] iorb IORB(Id(312),Device(0),Page(25:5/9),Diskblock(25),FileRead,Openfile(30:5/0),Thread(32:5/W1)) this Page(25:5/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 14027 offset = 715 page no = 13 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 21 Page(13:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(13:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(25:2/16)
[PageFaultHandler][do_handlePageFault] Frame(16) is dirty, do swap-out Thread(27:2/W0)
[PageFaultHandler][SwapOut] page Page(25:2/16) frame Frame(16)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 25
PageTableEntry][do_lock] iorb IORB(Id(313),Device(0),Page(25:2/16),Diskblock(89),FileWrite,Openfile(4:2/0),Thread(27:2/W1)) this Page(25:2/16)
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 1161 offset = 137 page no = 1 Thread(11:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(11:2/RU) 21 Page(1:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(11:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(11:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(1:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(15:4/13)
[PageFaultHandler][do_handlePageFault] set Page(1:2/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(1:2/13) do swap-in Thread(11:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(314),Device(0),Page(1:2/13),Diskblock(65),FileRead,Openfile(4:2/0),Thread(11:2/W1)) this Page(1:2/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 43008/250000[PageTableEntry][do_unlock] this Page(42:4/10)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(10) Page(42:4/10) Thread(23:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(46:4/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(46:4/10) do swap-in Thread(23:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(315),Device(0),Page(46:4/10),Diskblock(238),FileRead,Openfile(12:4/0),Thread(23:4/W1)) this Page(46:4/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 1588 offset = 564 page no = 1 Thread(17:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(17:4/RU) 21 Page(1:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(17:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(17:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(1:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(24:4/5)
[PageFaultHandler][do_handlePageFault] Frame(5) is dirty, do swap-out Thread(17:4/W0)
[PageFaultHandler][SwapOut] page Page(24:4/5) frame Frame(5)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 24
PageTableEntry][do_lock] iorb IORB(Id(316),Device(0),Page(24:4/5),Diskblock(216),FileWrite,Openfile(12:4/0),Thread(17:4/W1)) this Page(24:4/5)
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(19:2/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(19:2/27) swap-in finish Thread(26:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(54:2/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(54:2/26) swap-in finish Thread(33:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(44:2/29)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(29) finish
[MMU][do_refer] address = 47790 offset = 686 page no = 46 Thread(33:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(33:2/RU) 22 Page(46:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(33:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(33:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(46:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(54:2/26)
[PageFaultHandler][do_handlePageFault] Frame(26) is dirty, do swap-out Thread(33:2/W0)
[PageFaultHandler][SwapOut] page Page(54:2/26) frame Frame(26)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 54
PageTableEntry][do_lock] iorb IORB(Id(317),Device(0),Page(54:2/26),Diskblock(118),FileWrite,Openfile(4:2/0),Thread(33:2/W1)) this Page(54:2/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 32325 offset = 581 page no = 31 Thread(35:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(35:2/RU) 21 Page(31:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(35:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(35:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(31:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(62:2/14)
[PageFaultHandler][do_handlePageFault] Frame(14) is dirty, do swap-out Thread(35:2/W0)
[PageFaultHandler][SwapOut] page Page(62:2/14) frame Frame(14)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 62
PageTableEntry][do_lock] iorb IORB(Id(318),Device(0),Page(62:2/14),Diskblock(126),FileWrite,Openfile(4:2/0),Thread(35:2/W1)) this Page(62:2/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(48:2/25)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(25) Page(48:2/25) Thread(24:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(9:4/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(9:4/25) do swap-in Thread(24:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(319),Device(0),Page(9:4/25),Diskblock(201),FileRead,Openfile(12:4/0),Thread(24:4/W1)) this Page(9:4/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(25:5/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(25:5/9) swap-in finish Thread(32:5/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 13841 offset = 529 page no = 13 Thread(32:5/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(32:5/RU) 22 Page(13:5/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(32:5/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(32:5/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(13:5/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(5/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(63:3/12)
[PageFaultHandler][do_handlePageFault] Frame(12) is dirty, do swap-out Thread(32:5/W0)
[PageFaultHandler][SwapOut] page Page(63:3/12) frame Frame(12)file Openfile(30:5/0)
[PageFaultHandler][SwapOut] block no 63
PageTableEntry][do_lock] iorb IORB(Id(320),Device(0),Page(63:3/12),Diskblock(63),FileWrite,Openfile(30:5/0),Thread(32:5/W1)) this Page(63:3/12)
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(25:2/16)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(16) Page(25:2/16) Thread(27:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(13:2/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(13:2/16) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(321),Device(0),Page(13:2/16),Diskblock(77),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(13:2/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 44011/250000[PageTableEntry][do_unlock] this Page(1:2/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(1:2/13) swap-in finish Thread(11:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(46:4/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(46:4/10) swap-in finish Thread(23:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(24:4/5)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(5) Page(24:4/5) Thread(17:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(1:4/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(1:4/5) do swap-in Thread(17:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(322),Device(0),Page(1:4/5),Diskblock(193),FileRead,Openfile(12:4/0),Thread(17:4/W1)) this Page(1:4/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(54:2/26)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(26) Page(54:2/26) Thread(33:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(46:2/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(46:2/26) do swap-in Thread(33:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(323),Device(0),Page(46:2/26),Diskblock(110),FileRead,Openfile(4:2/0),Thread(33:2/W1)) this Page(46:2/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(62:2/14)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(14) Page(62:2/14) Thread(35:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(31:2/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(31:2/14) do swap-in Thread(35:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(324),Device(0),Page(31:2/14),Diskblock(95),FileRead,Openfile(4:2/0),Thread(35:2/W1)) this Page(31:2/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 48945 offset = 817 page no = 47 Thread(23:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(23:4/RU) 22 Page(47:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(23:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(23:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(47:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(10:4/4)
[PageFaultHandler][do_handlePageFault] set Page(47:4/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(47:4/4) do swap-in Thread(23:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(325),Device(0),Page(47:4/4),Diskblock(239),FileRead,Openfile(12:4/0),Thread(23:4/W1)) this Page(47:4/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(9:4/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(9:4/25) swap-in finish Thread(24:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 19783 offset = 327 page no = 19 Thread(24:4/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(63:3/12)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(12) Page(63:3/12) Thread(32:5/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(13:5/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(13:5/12) do swap-in Thread(32:5/W0)
PageTableEntry][do_lock] iorb IORB(Id(326),Device(0),Page(13:5/12),Diskblock(13),FileRead,Openfile(30:5/0),Thread(32:5/W1)) this Page(13:5/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 9640 offset = 424 page no = 9 Thread(11:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(11:2/RU) 21 Page(9:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(11:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(11:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(9:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(9:4/25)
[PageFaultHandler][do_handlePageFault] Frame(25) is dirty, do swap-out Thread(11:2/W0)
[PageFaultHandler][SwapOut] page Page(9:4/25) frame Frame(25)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 9
PageTableEntry][do_lock] iorb IORB(Id(327),Device(0),Page(9:4/25),Diskblock(73),FileWrite,Openfile(4:2/0),Thread(11:2/W1)) this Page(9:4/25)
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(13:2/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(13:2/16) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 45070/250000[MMU][do_refer] address = 13211 offset = 923 page no = 12 Thread(24:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(24:4/RU) 22 Page(12:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(24:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(24:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(12:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(13:2/16)
[PageFaultHandler][do_handlePageFault] set Page(12:4/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(12:4/16) do swap-in Thread(24:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(328),Device(0),Page(12:4/16),Diskblock(204),FileRead,Openfile(12:4/0),Thread(24:4/W1)) this Page(12:4/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:4/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(1:4/5) swap-in finish Thread(17:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(46:2/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(46:2/26) swap-in finish Thread(33:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(31:2/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(31:2/14) swap-in finish Thread(35:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 44438 offset = 406 page no = 43 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 21 Page(43:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(43:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(37:4/0)
[PageFaultHandler][do_handlePageFault] Frame(0) is dirty, do swap-out Thread(27:2/W0)
[PageFaultHandler][SwapOut] page Page(37:4/0) frame Frame(0)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 37
PageTableEntry][do_lock] iorb IORB(Id(329),Device(0),Page(37:4/0),Diskblock(101),FileWrite,Openfile(4:2/0),Thread(27:2/W1)) this Page(37:4/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 62710 offset = 246 page no = 61 Thread(35:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(35:2/RU) 21 Page(61:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(35:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(35:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(61:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(40:2/22)
[PageFaultHandler][do_handlePageFault] set Page(61:2/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(61:2/22) do swap-in Thread(35:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(330),Device(0),Page(61:2/22),Diskblock(125),FileRead,Openfile(4:2/0),Thread(35:2/W1)) this Page(61:2/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(47:4/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(47:4/4) swap-in finish Thread(23:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(13:5/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(13:5/12) swap-in finish Thread(32:5/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(9:4/25)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(25) Page(9:4/25) Thread(11:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(9:2/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(9:2/25) do swap-in Thread(11:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(331),Device(0),Page(9:2/25),Diskblock(73),FileRead,Openfile(4:2/0),Thread(11:2/W1)) this Page(9:2/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 8745 offset = 553 page no = 8 Thread(32:5/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(32:5/RU) 22 Page(8:5/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(32:5/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(32:5/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(8:5/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(5/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(47:4/4)
[PageFaultHandler][do_handlePageFault] Frame(4) is dirty, do swap-out Thread(32:5/W0)
[PageFaultHandler][SwapOut] page Page(47:4/4) frame Frame(4)file Openfile(30:5/0)
[PageFaultHandler][SwapOut] block no 47
PageTableEntry][do_lock] iorb IORB(Id(332),Device(0),Page(47:4/4),Diskblock(47),FileWrite,Openfile(30:5/0),Thread(32:5/W1)) this Page(47:4/4)
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 46006/250000[PageTableEntry][do_unlock] this Page(12:4/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(12:4/16) swap-in finish Thread(24:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(37:4/0)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(0) Page(37:4/0) Thread(27:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(43:2/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(43:2/0) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(333),Device(0),Page(43:2/0),Diskblock(107),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(43:2/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 17224 offset = 840 page no = 16 Thread(24:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(24:4/RU) 21 Page(16:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(24:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(24:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(16:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(41:2/20)
[PageFaultHandler][do_handlePageFault] Frame(20) is dirty, do swap-out Thread(24:4/W0)
[PageFaultHandler][SwapOut] page Page(41:2/20) frame Frame(20)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 41
PageTableEntry][do_lock] iorb IORB(Id(334),Device(0),Page(41:2/20),Diskblock(233),FileWrite,Openfile(12:4/0),Thread(24:4/W1)) this Page(41:2/20)
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(61:2/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(61:2/22) swap-in finish Thread(35:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(9:2/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(9:2/25) swap-in finish Thread(11:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(47:4/4)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(4) Page(47:4/4) Thread(32:5/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(8:5/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(8:5/4) do swap-in Thread(32:5/W0)
PageTableEntry][do_lock] iorb IORB(Id(335),Device(0),Page(8:5/4),Diskblock(8),FileRead,Openfile(30:5/0),Thread(32:5/W1)) this Page(8:5/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 4404 offset = 308 page no = 4 Thread(35:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(35:2/RU) 22 Page(4:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(35:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(35:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(4:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(24:2/8)
[PageFaultHandler][do_handlePageFault] set Page(4:2/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(4:2/8) do swap-in Thread(35:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(336),Device(0),Page(4:2/8),Diskblock(68),FileRead,Openfile(4:2/0),Thread(35:2/W1)) this Page(4:2/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(43:2/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(43:2/0) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 23596 offset = 44 page no = 23 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 22 Page(23:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(23:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(43:2/0)
[PageFaultHandler][do_handlePageFault] set Page(23:2/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(23:2/0) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(337),Device(0),Page(23:2/0),Diskblock(87),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(23:2/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(338),Device(2),Page(1:2/13),Diskblock(15),FileRead,Openfile(42:2/2),Thread(11:2/W0)) this Page(1:2/13)
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(41:2/20)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(20) Page(41:2/20) Thread(24:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(16:4/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(16:4/20) do swap-in Thread(24:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(339),Device(0),Page(16:4/20),Diskblock(208),FileRead,Openfile(12:4/0),Thread(24:4/W1)) this Page(16:4/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(8:5/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(8:5/4) swap-in finish Thread(32:5/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(4:2/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(4:2/8) swap-in finish Thread(35:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 28570 offset = 922 page no = 27 Thread(35:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(35:2/RU) 21 Page(27:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(35:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(35:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(27:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(8:5/4)
[PageFaultHandler][do_handlePageFault] Frame(4) is dirty, do swap-out Thread(35:2/W0)
[PageFaultHandler][SwapOut] page Page(8:5/4) frame Frame(4)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 8
PageTableEntry][do_lock] iorb IORB(Id(340),Device(0),Page(8:5/4),Diskblock(72),FileWrite,Openfile(4:2/0),Thread(35:2/W1)) this Page(8:5/4)
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 47002/250000[MMU][do_refer] address = 3914 offset = 842 page no = 3 Thread(32:5/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(32:5/RU) 22 Page(3:5/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(32:5/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(32:5/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(3:5/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(5/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(12:2/2)
[PageFaultHandler][do_handlePageFault] Frame(2) is dirty, do swap-out Thread(32:5/W0)
[PageFaultHandler][SwapOut] page Page(12:2/2) frame Frame(2)file Openfile(30:5/0)
[PageFaultHandler][SwapOut] block no 12
PageTableEntry][do_lock] iorb IORB(Id(341),Device(0),Page(12:2/2),Diskblock(12),FileWrite,Openfile(30:5/0),Thread(32:5/W1)) this Page(12:2/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(23:2/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(23:2/0) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 30895 offset = 175 page no = 30 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 22 Page(30:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(30:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(8:4/1)
[PageFaultHandler][do_handlePageFault] set Page(30:2/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(30:2/1) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(342),Device(0),Page(30:2/1),Diskblock(94),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(30:2/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:4/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(16:4/20) swap-in finish Thread(24:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(8:5/4)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(4) Page(8:5/4) Thread(35:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(27:2/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(27:2/4) do swap-in Thread(35:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(343),Device(0),Page(27:2/4),Diskblock(91),FileRead,Openfile(4:2/0),Thread(35:2/W1)) this Page(27:2/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:2/13)
[PageTableEntry][do_unlock] this Page(12:2/2)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(2) Page(12:2/2) Thread(32:5/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(3:5/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(3:5/2) do swap-in Thread(32:5/W0)
PageTableEntry][do_lock] iorb IORB(Id(344),Device(0),Page(3:5/2),Diskblock(3),FileRead,Openfile(30:5/0),Thread(32:5/W1)) this Page(3:5/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(30:2/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(30:2/1) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(27:2/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(27:2/4) swap-in finish Thread(35:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(3:5/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(3:5/2) swap-in finish Thread(32:5/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 28558 offset = 910 page no = 27 Thread(35:2/RU)
[MMU][do_refer] Do memory write.
Simulation progress: 48020/250000[MMU][do_refer] address = 27450 offset = 826 page no = 26 Thread(32:5/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(32:5/RU) 22 Page(26:5/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(32:5/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(32:5/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(26:5/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(5/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(3:5/2)
[PageFaultHandler][do_handlePageFault] Frame(2) is dirty, do swap-out Thread(32:5/W0)
[PageFaultHandler][SwapOut] page Page(3:5/2) frame Frame(2)file Openfile(30:5/0)
[PageFaultHandler][SwapOut] block no 3
PageTableEntry][do_lock] iorb IORB(Id(345),Device(0),Page(3:5/2),Diskblock(3),FileWrite,Openfile(30:5/0),Thread(32:5/W1)) this Page(3:5/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(3:5/2)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(2) Page(3:5/2) Thread(32:5/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(26:5/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(26:5/2) do swap-in Thread(32:5/W0)
PageTableEntry][do_lock] iorb IORB(Id(346),Device(0),Page(26:5/2),Diskblock(26),FileRead,Openfile(30:5/0),Thread(32:5/W1)) this Page(26:5/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(26:5/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(26:5/2) swap-in finish Thread(32:5/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(347),Device(1),Page(1:2/13),Diskblock(0),FileWrite,Openfile(44:2/1),Thread(27:2/W0)) this Page(1:2/13)
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:2/13)
[MMU][do_refer] address = 48792 offset = 664 page no = 47 Thread(36:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(36:4/RU) 22 Page(47:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(36:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(36:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(47:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(63:2/24)
[PageFaultHandler][do_handlePageFault] Frame(24) is dirty, do swap-out Thread(36:4/W0)
[PageFaultHandler][SwapOut] page Page(63:2/24) frame Frame(24)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 63
PageTableEntry][do_lock] iorb IORB(Id(348),Device(0),Page(63:2/24),Diskblock(255),FileWrite,Openfile(12:4/0),Thread(36:4/W1)) this Page(63:2/24)
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 10984 offset = 744 page no = 10 Thread(28:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(28:4/RU) 21 Page(10:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(28:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(28:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(10:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(5:4/17)
[PageFaultHandler][do_handlePageFault] set Page(10:4/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(10:4/17) do swap-in Thread(28:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(349),Device(0),Page(10:4/17),Diskblock(202),FileRead,Openfile(12:4/0),Thread(28:4/W1)) this Page(10:4/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 49003/250000[PageTableEntry][do_unlock] this Page(63:2/24)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(24) Page(63:2/24) Thread(36:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(47:4/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(47:4/24) do swap-in Thread(36:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(350),Device(0),Page(47:4/24),Diskblock(239),FileRead,Openfile(12:4/0),Thread(36:4/W1)) this Page(47:4/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(10:4/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(10:4/17) swap-in finish Thread(28:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 47009 offset = 929 page no = 45 Thread(19:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(19:4/RU) 22 Page(45:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(19:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(19:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(7) for Page(45:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(7) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(28:4/7)
[PageFaultHandler][do_handlePageFault] set Page(45:4/null) and Frame(7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(45:4/7) do swap-in Thread(19:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(351),Device(0),Page(45:4/7),Diskblock(237),FileRead,Openfile(12:4/0),Thread(19:4/W1)) this Page(45:4/7)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(47:4/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(47:4/24) swap-in finish Thread(36:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(352),Device(1),Page(1:4/5),Diskblock(17),FileWrite,Openfile(44:2/1),Thread(37:4/W0)) this Page(1:4/5)
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 13586 offset = 274 page no = 13 Thread(28:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(28:4/RU) 22 Page(13:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(28:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(28:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(13:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(19:2/27)
[PageFaultHandler][do_handlePageFault] set Page(13:4/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(13:4/27) do swap-in Thread(28:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(353),Device(0),Page(13:4/27),Diskblock(205),FileRead,Openfile(12:4/0),Thread(28:4/W1)) this Page(13:4/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:4/5)
[PageTableEntry][do_unlock] this Page(45:4/7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(45:4/7) swap-in finish Thread(19:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(13:4/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(13:4/27) swap-in finish Thread(28:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(354),Device(1),Page(1:4/5),Diskblock(17),FileRead,Openfile(44:2/1),Thread(19:4/W0)) this Page(1:4/5)
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:4/5)
Simulation progress: 50056/250000[MMU][do_refer] address = 35644 offset = 828 page no = 34 Thread(37:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(37:4/RU) 21 Page(34:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(37:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(37:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(7) for Page(34:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(7) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(45:4/7)
[PageFaultHandler][do_handlePageFault] Frame(7) is dirty, do swap-out Thread(37:4/W0)
[PageFaultHandler][SwapOut] page Page(45:4/7) frame Frame(7)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 45
PageTableEntry][do_lock] iorb IORB(Id(355),Device(0),Page(45:4/7),Diskblock(237),FileWrite,Openfile(12:4/0),Thread(37:4/W1)) this Page(45:4/7)
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 14265 offset = 953 page no = 13 Thread(35:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(35:2/RU) 21 Page(13:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(35:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(35:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(13:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(44:2/29)
[PageFaultHandler][do_handlePageFault] set Page(13:2/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(13:2/29) do swap-in Thread(35:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(356),Device(0),Page(13:2/29),Diskblock(77),FileRead,Openfile(4:2/0),Thread(35:2/W1)) this Page(13:2/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 56235 offset = 939 page no = 54 Thread(36:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(36:4/RU) 21 Page(54:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(36:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(36:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(54:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(46:4/10)
[PageFaultHandler][do_handlePageFault] Frame(10) is dirty, do swap-out Thread(36:4/W0)
[PageFaultHandler][SwapOut] page Page(46:4/10) frame Frame(10)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 46
PageTableEntry][do_lock] iorb IORB(Id(357),Device(0),Page(46:4/10),Diskblock(238),FileWrite,Openfile(12:4/0),Thread(36:4/W1)) this Page(46:4/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(45:4/7)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(7) Page(45:4/7) Thread(37:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(34:4/null) and Frame(7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(34:4/7) do swap-in Thread(37:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(358),Device(0),Page(34:4/7),Diskblock(226),FileRead,Openfile(12:4/0),Thread(37:4/W1)) this Page(34:4/7)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 35341 offset = 525 page no = 34 Thread(28:4/RU)
[PageTableEntry][do_unlock] this Page(13:2/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(13:2/29) swap-in finish Thread(35:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 39911 offset = 999 page no = 38 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 22 Page(38:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(38:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(1:2/13)
[PageFaultHandler][do_handlePageFault] Frame(13) is dirty, do swap-out Thread(27:2/W0)
[PageFaultHandler][SwapOut] page Page(1:2/13) frame Frame(13)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 1
PageTableEntry][do_lock] iorb IORB(Id(359),Device(0),Page(1:2/13),Diskblock(65),FileWrite,Openfile(4:2/0),Thread(27:2/W1)) this Page(1:2/13)
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 59626 offset = 234 page no = 58 Thread(35:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(35:2/RU) 21 Page(58:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(35:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(35:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(58:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(25:5/9)
[PageFaultHandler][do_handlePageFault] set Page(58:2/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(58:2/9) do swap-in Thread(35:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(360),Device(0),Page(58:2/9),Diskblock(122),FileRead,Openfile(4:2/0),Thread(35:2/W1)) this Page(58:2/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(46:4/10)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(10) Page(46:4/10) Thread(36:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(54:4/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(54:4/10) do swap-in Thread(36:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(361),Device(0),Page(54:4/10),Diskblock(246),FileRead,Openfile(12:4/0),Thread(36:4/W1)) this Page(54:4/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(34:4/7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(34:4/7) swap-in finish Thread(37:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] Do memory write.
Simulation progress: 51021/250000[PageTableEntry][do_unlock] this Page(1:2/13)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(13) Page(1:2/13) Thread(27:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(38:2/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(38:2/13) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(362),Device(0),Page(38:2/13),Diskblock(102),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(38:2/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 43451 offset = 443 page no = 42 Thread(37:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(37:4/RU) 22 Page(42:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(37:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(37:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(42:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(13:5/12)
[PageFaultHandler][do_handlePageFault] Frame(12) is dirty, do swap-out Thread(37:4/W0)
[PageFaultHandler][SwapOut] page Page(13:5/12) frame Frame(12)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 13
PageTableEntry][do_lock] iorb IORB(Id(363),Device(0),Page(13:5/12),Diskblock(205),FileWrite,Openfile(12:4/0),Thread(37:4/W1)) this Page(13:5/12)
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 19479 offset = 23 page no = 19 Thread(28:4/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(58:2/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(58:2/9) swap-in finish Thread(35:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 1960 offset = 936 page no = 1 Thread(26:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(26:2/RU) 22 Page(1:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(26:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(26:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(1:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(58:2/9)
[PageFaultHandler][do_handlePageFault] set Page(1:2/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(1:2/9) do swap-in Thread(26:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(364),Device(0),Page(1:2/9),Diskblock(65),FileRead,Openfile(4:2/0),Thread(26:2/W1)) this Page(1:2/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 58421 offset = 53 page no = 57 Thread(35:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(35:2/RU) 22 Page(57:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(35:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(35:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(57:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(46:2/26)
[PageFaultHandler][do_handlePageFault] Frame(26) is dirty, do swap-out Thread(35:2/W0)
[PageFaultHandler][SwapOut] page Page(46:2/26) frame Frame(26)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 46
PageTableEntry][do_lock] iorb IORB(Id(365),Device(0),Page(46:2/26),Diskblock(110),FileWrite,Openfile(4:2/0),Thread(35:2/W1)) this Page(46:2/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(54:4/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(54:4/10) swap-in finish Thread(36:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(38:2/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(38:2/13) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(366),Device(1),Page(4:2/8),Diskblock(0),FileWrite,Openfile(44:2/1),Thread(27:2/W0)) this Page(4:2/8)
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 27035 offset = 411 page no = 26 Thread(36:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(36:4/RU) 21 Page(26:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(36:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(36:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(26:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(54:4/10)
[PageFaultHandler][do_handlePageFault] set Page(26:4/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(26:4/10) do swap-in Thread(36:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(367),Device(0),Page(26:4/10),Diskblock(218),FileRead,Openfile(12:4/0),Thread(36:4/W1)) this Page(26:4/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(4:2/8)
[PageTableEntry][do_unlock] this Page(13:5/12)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(12) Page(13:5/12) Thread(37:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(42:4/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(42:4/12) do swap-in Thread(37:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(368),Device(0),Page(42:4/12),Diskblock(234),FileRead,Openfile(12:4/0),Thread(37:4/W1)) this Page(42:4/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:2/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(1:2/9) swap-in finish Thread(26:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 1873 offset = 849 page no = 1 Thread(27:2/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(46:2/26)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(26) Page(46:2/26) Thread(35:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(57:2/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(57:2/26) do swap-in Thread(35:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(369),Device(0),Page(57:2/26),Diskblock(121),FileRead,Openfile(4:2/0),Thread(35:2/W1)) this Page(57:2/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 52041/250000PageTableEntry][do_lock] iorb IORB(Id(370),Device(1),Page(1:2/9),Diskblock(0),FileRead,Openfile(44:2/1),Thread(27:2/W0)) this Page(1:2/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:2/9)
[MMU][do_refer] address = 37021 offset = 157 page no = 36 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 21 Page(36:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(36:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(38:2/13)
[PageFaultHandler][do_handlePageFault] Frame(13) is dirty, do swap-out Thread(27:2/W0)
[PageFaultHandler][SwapOut] page Page(38:2/13) frame Frame(13)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 38
PageTableEntry][do_lock] iorb IORB(Id(371),Device(0),Page(38:2/13),Diskblock(102),FileWrite,Openfile(4:2/0),Thread(27:2/W1)) this Page(38:2/13)
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(26:4/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(26:4/10) swap-in finish Thread(36:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 12193 offset = 929 page no = 11 Thread(36:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(36:4/RU) 22 Page(11:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(36:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(36:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(11:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(23:5/18)
[PageFaultHandler][do_handlePageFault] set Page(11:4/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(11:4/18) do swap-in Thread(36:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(372),Device(0),Page(11:4/18),Diskblock(203),FileRead,Openfile(12:4/0),Thread(36:4/W1)) this Page(11:4/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(42:4/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(42:4/12) swap-in finish Thread(37:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(57:2/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(57:2/26) swap-in finish Thread(35:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(38:2/13)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(13) Page(38:2/13) Thread(27:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(36:2/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(36:2/13) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(373),Device(0),Page(36:2/13),Diskblock(100),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(36:2/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 60282 offset = 890 page no = 58 Thread(35:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(35:2/RU) 22 Page(58:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(35:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(35:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(58:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(19:4/28)
[PageFaultHandler][do_handlePageFault] Frame(28) is dirty, do swap-out Thread(35:2/W0)
[PageFaultHandler][SwapOut] page Page(19:4/28) frame Frame(28)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 19
PageTableEntry][do_lock] iorb IORB(Id(374),Device(0),Page(19:4/28),Diskblock(83),FileWrite,Openfile(4:2/0),Thread(35:2/W1)) this Page(19:4/28)
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(11:4/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(11:4/18) swap-in finish Thread(36:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(36:2/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(36:2/13) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(19:4/28)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(28) Page(19:4/28) Thread(35:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(58:2/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(58:2/28) do swap-in Thread(35:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(375),Device(0),Page(58:2/28),Diskblock(122),FileRead,Openfile(4:2/0),Thread(35:2/W1)) this Page(58:2/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(58:2/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(58:2/28) swap-in finish Thread(35:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 53032/250000[MMU][do_refer] address = 18908 offset = 476 page no = 18 Thread(36:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(36:4/RU) 21 Page(18:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(36:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(36:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(18:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(36:2/13)
[PageFaultHandler][do_handlePageFault] set Page(18:4/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(18:4/13) do swap-in Thread(36:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(376),Device(0),Page(18:4/13),Diskblock(210),FileRead,Openfile(12:4/0),Thread(36:4/W1)) this Page(18:4/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 51631 offset = 431 page no = 50 Thread(37:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(37:4/RU) 22 Page(50:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(37:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(37:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(50:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(61:2/22)
[PageFaultHandler][do_handlePageFault] set Page(50:4/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(50:4/22) do swap-in Thread(37:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(377),Device(0),Page(50:4/22),Diskblock(242),FileRead,Openfile(12:4/0),Thread(37:4/W1)) this Page(50:4/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 21426 offset = 946 page no = 20 Thread(35:2/RU)
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(378),Device(1),Page(1:2/9),Diskblock(4),FileRead,Openfile(46:2/1),Thread(35:2/W0)) this Page(1:2/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(18:4/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(18:4/13) swap-in finish Thread(36:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(1:2/9)
[PageTableEntry][do_unlock] this Page(50:4/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(50:4/22) swap-in finish Thread(37:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 64497 offset = 1009 page no = 62 Thread(35:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(35:2/RU) 21 Page(62:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(35:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(35:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(62:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(50:4/22)
[PageFaultHandler][do_handlePageFault] Frame(22) is dirty, do swap-out Thread(35:2/W0)
[PageFaultHandler][SwapOut] page Page(50:4/22) frame Frame(22)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 50
PageTableEntry][do_lock] iorb IORB(Id(379),Device(0),Page(50:4/22),Diskblock(114),FileWrite,Openfile(4:2/0),Thread(35:2/W1)) this Page(50:4/22)
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 54010/250000[PageTableEntry][do_unlock] this Page(50:4/22)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(22) Page(50:4/22) Thread(35:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(62:2/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(62:2/22) do swap-in Thread(35:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(380),Device(0),Page(62:2/22),Diskblock(126),FileRead,Openfile(4:2/0),Thread(35:2/W1)) this Page(62:2/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 43270 offset = 262 page no = 42 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 22 Page(42:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(42:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(39:4/23)
[PageFaultHandler][do_handlePageFault] set Page(42:2/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(42:2/23) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(381),Device(0),Page(42:2/23),Diskblock(106),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(42:2/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(62:2/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(62:2/22) swap-in finish Thread(35:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(42:2/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(42:2/23) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 28705 offset = 33 page no = 28 Thread(35:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(35:2/RU) 21 Page(28:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(35:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(35:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(28:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(42:2/23)
[PageFaultHandler][do_handlePageFault] Frame(23) is dirty, do swap-out Thread(35:2/W0)
[PageFaultHandler][SwapOut] page Page(42:2/23) frame Frame(23)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 42
PageTableEntry][do_lock] iorb IORB(Id(382),Device(0),Page(42:2/23),Diskblock(106),FileWrite,Openfile(4:2/0),Thread(35:2/W1)) this Page(42:2/23)
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(42:2/23)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(23) Page(42:2/23) Thread(35:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(28:2/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(28:2/23) do swap-in Thread(35:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(383),Device(0),Page(28:2/23),Diskblock(92),FileRead,Openfile(4:2/0),Thread(35:2/W1)) this Page(28:2/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(28:2/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(28:2/23) swap-in finish Thread(35:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 9508 offset = 292 page no = 9 Thread(36:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(36:4/RU) 22 Page(9:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(36:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(36:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(9:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(4:2/8)
[PageFaultHandler][do_handlePageFault] Frame(8) is dirty, do swap-out Thread(36:4/W0)
[PageFaultHandler][SwapOut] page Page(4:2/8) frame Frame(8)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 4
PageTableEntry][do_lock] iorb IORB(Id(384),Device(0),Page(4:2/8),Diskblock(196),FileWrite,Openfile(12:4/0),Thread(36:4/W1)) this Page(4:2/8)
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 10739 offset = 499 page no = 10 Thread(37:4/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 55793 offset = 497 page no = 54 Thread(37:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(37:4/RU) 22 Page(54:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(37:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(37:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(54:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(16:4/20)
[PageFaultHandler][do_handlePageFault] set Page(54:4/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(54:4/20) do swap-in Thread(37:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(385),Device(0),Page(54:4/20),Diskblock(246),FileRead,Openfile(12:4/0),Thread(37:4/W1)) this Page(54:4/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 63604 offset = 116 page no = 62 Thread(35:2/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(4:2/8)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(8) Page(4:2/8) Thread(36:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(9:4/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(9:4/8) do swap-in Thread(36:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(386),Device(0),Page(9:4/8),Diskblock(201),FileRead,Openfile(12:4/0),Thread(36:4/W1)) this Page(9:4/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 43264 offset = 256 page no = 42 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 21 Page(42:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(42:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(51:4/19)
[PageFaultHandler][do_handlePageFault] Frame(19) is dirty, do swap-out Thread(27:2/W0)
[PageFaultHandler][SwapOut] page Page(51:4/19) frame Frame(19)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 51
PageTableEntry][do_lock] iorb IORB(Id(387),Device(0),Page(51:4/19),Diskblock(115),FileWrite,Openfile(4:2/0),Thread(27:2/W1)) this Page(51:4/19)
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(388),Device(1),Page(1:2/9),Diskblock(18),FileWrite,Openfile(48:4/1),Thread(35:2/W0)) this Page(1:2/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:2/9)
[PageTableEntry][do_unlock] this Page(54:4/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(54:4/20) swap-in finish Thread(37:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 55020/250000[PageTableEntry][do_unlock] this Page(9:4/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(9:4/8) swap-in finish Thread(36:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(51:4/19)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(19) Page(51:4/19) Thread(27:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(42:2/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(42:2/19) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(389),Device(0),Page(42:2/19),Diskblock(106),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(42:2/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 36542 offset = 702 page no = 35 Thread(36:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(36:4/RU) 22 Page(35:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(36:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(36:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(35:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(23:2/0)
[PageFaultHandler][do_handlePageFault] Frame(0) is dirty, do swap-out Thread(36:4/W0)
[PageFaultHandler][SwapOut] page Page(23:2/0) frame Frame(0)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 23
PageTableEntry][do_lock] iorb IORB(Id(390),Device(0),Page(23:2/0),Diskblock(215),FileWrite,Openfile(12:4/0),Thread(36:4/W1)) this Page(23:2/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(42:2/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(42:2/19) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 64432 offset = 944 page no = 62 Thread(35:2/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(23:2/0)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(0) Page(23:2/0) Thread(36:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(35:4/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(35:4/0) do swap-in Thread(36:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(391),Device(0),Page(35:4/0),Diskblock(227),FileRead,Openfile(12:4/0),Thread(36:4/W1)) this Page(35:4/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(35:4/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(35:4/0) swap-in finish Thread(36:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 26312 offset = 712 page no = 25 Thread(38:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(38:2/RU) 22 Page(25:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(38:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(38:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(25:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(42:2/19)
[PageFaultHandler][do_handlePageFault] set Page(25:2/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(25:2/19) do swap-in Thread(38:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(392),Device(0),Page(25:2/19),Diskblock(89),FileRead,Openfile(4:2/0),Thread(38:2/W1)) this Page(25:2/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 51528 offset = 328 page no = 50 Thread(36:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(36:4/RU) 21 Page(50:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(36:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(36:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(50:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(30:2/1)
[PageFaultHandler][do_handlePageFault] Frame(1) is dirty, do swap-out Thread(36:4/W0)
[PageFaultHandler][SwapOut] page Page(30:2/1) frame Frame(1)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 30
PageTableEntry][do_lock] iorb IORB(Id(393),Device(0),Page(30:2/1),Diskblock(222),FileWrite,Openfile(12:4/0),Thread(36:4/W1)) this Page(30:2/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(25:2/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(25:2/19) swap-in finish Thread(38:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 56033/250000[PageTableEntry][do_unlock] this Page(30:2/1)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(1) Page(30:2/1) Thread(36:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(50:4/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(50:4/1) do swap-in Thread(36:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(394),Device(0),Page(50:4/1),Diskblock(242),FileRead,Openfile(12:4/0),Thread(36:4/W1)) this Page(50:4/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 8305 offset = 113 page no = 8 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 22 Page(8:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(8:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(27:2/4)
[PageFaultHandler][do_handlePageFault] Frame(4) is dirty, do swap-out Thread(27:2/W0)
[PageFaultHandler][SwapOut] page Page(27:2/4) frame Frame(4)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 27
PageTableEntry][do_lock] iorb IORB(Id(395),Device(0),Page(27:2/4),Diskblock(91),FileWrite,Openfile(4:2/0),Thread(27:2/W1)) this Page(27:2/4)
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(50:4/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(50:4/1) swap-in finish Thread(36:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 21224 offset = 744 page no = 20 Thread(36:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(36:4/RU) 21 Page(20:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(36:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(36:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(20:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(50:4/1)
[PageFaultHandler][do_handlePageFault] set Page(20:4/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(20:4/1) do swap-in Thread(36:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(396),Device(0),Page(20:4/1),Diskblock(212),FileRead,Openfile(12:4/0),Thread(36:4/W1)) this Page(20:4/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(27:2/4)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(4) Page(27:2/4) Thread(27:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(8:2/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(8:2/4) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(397),Device(0),Page(8:2/4),Diskblock(72),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(8:2/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(20:4/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(20:4/1) swap-in finish Thread(36:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(8:2/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(8:2/4) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 57084/250000[MMU][do_refer] address = 21320 offset = 840 page no = 20 Thread(36:4/RU)
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(398),Device(2),Page(1:4/5),Diskblock(11),FileRead,Openfile(52:2/2),Thread(36:4/W0)) this Page(1:4/5)
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 51995 offset = 795 page no = 50 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 21 Page(50:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(50:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(20:2/21)
[PageFaultHandler][do_handlePageFault] Frame(21) is dirty, do swap-out Thread(27:2/W0)
[PageFaultHandler][SwapOut] page Page(20:2/21) frame Frame(21)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 20
PageTableEntry][do_lock] iorb IORB(Id(399),Device(0),Page(20:2/21),Diskblock(84),FileWrite,Openfile(4:2/0),Thread(27:2/W1)) this Page(20:2/21)
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(20:2/21)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(21) Page(20:2/21) Thread(27:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(50:2/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(50:2/21) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(400),Device(0),Page(50:2/21),Diskblock(114),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(50:2/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(50:2/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(50:2/21) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 10395 offset = 155 page no = 10 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 21 Page(10:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(10:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(10:4/17)
[PageFaultHandler][do_handlePageFault] set Page(10:2/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(10:2/17) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(401),Device(0),Page(10:2/17),Diskblock(74),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(10:2/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(10:2/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(10:2/17) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(1:4/5)
[MMU][do_refer] address = 33952 offset = 160 page no = 33 Thread(36:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(36:4/RU) 21 Page(33:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(36:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(36:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(33:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(47:4/24)
[PageFaultHandler][do_handlePageFault] Frame(24) is dirty, do swap-out Thread(36:4/W0)
[PageFaultHandler][SwapOut] page Page(47:4/24) frame Frame(24)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 47
PageTableEntry][do_lock] iorb IORB(Id(402),Device(0),Page(47:4/24),Diskblock(239),FileWrite,Openfile(12:4/0),Thread(36:4/W1)) this Page(47:4/24)
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 21123 offset = 643 page no = 20 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 21 Page(20:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(20:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(13:4/27)
[PageFaultHandler][do_handlePageFault] Frame(27) is dirty, do swap-out Thread(27:2/W0)
[PageFaultHandler][SwapOut] page Page(13:4/27) frame Frame(27)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 13
PageTableEntry][do_lock] iorb IORB(Id(403),Device(0),Page(13:4/27),Diskblock(77),FileWrite,Openfile(4:2/0),Thread(27:2/W1)) this Page(13:4/27)
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 58011/250000[PageTableEntry][do_unlock] this Page(47:4/24)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(24) Page(47:4/24) Thread(36:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(33:4/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(33:4/24) do swap-in Thread(36:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(404),Device(0),Page(33:4/24),Diskblock(225),FileRead,Openfile(12:4/0),Thread(36:4/W1)) this Page(33:4/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(13:4/27)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(27) Page(13:4/27) Thread(27:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(20:2/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(20:2/27) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(405),Device(0),Page(20:2/27),Diskblock(84),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(20:2/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(33:4/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(33:4/24) swap-in finish Thread(36:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(20:2/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(20:2/27) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 7454 offset = 286 page no = 7 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 21 Page(7:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(7:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(20:2/27)
[PageFaultHandler][do_handlePageFault] set Page(7:2/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(7:2/27) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(406),Device(0),Page(7:2/27),Diskblock(71),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(7:2/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 39043 offset = 131 page no = 38 Thread(36:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(36:4/RU) 21 Page(38:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(36:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(36:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(38:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(13:2/29)
[PageFaultHandler][do_handlePageFault] set Page(38:4/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(38:4/29) do swap-in Thread(36:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(407),Device(0),Page(38:4/29),Diskblock(230),FileRead,Openfile(12:4/0),Thread(36:4/W1)) this Page(38:4/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(7:2/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(7:2/27) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 19604 offset = 148 page no = 19 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 21 Page(19:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(7) for Page(19:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(7) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(34:4/7)
[PageFaultHandler][do_handlePageFault] Frame(7) is dirty, do swap-out Thread(27:2/W0)
[PageFaultHandler][SwapOut] page Page(34:4/7) frame Frame(7)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 34
PageTableEntry][do_lock] iorb IORB(Id(408),Device(0),Page(34:4/7),Diskblock(98),FileWrite,Openfile(4:2/0),Thread(27:2/W1)) this Page(34:4/7)
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(38:4/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(38:4/29) swap-in finish Thread(36:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(34:4/7)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(7) Page(34:4/7) Thread(27:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(19:2/null) and Frame(7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(19:2/7) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(409),Device(0),Page(19:2/7),Diskblock(83),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(19:2/7)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(19:2/7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(19:2/7) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 54541 offset = 269 page no = 53 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 22 Page(53:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(53:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(38:4/29)
[PageFaultHandler][do_handlePageFault] set Page(53:2/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(53:2/29) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(410),Device(0),Page(53:2/29),Diskblock(117),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(53:2/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 59018/250000[MMU][do_refer] address = 37003 offset = 139 page no = 36 Thread(36:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(36:4/RU) 21 Page(36:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(36:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(36:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(36:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(1:2/9)
[PageFaultHandler][do_handlePageFault] Frame(9) is dirty, do swap-out Thread(36:4/W0)
[PageFaultHandler][SwapOut] page Page(1:2/9) frame Frame(9)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 1
PageTableEntry][do_lock] iorb IORB(Id(411),Device(0),Page(1:2/9),Diskblock(193),FileWrite,Openfile(12:4/0),Thread(36:4/W1)) this Page(1:2/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTable][do_deallocateMemory] this Pagetable(Task(5/T))
[PageTable][do_deallocateMemory]  page_table_entry Page(26:5/2) frame_table_entry Frame(2)
[PageTableEntry][do_unlock] this Page(53:2/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(53:2/29) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 21323 offset = 843 page no = 20 Thread(27:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(27:2/RU) 22 Page(20:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(27:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(27:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(20:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(57:2/26)
[PageFaultHandler][do_handlePageFault] Frame(26) is dirty, do swap-out Thread(27:2/W0)
[PageFaultHandler][SwapOut] page Page(57:2/26) frame Frame(26)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 57
PageTableEntry][do_lock] iorb IORB(Id(412),Device(0),Page(57:2/26),Diskblock(121),FileWrite,Openfile(4:2/0),Thread(27:2/W1)) this Page(57:2/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:2/9)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(9) Page(1:2/9) Thread(36:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(36:4/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(36:4/9) do swap-in Thread(36:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(413),Device(0),Page(36:4/9),Diskblock(228),FileRead,Openfile(12:4/0),Thread(36:4/W1)) this Page(36:4/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(57:2/26)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(26) Page(57:2/26) Thread(27:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(20:2/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(20:2/26) do swap-in Thread(27:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(414),Device(0),Page(20:2/26),Diskblock(84),FileRead,Openfile(4:2/0),Thread(27:2/W1)) this Page(20:2/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(36:4/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(36:4/9) swap-in finish Thread(36:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(20:2/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(20:2/26) swap-in finish Thread(27:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageCleanDaemon][unleash] osp.Memory.PageCleanDaemon@1bf99cf5 execute time 60000
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(18)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(28)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(16)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(22)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(20)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(8)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(18)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(18) Page(11:4/18) isDirty true
[PageFaultHandler][SwapOut] file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 11
PageTableEntry][do_lock] iorb IORB(Id(415),Device(0),Page(11:4/18),Diskblock(203),FileWrite,Openfile(12:4/0),Thread(39:0/W1)) this Page(11:4/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 60020/250000[PageTableEntry][do_unlock] this Page(11:4/18)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(18) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(28)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(28) Page(58:2/28) isDirty true
[PageFaultHandler][SwapOut] file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 58
PageTableEntry][do_lock] iorb IORB(Id(416),Device(0),Page(58:2/28),Diskblock(122),FileWrite,Openfile(4:2/0),Thread(39:0/W1)) this Page(58:2/28)
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 61943 offset = 503 page no = 60 Thread(36:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(36:4/RU) 22 Page(60:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(36:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(36:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(60:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(36:4/9)
[PageFaultHandler][do_handlePageFault] set Page(60:4/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(60:4/9) do swap-in Thread(36:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(417),Device(0),Page(60:4/9),Diskblock(252),FileRead,Openfile(12:4/0),Thread(36:4/W1)) this Page(60:4/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(58:2/28)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(28) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(16)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(16) Page(12:4/16) isDirty true
[PageFaultHandler][SwapOut] file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 12
PageTableEntry][do_lock] iorb IORB(Id(418),Device(0),Page(12:4/16),Diskblock(204),FileWrite,Openfile(12:4/0),Thread(39:0/W1)) this Page(12:4/16)
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 17603 offset = 195 page no = 17 Thread(29:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(29:4/RU) 22 Page(17:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(29:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(29:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(17:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(26:4/10)
[PageFaultHandler][do_handlePageFault] set Page(17:4/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(17:4/10) do swap-in Thread(29:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(419),Device(0),Page(17:4/10),Diskblock(209),FileRead,Openfile(12:4/0),Thread(29:4/W1)) this Page(17:4/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(60:4/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(60:4/9) swap-in finish Thread(36:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(12:4/16)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(16) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(22)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(22) Page(62:2/22) isDirty true
[PageFaultHandler][SwapOut] file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 62
PageTableEntry][do_lock] iorb IORB(Id(420),Device(0),Page(62:2/22),Diskblock(126),FileWrite,Openfile(4:2/0),Thread(39:0/W1)) this Page(62:2/22)
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(17:4/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(17:4/10) swap-in finish Thread(29:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 51078 offset = 902 page no = 49 Thread(29:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(29:4/RU) 22 Page(49:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(29:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(29:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(49:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(17:4/10)
[PageFaultHandler][do_handlePageFault] Frame(10) is dirty, do swap-out Thread(29:4/W0)
[PageFaultHandler][SwapOut] page Page(17:4/10) frame Frame(10)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 17
PageTableEntry][do_lock] iorb IORB(Id(421),Device(0),Page(17:4/10),Diskblock(209),FileWrite,Openfile(12:4/0),Thread(29:4/W1)) this Page(17:4/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(62:2/22)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(22) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(20)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(20) Page(54:4/20) isDirty true
[PageFaultHandler][SwapOut] file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 54
PageTableEntry][do_lock] iorb IORB(Id(422),Device(0),Page(54:4/20),Diskblock(246),FileWrite,Openfile(12:4/0),Thread(39:0/W1)) this Page(54:4/20)
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 61005/250000[PageTableEntry][do_unlock] this Page(17:4/10)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(10) Page(17:4/10) Thread(29:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(49:4/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(49:4/10) do swap-in Thread(29:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(423),Device(0),Page(49:4/10),Diskblock(241),FileRead,Openfile(12:4/0),Thread(29:4/W1)) this Page(49:4/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(54:4/20)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(20) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(8)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(8) Page(9:4/8) isDirty true
[PageFaultHandler][SwapOut] file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 9
PageTableEntry][do_lock] iorb IORB(Id(424),Device(0),Page(9:4/8),Diskblock(201),FileWrite,Openfile(12:4/0),Thread(39:0/W1)) this Page(9:4/8)
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(49:4/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(49:4/10) swap-in finish Thread(29:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(9:4/8)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(8) finish
[MMU][do_refer] address = 51985 offset = 785 page no = 50 Thread(29:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(29:4/RU) 22 Page(50:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(29:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(29:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(50:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(23:4/15)
[PageFaultHandler][do_handlePageFault] set Page(50:4/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(50:4/15) do swap-in Thread(29:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(425),Device(0),Page(50:4/15),Diskblock(242),FileRead,Openfile(12:4/0),Thread(29:4/W1)) this Page(50:4/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 45178 offset = 122 page no = 44 Thread(41:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(41:4/RU) 21 Page(44:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(41:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(41:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(44:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(11:4/18)
[PageFaultHandler][do_handlePageFault] set Page(44:4/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(44:4/18) do swap-in Thread(41:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(426),Device(0),Page(44:4/18),Diskblock(236),FileRead,Openfile(12:4/0),Thread(41:4/W1)) this Page(44:4/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(50:4/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(50:4/15) swap-in finish Thread(29:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 62020/250000[PageTableEntry][do_unlock] this Page(44:4/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(44:4/18) swap-in finish Thread(41:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 60462 offset = 46 page no = 59 Thread(41:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(41:4/RU) 21 Page(59:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(41:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(41:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(59:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(44:4/18)
[PageFaultHandler][do_handlePageFault] set Page(59:4/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(59:4/18) do swap-in Thread(41:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(427),Device(0),Page(59:4/18),Diskblock(251),FileRead,Openfile(12:4/0),Thread(41:4/W1)) this Page(59:4/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 48448 offset = 320 page no = 47 Thread(29:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(29:4/RU) 22 Page(47:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(29:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(29:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(47:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(51:2/11)
[PageFaultHandler][do_handlePageFault] set Page(47:4/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(47:4/11) do swap-in Thread(29:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(428),Device(0),Page(47:4/11),Diskblock(239),FileRead,Openfile(12:4/0),Thread(29:4/W1)) this Page(47:4/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(59:4/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(59:4/18) swap-in finish Thread(41:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 51231 offset = 31 page no = 50 Thread(41:4/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 58868 offset = 500 page no = 57 Thread(41:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(41:4/RU) 22 Page(57:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(41:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(41:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(57:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(18:4/13)
[PageFaultHandler][do_handlePageFault] set Page(57:4/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(57:4/13) do swap-in Thread(41:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(429),Device(0),Page(57:4/13),Diskblock(249),FileRead,Openfile(12:4/0),Thread(41:4/W1)) this Page(57:4/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(47:4/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(47:4/11) swap-in finish Thread(29:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(57:4/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(57:4/13) swap-in finish Thread(41:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 18463 offset = 31 page no = 18 Thread(41:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(41:4/RU) 21 Page(18:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(41:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(41:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(18:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(47:4/11)
[PageFaultHandler][do_handlePageFault] Frame(11) is dirty, do swap-out Thread(41:4/W0)
[PageFaultHandler][SwapOut] page Page(47:4/11) frame Frame(11)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 47
PageTableEntry][do_lock] iorb IORB(Id(430),Device(0),Page(47:4/11),Diskblock(239),FileWrite,Openfile(12:4/0),Thread(41:4/W1)) this Page(47:4/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 38483 offset = 595 page no = 37 Thread(29:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(29:4/RU) 21 Page(37:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(29:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(29:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(37:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(62:2/22)
[PageFaultHandler][do_handlePageFault] set Page(37:4/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(37:4/22) do swap-in Thread(29:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(431),Device(0),Page(37:4/22),Diskblock(229),FileRead,Openfile(12:4/0),Thread(29:4/W1)) this Page(37:4/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(47:4/11)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(11) Page(47:4/11) Thread(41:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(18:4/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(18:4/11) do swap-in Thread(41:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(432),Device(0),Page(18:4/11),Diskblock(210),FileRead,Openfile(12:4/0),Thread(41:4/W1)) this Page(18:4/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 63120/250000[PageTableEntry][do_unlock] this Page(37:4/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(37:4/22) swap-in finish Thread(29:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 42457 offset = 473 page no = 41 Thread(29:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(29:4/RU) 21 Page(41:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(29:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(29:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(41:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(9:2/25)
[PageFaultHandler][do_handlePageFault] set Page(41:4/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(41:4/25) do swap-in Thread(29:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(433),Device(0),Page(41:4/25),Diskblock(233),FileRead,Openfile(12:4/0),Thread(29:4/W1)) this Page(41:4/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(18:4/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(18:4/11) swap-in finish Thread(41:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 63813 offset = 325 page no = 62 Thread(41:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(41:4/RU) 21 Page(62:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(41:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(41:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(62:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(28:2/23)
[PageFaultHandler][do_handlePageFault] set Page(62:4/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(62:4/23) do swap-in Thread(41:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(434),Device(0),Page(62:4/23),Diskblock(254),FileRead,Openfile(12:4/0),Thread(41:4/W1)) this Page(62:4/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(41:4/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(41:4/25) swap-in finish Thread(29:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(62:4/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(62:4/23) swap-in finish Thread(41:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 57201 offset = 881 page no = 55 Thread(41:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(41:4/RU) 22 Page(55:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(41:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(41:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(55:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(41:4/25)
[PageFaultHandler][do_handlePageFault] set Page(55:4/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(55:4/25) do swap-in Thread(41:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(435),Device(0),Page(55:4/25),Diskblock(247),FileRead,Openfile(12:4/0),Thread(41:4/W1)) this Page(55:4/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(55:4/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(55:4/25) swap-in finish Thread(41:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 4310 offset = 214 page no = 4 Thread(41:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(41:4/RU) 21 Page(4:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(41:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(41:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(4:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(9:4/8)
[PageFaultHandler][do_handlePageFault] set Page(4:4/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(4:4/8) do swap-in Thread(41:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(436),Device(0),Page(4:4/8),Diskblock(196),FileRead,Openfile(12:4/0),Thread(41:4/W1)) this Page(4:4/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 64003/250000[PageTableEntry][do_unlock] this Page(4:4/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(4:4/8) swap-in finish Thread(41:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 65042/250000Simulation progress: 66080/250000Simulation progress: 67021/250000Simulation progress: 68027/250000Simulation progress: 69020/250000Simulation progress: 70051/250000Simulation progress: 71005/250000Simulation progress: 72014/250000Simulation progress: 73040/250000[MMU][do_refer] address = 42586 offset = 602 page no = 41 Thread(33:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(33:2/RU) 22 Page(41:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(33:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(33:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(41:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(13:3/6)
[PageFaultHandler][do_handlePageFault] set Page(41:2/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(41:2/6) do swap-in Thread(33:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(437),Device(0),Page(41:2/6),Diskblock(105),FileRead,Openfile(4:2/0),Thread(33:2/W1)) this Page(41:2/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(41:2/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(41:2/6) swap-in finish Thread(33:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 74005/250000[MMU][do_refer] address = 17001 offset = 617 page no = 16 Thread(42:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(42:2/RU) 22 Page(16:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(42:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(42:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(16:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(35:4/0)
[PageFaultHandler][do_handlePageFault] Frame(0) is dirty, do swap-out Thread(42:2/W0)
[PageFaultHandler][SwapOut] page Page(35:4/0) frame Frame(0)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 35
PageTableEntry][do_lock] iorb IORB(Id(438),Device(0),Page(35:4/0),Diskblock(99),FileWrite,Openfile(4:2/0),Thread(42:2/W1)) this Page(35:4/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 11403 offset = 139 page no = 11 Thread(33:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(33:2/RU) 21 Page(11:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(33:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(33:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(11:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(25:2/19)
[PageFaultHandler][do_handlePageFault] Frame(19) is dirty, do swap-out Thread(33:2/W0)
[PageFaultHandler][SwapOut] page Page(25:2/19) frame Frame(19)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 25
PageTableEntry][do_lock] iorb IORB(Id(439),Device(0),Page(25:2/19),Diskblock(89),FileWrite,Openfile(4:2/0),Thread(33:2/W1)) this Page(25:2/19)
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(35:4/0)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(0) Page(35:4/0) Thread(42:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(16:2/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(16:2/0) do swap-in Thread(42:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(440),Device(0),Page(16:2/0),Diskblock(80),FileRead,Openfile(4:2/0),Thread(42:2/W1)) this Page(16:2/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(25:2/19)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(19) Page(25:2/19) Thread(33:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(11:2/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(11:2/19) do swap-in Thread(33:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(441),Device(0),Page(11:2/19),Diskblock(75),FileRead,Openfile(4:2/0),Thread(33:2/W1)) this Page(11:2/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:2/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(16:2/0) swap-in finish Thread(42:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(11:2/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(11:2/19) swap-in finish Thread(33:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 58280 offset = 936 page no = 56 Thread(33:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(33:2/RU) 22 Page(56:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(33:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(33:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(56:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(11:2/19)
[PageFaultHandler][do_handlePageFault] set Page(56:2/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(56:2/19) do swap-in Thread(33:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(442),Device(0),Page(56:2/19),Diskblock(120),FileRead,Openfile(4:2/0),Thread(33:2/W1)) this Page(56:2/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(56:2/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(56:2/19) swap-in finish Thread(33:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 75034/250000PageTableEntry][do_lock] iorb IORB(Id(443),Device(1),Page(0:2/null),Diskblock(9),FileRead,Openfile(54:2/1),Thread(33:2/W0)) this Page(0:2/null)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] validating_thread is null, handlePageFault
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(33:2/W0) 23 Page(0:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(33:2/W0) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(33:2/W1) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(0:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(20:4/1)
[PageFaultHandler][do_handlePageFault] set Page(0:2/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(0:2/1) do swap-in Thread(33:2/W1)
PageTableEntry][do_lock] iorb IORB(Id(444),Device(0),Page(0:2/1),Diskblock(64),FileRead,Openfile(4:2/0),Thread(33:2/W2)) this Page(0:2/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:2/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(0:2/1) swap-in finish Thread(33:2/W1)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:2/1)
PageTableEntry][do_lock] iorb IORB(Id(445),Device(1),Page(0:2/1),Diskblock(22),FileWrite,Openfile(56:2/1),Thread(45:2/W0)) this Page(0:2/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:2/1)
[MMU][do_refer] address = 37542 offset = 678 page no = 36 Thread(46:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(46:2/RU) 21 Page(36:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(46:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(46:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(36:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] set Page(36:2/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(36:2/2) do swap-in Thread(46:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(446),Device(0),Page(36:2/2),Diskblock(100),FileRead,Openfile(4:2/0),Thread(46:2/W1)) this Page(36:2/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(36:2/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(36:2/2) swap-in finish Thread(46:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 52253 offset = 29 page no = 51 Thread(45:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(45:2/RU) 22 Page(51:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(45:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(45:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(51:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(50:2/21)
[PageFaultHandler][do_handlePageFault] set Page(51:2/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(51:2/21) do swap-in Thread(45:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(447),Device(0),Page(51:2/21),Diskblock(115),FileRead,Openfile(4:2/0),Thread(45:2/W1)) this Page(51:2/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 22260 offset = 756 page no = 21 Thread(44:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(44:2/RU) 22 Page(21:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(44:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(44:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(21:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(10:2/17)
[PageFaultHandler][do_handlePageFault] set Page(21:2/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(21:2/17) do swap-in Thread(44:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(448),Device(0),Page(21:2/17),Diskblock(85),FileRead,Openfile(4:2/0),Thread(44:2/W1)) this Page(21:2/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(51:2/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(51:2/21) swap-in finish Thread(45:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 61324 offset = 908 page no = 59 Thread(33:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(33:2/RU) 21 Page(59:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(33:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(33:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(59:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(33:4/24)
[PageFaultHandler][do_handlePageFault] set Page(59:2/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(59:2/24) do swap-in Thread(33:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(449),Device(0),Page(59:2/24),Diskblock(123),FileRead,Openfile(4:2/0),Thread(33:2/W1)) this Page(59:2/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(21:2/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(21:2/17) swap-in finish Thread(44:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 76020/250000PageTableEntry][do_lock] iorb IORB(Id(450),Device(1),Page(0:2/1),Diskblock(24),FileWrite,Openfile(56:2/1),Thread(46:2/W0)) this Page(0:2/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 63661 offset = 173 page no = 62 Thread(44:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(44:2/RU) 21 Page(62:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(44:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(44:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(62:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(21:2/17)
[PageFaultHandler][do_handlePageFault] Frame(17) is dirty, do swap-out Thread(44:2/W0)
[PageFaultHandler][SwapOut] page Page(21:2/17) frame Frame(17)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 21
PageTableEntry][do_lock] iorb IORB(Id(451),Device(0),Page(21:2/17),Diskblock(85),FileWrite,Openfile(4:2/0),Thread(44:2/W1)) this Page(21:2/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:2/1)
[PageTableEntry][do_unlock] this Page(59:2/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(59:2/24) swap-in finish Thread(33:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 10074 offset = 858 page no = 9 Thread(45:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(45:2/RU) 22 Page(9:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(45:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(45:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(9:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(7:2/27)
[PageFaultHandler][do_handlePageFault] set Page(9:2/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(9:2/27) do swap-in Thread(45:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(452),Device(0),Page(9:2/27),Diskblock(73),FileRead,Openfile(4:2/0),Thread(45:2/W1)) this Page(9:2/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(21:2/17)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(17) Page(21:2/17) Thread(44:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(62:2/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(62:2/17) do swap-in Thread(44:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(453),Device(0),Page(62:2/17),Diskblock(126),FileRead,Openfile(4:2/0),Thread(44:2/W1)) this Page(62:2/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 33815 offset = 23 page no = 33 Thread(46:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(46:2/RU) 22 Page(33:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(46:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(46:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(7) for Page(33:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(7) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(19:2/7)
[PageFaultHandler][do_handlePageFault] set Page(33:2/null) and Frame(7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(33:2/7) do swap-in Thread(46:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(454),Device(0),Page(33:2/7),Diskblock(97),FileRead,Openfile(4:2/0),Thread(46:2/W1)) this Page(33:2/7)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(9:2/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(9:2/27) swap-in finish Thread(45:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 36401 offset = 561 page no = 35 Thread(45:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(45:2/RU) 21 Page(35:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(45:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(45:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(35:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(42:4/12)
[PageFaultHandler][do_handlePageFault] Frame(12) is dirty, do swap-out Thread(45:2/W0)
[PageFaultHandler][SwapOut] page Page(42:4/12) frame Frame(12)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 42
PageTableEntry][do_lock] iorb IORB(Id(455),Device(0),Page(42:4/12),Diskblock(106),FileWrite,Openfile(4:2/0),Thread(45:2/W1)) this Page(42:4/12)
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(62:2/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(62:2/17) swap-in finish Thread(44:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(33:2/7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(33:2/7) swap-in finish Thread(46:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 11529 offset = 265 page no = 11 Thread(44:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(44:2/RU) 21 Page(11:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(44:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(44:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(7) for Page(11:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(7) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(33:2/7)
[PageFaultHandler][do_handlePageFault] Frame(7) is dirty, do swap-out Thread(44:2/W0)
[PageFaultHandler][SwapOut] page Page(33:2/7) frame Frame(7)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 33
PageTableEntry][do_lock] iorb IORB(Id(456),Device(0),Page(33:2/7),Diskblock(97),FileWrite,Openfile(4:2/0),Thread(44:2/W1)) this Page(33:2/7)
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 59756 offset = 364 page no = 58 Thread(46:2/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(42:4/12)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(12) Page(42:4/12) Thread(45:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(35:2/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(35:2/12) do swap-in Thread(45:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(457),Device(0),Page(35:2/12),Diskblock(99),FileRead,Openfile(4:2/0),Thread(45:2/W1)) this Page(35:2/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(33:2/7)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(7) Page(33:2/7) Thread(44:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(11:2/null) and Frame(7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(11:2/7) do swap-in Thread(44:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(458),Device(0),Page(11:2/7),Diskblock(75),FileRead,Openfile(4:2/0),Thread(44:2/W1)) this Page(11:2/7)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(459),Device(1),Page(0:2/1),Diskblock(22),FileRead,Openfile(56:2/1),Thread(46:2/W0)) this Page(0:2/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:2/1)
[PageTableEntry][do_unlock] this Page(35:2/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(35:2/12) swap-in finish Thread(45:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(11:2/7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(11:2/7) swap-in finish Thread(44:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 77008/250000[MMU][do_refer] address = 19639 offset = 183 page no = 19 Thread(46:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(46:2/RU) 21 Page(19:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(46:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(46:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(19:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(35:2/12)
[PageFaultHandler][do_handlePageFault] set Page(19:2/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(19:2/12) do swap-in Thread(46:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(460),Device(0),Page(19:2/12),Diskblock(83),FileRead,Openfile(4:2/0),Thread(46:2/W1)) this Page(19:2/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 64769 offset = 257 page no = 63 Thread(44:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(44:2/RU) 22 Page(63:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(44:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(44:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(63:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(1:4/5)
[PageFaultHandler][do_handlePageFault] Frame(5) is dirty, do swap-out Thread(44:2/W0)
[PageFaultHandler][SwapOut] page Page(1:4/5) frame Frame(5)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 1
PageTableEntry][do_lock] iorb IORB(Id(461),Device(0),Page(1:4/5),Diskblock(65),FileWrite,Openfile(4:2/0),Thread(44:2/W1)) this Page(1:4/5)
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(19:2/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(19:2/12) swap-in finish Thread(46:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 44277 offset = 245 page no = 43 Thread(45:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(45:2/RU) 22 Page(43:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(45:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(45:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(43:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(60:4/9)
[PageFaultHandler][do_handlePageFault] Frame(9) is dirty, do swap-out Thread(45:2/W0)
[PageFaultHandler][SwapOut] page Page(60:4/9) frame Frame(9)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 60
PageTableEntry][do_lock] iorb IORB(Id(462),Device(0),Page(60:4/9),Diskblock(124),FileWrite,Openfile(4:2/0),Thread(45:2/W1)) this Page(60:4/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:4/5)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(5) Page(1:4/5) Thread(44:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(63:2/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(63:2/5) do swap-in Thread(44:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(463),Device(0),Page(63:2/5),Diskblock(127),FileRead,Openfile(4:2/0),Thread(44:2/W1)) this Page(63:2/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(464),Device(1),Page(0:2/1),Diskblock(22),FileRead,Openfile(56:2/1),Thread(46:2/W0)) this Page(0:2/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(60:4/9)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(9) Page(60:4/9) Thread(45:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(43:2/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(43:2/9) do swap-in Thread(45:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(465),Device(0),Page(43:2/9),Diskblock(107),FileRead,Openfile(4:2/0),Thread(45:2/W1)) this Page(43:2/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:2/1)
[PageTableEntry][do_unlock] this Page(63:2/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(63:2/5) swap-in finish Thread(44:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(43:2/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(43:2/9) swap-in finish Thread(45:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 78024/250000[MMU][do_refer] address = 45117 offset = 61 page no = 44 Thread(46:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(46:2/RU) 22 Page(44:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(46:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(46:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(44:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(63:2/5)
[PageFaultHandler][do_handlePageFault] Frame(5) is dirty, do swap-out Thread(46:2/W0)
[PageFaultHandler][SwapOut] page Page(63:2/5) frame Frame(5)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 63
PageTableEntry][do_lock] iorb IORB(Id(466),Device(0),Page(63:2/5),Diskblock(127),FileWrite,Openfile(4:2/0),Thread(46:2/W1)) this Page(63:2/5)
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(63:2/5)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(5) Page(63:2/5) Thread(46:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(44:2/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(44:2/5) do swap-in Thread(46:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(467),Device(0),Page(44:2/5),Diskblock(108),FileRead,Openfile(4:2/0),Thread(46:2/W1)) this Page(44:2/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 28851 offset = 179 page no = 28 Thread(44:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(44:2/RU) 21 Page(28:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(44:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(44:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(28:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(49:4/10)
[PageFaultHandler][do_handlePageFault] Frame(10) is dirty, do swap-out Thread(44:2/W0)
[PageFaultHandler][SwapOut] page Page(49:4/10) frame Frame(10)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 49
PageTableEntry][do_lock] iorb IORB(Id(468),Device(0),Page(49:4/10),Diskblock(113),FileWrite,Openfile(4:2/0),Thread(44:2/W1)) this Page(49:4/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(44:2/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(44:2/5) swap-in finish Thread(46:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 33473 offset = 705 page no = 32 Thread(45:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(45:2/RU) 22 Page(32:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(45:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(45:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(32:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(50:4/15)
[PageFaultHandler][do_handlePageFault] Frame(15) is dirty, do swap-out Thread(45:2/W0)
[PageFaultHandler][SwapOut] page Page(50:4/15) frame Frame(15)file Openfile(4:2/0)
[PageFaultHandler][SwapOut] block no 50
PageTableEntry][do_lock] iorb IORB(Id(469),Device(0),Page(50:4/15),Diskblock(114),FileWrite,Openfile(4:2/0),Thread(45:2/W1)) this Page(50:4/15)
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(49:4/10)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(10) Page(49:4/10) Thread(44:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(28:2/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(28:2/10) do swap-in Thread(44:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(470),Device(0),Page(28:2/10),Diskblock(92),FileRead,Openfile(4:2/0),Thread(44:2/W1)) this Page(28:2/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 13636 offset = 324 page no = 13 Thread(46:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(46:2/RU) 21 Page(13:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(46:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(46:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(13:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(58:2/28)
[PageFaultHandler][do_handlePageFault] set Page(13:2/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(13:2/28) do swap-in Thread(46:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(471),Device(0),Page(13:2/28),Diskblock(77),FileRead,Openfile(4:2/0),Thread(46:2/W1)) this Page(13:2/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 3636 offset = 564 page no = 3 Thread(26:2/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(26:2/RU) 22 Page(3:2/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(26:2/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(26:2/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(3:2/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(2/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(59:4/18)
[PageFaultHandler][do_handlePageFault] set Page(3:2/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(3:2/18) do swap-in Thread(26:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(472),Device(0),Page(3:2/18),Diskblock(67),FileRead,Openfile(4:2/0),Thread(26:2/W1)) this Page(3:2/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(50:4/15)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(15) Page(50:4/15) Thread(45:2/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(32:2/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(32:2/15) do swap-in Thread(45:2/W0)
PageTableEntry][do_lock] iorb IORB(Id(473),Device(0),Page(32:2/15),Diskblock(96),FileRead,Openfile(4:2/0),Thread(45:2/W1)) this Page(32:2/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(28:2/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(28:2/10) swap-in finish Thread(44:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(13:2/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(13:2/28) swap-in finish Thread(46:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(3:2/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(3:2/18) swap-in finish Thread(26:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(32:2/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(32:2/15) swap-in finish Thread(45:2/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTable][do_deallocateMemory] this Pagetable(Task(2/T))
[PageTable][do_deallocateMemory]  page_table_entry Page(0:2/1) frame_table_entry Frame(1)
[PageTable][do_deallocateMemory]  page_table_entry Page(3:2/18) frame_table_entry Frame(18)
[PageTable][do_deallocateMemory]  page_table_entry Page(8:2/4) frame_table_entry Frame(4)
[PageTable][do_deallocateMemory]  page_table_entry Page(9:2/27) frame_table_entry Frame(27)
[PageTable][do_deallocateMemory]  page_table_entry Page(11:2/7) frame_table_entry Frame(7)
[PageTable][do_deallocateMemory]  page_table_entry Page(13:2/28) frame_table_entry Frame(28)
[PageTable][do_deallocateMemory]  page_table_entry Page(16:2/0) frame_table_entry Frame(0)
[PageTable][do_deallocateMemory]  page_table_entry Page(19:2/12) frame_table_entry Frame(12)
[PageTable][do_deallocateMemory]  page_table_entry Page(20:2/26) frame_table_entry Frame(26)
[PageTable][do_deallocateMemory]  page_table_entry Page(28:2/10) frame_table_entry Frame(10)
[PageTable][do_deallocateMemory]  page_table_entry Page(31:2/14) frame_table_entry Frame(14)
[PageTable][do_deallocateMemory]  page_table_entry Page(32:2/15) frame_table_entry Frame(15)
[PageTable][do_deallocateMemory]  page_table_entry Page(36:2/2) frame_table_entry Frame(2)
[PageTable][do_deallocateMemory]  page_table_entry Page(41:2/6) frame_table_entry Frame(6)
[PageTable][do_deallocateMemory]  page_table_entry Page(43:2/9) frame_table_entry Frame(9)
[PageTable][do_deallocateMemory]  page_table_entry Page(44:2/5) frame_table_entry Frame(5)
[PageTable][do_deallocateMemory]  page_table_entry Page(51:2/21) frame_table_entry Frame(21)
[PageTable][do_deallocateMemory]  page_table_entry Page(53:2/29) frame_table_entry Frame(29)
[PageTable][do_deallocateMemory]  page_table_entry Page(56:2/19) frame_table_entry Frame(19)
[PageTable][do_deallocateMemory]  page_table_entry Page(59:2/24) frame_table_entry Frame(24)
[PageTable][do_deallocateMemory]  page_table_entry Page(62:2/17) frame_table_entry Frame(17)
Simulation progress: 79059/250000[MMU][do_refer] address = 62452 offset = 1012 page no = 60 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 22 Page(60:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(60:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] set Page(60:3/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(60:3/10) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(474),Device(0),Page(60:3/10),Diskblock(188),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(60:3/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 62017 offset = 577 page no = 60 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 22 Page(60:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(60:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(57:4/13)
[PageFaultHandler][do_handlePageFault] Frame(13) is dirty, do swap-out Thread(48:6/W0)
[PageFaultHandler][SwapOut] page Page(57:4/13) frame Frame(13)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 57
PageTableEntry][do_lock] iorb IORB(Id(475),Device(0),Page(57:4/13),Diskblock(57),FileWrite,Openfile(60:6/0),Thread(48:6/W1)) this Page(57:4/13)
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 8966 offset = 774 page no = 8 Thread(47:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(47:3/RU) 21 Page(8:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(47:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(47:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(8:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(37:4/22)
[PageFaultHandler][do_handlePageFault] set Page(8:3/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(8:3/22) do swap-in Thread(47:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(476),Device(0),Page(8:3/22),Diskblock(136),FileRead,Openfile(10:3/0),Thread(47:3/W1)) this Page(8:3/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(60:3/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(60:3/10) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(57:4/13)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(13) Page(57:4/13) Thread(48:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(60:6/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(60:6/13) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(477),Device(0),Page(60:6/13),Diskblock(60),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(60:6/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 45091 offset = 35 page no = 44 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 21 Page(44:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(44:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(18:4/11)
[PageFaultHandler][do_handlePageFault] set Page(44:3/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(44:3/11) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(478),Device(0),Page(44:3/11),Diskblock(172),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(44:3/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(8:3/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(8:3/22) swap-in finish Thread(47:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(60:6/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(60:6/13) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(44:3/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(44:3/11) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageCleanDaemon][unleash] osp.Memory.PageCleanDaemon@1bf99cf5 execute time 80000
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(13)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(25)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(10)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(13)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(13) Page(60:6/13) isDirty true
[PageFaultHandler][SwapOut] file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 60
PageTableEntry][do_lock] iorb IORB(Id(479),Device(0),Page(60:6/13),Diskblock(60),FileWrite,Openfile(60:6/0),Thread(53:0/W1)) this Page(60:6/13)
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 80005/250000[MMU][do_refer] address = 49677 offset = 525 page no = 48 Thread(47:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(47:3/RU) 22 Page(48:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(47:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(47:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(48:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(62:4/23)
[PageFaultHandler][do_handlePageFault] set Page(48:3/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(48:3/23) do swap-in Thread(47:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(480),Device(0),Page(48:3/23),Diskblock(176),FileRead,Openfile(10:3/0),Thread(47:3/W1)) this Page(48:3/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(60:6/13)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(13) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(25)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(25) Page(55:4/25) isDirty true
[PageFaultHandler][SwapOut] file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 55
PageTableEntry][do_lock] iorb IORB(Id(481),Device(0),Page(55:4/25),Diskblock(247),FileWrite,Openfile(12:4/0),Thread(53:0/W1)) this Page(55:4/25)
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 54138 offset = 890 page no = 52 Thread(51:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(51:3/RU) 22 Page(52:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(51:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(51:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(52:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(60:6/13)
[PageFaultHandler][do_handlePageFault] set Page(52:3/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(52:3/13) do swap-in Thread(51:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(482),Device(0),Page(52:3/13),Diskblock(180),FileRead,Openfile(10:3/0),Thread(51:3/W1)) this Page(52:3/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 44513 offset = 481 page no = 43 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 22 Page(43:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(43:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(4:4/8)
[PageFaultHandler][do_handlePageFault] set Page(43:3/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(43:3/8) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(483),Device(0),Page(43:3/8),Diskblock(171),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(43:3/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 59097 offset = 729 page no = 57 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 21 Page(57:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(57:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] set Page(57:6/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(57:6/6) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(484),Device(0),Page(57:6/6),Diskblock(57),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(57:6/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 60823 offset = 407 page no = 59 Thread(50:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(50:3/RU) 22 Page(59:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(50:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(50:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(59:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] set Page(59:3/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(59:3/0) do swap-in Thread(50:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(485),Device(0),Page(59:3/0),Diskblock(187),FileRead,Openfile(10:3/0),Thread(50:3/W1)) this Page(59:3/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(48:3/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(48:3/23) swap-in finish Thread(47:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 4583 offset = 487 page no = 4 Thread(52:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(52:3/RU) 22 Page(4:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(52:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(52:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(4:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] set Page(4:3/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(4:3/4) do swap-in Thread(52:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(486),Device(0),Page(4:3/4),Diskblock(132),FileRead,Openfile(10:3/0),Thread(52:3/W1)) this Page(4:3/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(55:4/25)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(25) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(10)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(10) Page(60:3/10) isDirty true
[PageFaultHandler][SwapOut] file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 60
PageTableEntry][do_lock] iorb IORB(Id(487),Device(0),Page(60:3/10),Diskblock(188),FileWrite,Openfile(10:3/0),Thread(53:0/W1)) this Page(60:3/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(52:3/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(52:3/13) swap-in finish Thread(51:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 9908 offset = 692 page no = 9 Thread(47:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(47:3/RU) 21 Page(9:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(47:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(47:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(9:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(55:4/25)
[PageFaultHandler][do_handlePageFault] set Page(9:3/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(9:3/25) do swap-in Thread(47:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(488),Device(0),Page(9:3/25),Diskblock(137),FileRead,Openfile(10:3/0),Thread(47:3/W1)) this Page(9:3/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 7502 offset = 334 page no = 7 Thread(51:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(51:3/RU) 21 Page(7:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(51:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(51:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(7:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] set Page(7:3/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(7:3/19) do swap-in Thread(51:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(489),Device(0),Page(7:3/19),Diskblock(135),FileRead,Openfile(10:3/0),Thread(51:3/W1)) this Page(7:3/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(43:3/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(43:3/8) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(57:6/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(57:6/6) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 8499 offset = 307 page no = 8 Thread(55:3/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 46304 offset = 224 page no = 45 Thread(55:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(55:3/RU) 22 Page(45:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(55:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(55:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(45:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(43:3/8)
[PageFaultHandler][do_handlePageFault] Frame(8) is dirty, do swap-out Thread(55:3/W0)
[PageFaultHandler][SwapOut] page Page(43:3/8) frame Frame(8)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 43
PageTableEntry][do_lock] iorb IORB(Id(490),Device(0),Page(43:3/8),Diskblock(171),FileWrite,Openfile(10:3/0),Thread(55:3/W1)) this Page(43:3/8)
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 23984 offset = 432 page no = 23 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 22 Page(23:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(23:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(57:6/6)
[PageFaultHandler][do_handlePageFault] set Page(23:6/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(23:6/6) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(491),Device(0),Page(23:6/6),Diskblock(23),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(23:6/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 81035/250000[PageTableEntry][do_unlock] this Page(59:3/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(59:3/0) swap-in finish Thread(50:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(4:3/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(4:3/4) swap-in finish Thread(52:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 41172 offset = 212 page no = 40 Thread(50:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(50:3/RU) 21 Page(40:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(50:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(50:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(40:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(4:3/4)
[PageFaultHandler][do_handlePageFault] Frame(4) is dirty, do swap-out Thread(50:3/W0)
[PageFaultHandler][SwapOut] page Page(4:3/4) frame Frame(4)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 4
PageTableEntry][do_lock] iorb IORB(Id(492),Device(0),Page(4:3/4),Diskblock(132),FileWrite,Openfile(10:3/0),Thread(50:3/W1)) this Page(4:3/4)
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(60:3/10)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(10) finish
[PageTableEntry][do_unlock] this Page(9:3/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(9:3/25) swap-in finish Thread(47:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(7:3/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(7:3/19) swap-in finish Thread(51:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 36531 offset = 691 page no = 35 Thread(31:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(31:4/RU) 22 Page(35:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(31:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(31:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(35:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] set Page(35:4/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(35:4/1) do swap-in Thread(31:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(493),Device(0),Page(35:4/1),Diskblock(227),FileRead,Openfile(12:4/0),Thread(31:4/W1)) this Page(35:4/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(43:3/8)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(8) Page(43:3/8) Thread(55:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(45:3/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(45:3/8) do swap-in Thread(55:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(494),Device(0),Page(45:3/8),Diskblock(173),FileRead,Openfile(10:3/0),Thread(55:3/W1)) this Page(45:3/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(23:6/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(23:6/6) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 40867 offset = 931 page no = 39 Thread(47:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(47:3/RU) 21 Page(39:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(47:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(47:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(39:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(23:6/6)
[PageFaultHandler][do_handlePageFault] Frame(6) is dirty, do swap-out Thread(47:3/W0)
[PageFaultHandler][SwapOut] page Page(23:6/6) frame Frame(6)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 23
PageTableEntry][do_lock] iorb IORB(Id(495),Device(0),Page(23:6/6),Diskblock(151),FileWrite,Openfile(10:3/0),Thread(47:3/W1)) this Page(23:6/6)
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 48142 offset = 14 page no = 47 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 21 Page(47:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(47:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] set Page(47:3/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(47:3/24) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(496),Device(0),Page(47:3/24),Diskblock(175),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(47:3/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(4:3/4)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(4) Page(4:3/4) Thread(50:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(40:3/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(40:3/4) do swap-in Thread(50:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(497),Device(0),Page(40:3/4),Diskblock(168),FileRead,Openfile(10:3/0),Thread(50:3/W1)) this Page(40:3/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 44620 offset = 588 page no = 43 Thread(51:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(51:3/RU) 21 Page(43:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(51:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(51:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(43:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] set Page(43:3/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(43:3/27) do swap-in Thread(51:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(498),Device(0),Page(43:3/27),Diskblock(171),FileRead,Openfile(10:3/0),Thread(51:3/W1)) this Page(43:3/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 82040/250000[MMU][do_refer] address = 48691 offset = 563 page no = 47 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 22 Page(47:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(47:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] set Page(47:6/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(47:6/17) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(499),Device(0),Page(47:6/17),Diskblock(47),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(47:6/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(35:4/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(35:4/1) swap-in finish Thread(31:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 64729 offset = 217 page no = 63 Thread(31:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(31:4/RU) 22 Page(63:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(31:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(31:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(63:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(35:4/1)
[PageFaultHandler][do_handlePageFault] Frame(1) is dirty, do swap-out Thread(31:4/W0)
[PageFaultHandler][SwapOut] page Page(35:4/1) frame Frame(1)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 35
PageTableEntry][do_lock] iorb IORB(Id(500),Device(0),Page(35:4/1),Diskblock(227),FileWrite,Openfile(12:4/0),Thread(31:4/W1)) this Page(35:4/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(45:3/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(45:3/8) swap-in finish Thread(55:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(23:6/6)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(6) Page(23:6/6) Thread(47:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(39:3/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(39:3/6) do swap-in Thread(47:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(501),Device(0),Page(39:3/6),Diskblock(167),FileRead,Openfile(10:3/0),Thread(47:3/W1)) this Page(39:3/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(47:3/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(47:3/24) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(40:3/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(40:3/4) swap-in finish Thread(50:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 50559 offset = 383 page no = 49 Thread(55:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(55:3/RU) 21 Page(49:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(55:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(55:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(49:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(45:3/8)
[PageFaultHandler][do_handlePageFault] Frame(8) is dirty, do swap-out Thread(55:3/W0)
[PageFaultHandler][SwapOut] page Page(45:3/8) frame Frame(8)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 45
PageTableEntry][do_lock] iorb IORB(Id(502),Device(0),Page(45:3/8),Diskblock(173),FileWrite,Openfile(10:3/0),Thread(55:3/W1)) this Page(45:3/8)
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 48503 offset = 375 page no = 47 Thread(50:3/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(43:3/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(43:3/27) swap-in finish Thread(51:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(47:6/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(47:6/17) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 83019/250000[MMU][do_refer] address = 50730 offset = 554 page no = 49 Thread(50:3/RU)
[PageTableEntry][do_unlock] this Page(35:4/1)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(1) Page(35:4/1) Thread(31:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(63:4/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(63:4/1) do swap-in Thread(31:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(503),Device(0),Page(63:4/1),Diskblock(255),FileRead,Openfile(12:4/0),Thread(31:4/W1)) this Page(63:4/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(39:3/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(39:3/6) swap-in finish Thread(47:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 42351 offset = 367 page no = 41 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 22 Page(41:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(41:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(43:3/27)
[PageFaultHandler][do_handlePageFault] set Page(41:3/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(41:3/27) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(504),Device(0),Page(41:3/27),Diskblock(169),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(41:3/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(505),Device(1),Page(0:6/null),Diskblock(8),FileWrite,Openfile(64:3/1),Thread(48:6/W0)) this Page(0:6/null)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] validating_thread is null, handlePageFault
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/W0) 23 Page(0:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W1) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(0:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] set Page(0:6/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(0:6/26) do swap-in Thread(48:6/W1)
PageTableEntry][do_lock] iorb IORB(Id(506),Device(0),Page(0:6/26),Diskblock(0),FileRead,Openfile(60:6/0),Thread(48:6/W2)) this Page(0:6/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(45:3/8)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(8) Page(45:3/8) Thread(55:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(49:3/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(49:3/8) do swap-in Thread(55:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(507),Device(0),Page(49:3/8),Diskblock(177),FileRead,Openfile(10:3/0),Thread(55:3/W1)) this Page(49:3/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(508),Device(1),Page(7:3/19),Diskblock(27),FileWrite,Openfile(64:3/1),Thread(47:3/W0)) this Page(7:3/19)
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 65517 offset = 1005 page no = 63 Thread(49:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(49:3/RU) 22 Page(63:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(49:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(49:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(63:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] set Page(63:3/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(63:3/12) do swap-in Thread(49:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(509),Device(0),Page(63:3/12),Diskblock(191),FileRead,Openfile(10:3/0),Thread(49:3/W1)) this Page(63:3/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(7:3/19)
[MMU][do_refer] address = 2003 offset = 979 page no = 1 Thread(47:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(47:3/RU) 21 Page(1:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(47:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(47:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(1:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] set Page(1:3/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(1:3/14) do swap-in Thread(47:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(510),Device(0),Page(1:3/14),Diskblock(129),FileRead,Openfile(10:3/0),Thread(47:3/W1)) this Page(1:3/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 56148 offset = 852 page no = 54 Thread(51:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(51:3/RU) 21 Page(54:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(51:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(51:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(54:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] set Page(54:3/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(54:3/5) do swap-in Thread(51:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(511),Device(0),Page(54:3/5),Diskblock(182),FileRead,Openfile(10:3/0),Thread(51:3/W1)) this Page(54:3/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(63:4/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(63:4/1) swap-in finish Thread(31:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(41:3/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(41:3/27) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 54221 offset = 973 page no = 52 Thread(14:3/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(0:6/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(0:6/26) swap-in finish Thread(48:6/W1)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:6/26)
Simulation progress: 84016/250000[MMU][do_refer] address = 36791 offset = 951 page no = 35 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 22 Page(35:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(35:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] set Page(35:3/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(35:3/15) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(512),Device(0),Page(35:3/15),Diskblock(163),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(35:3/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 56819 offset = 499 page no = 55 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 22 Page(55:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(55:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] set Page(55:6/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(55:6/18) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(513),Device(0),Page(55:6/18),Diskblock(55),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(55:6/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 20407 offset = 951 page no = 19 Thread(31:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(31:4/RU) 22 Page(19:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(31:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(31:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(19:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(12:4/16)
[PageFaultHandler][do_handlePageFault] set Page(19:4/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(19:4/16) do swap-in Thread(31:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(514),Device(0),Page(19:4/16),Diskblock(211),FileRead,Openfile(12:4/0),Thread(31:4/W1)) this Page(19:4/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(49:3/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(49:3/8) swap-in finish Thread(55:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(63:3/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(63:3/12) swap-in finish Thread(49:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(1:3/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(1:3/14) swap-in finish Thread(47:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(54:3/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(54:3/5) swap-in finish Thread(51:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 2540 offset = 492 page no = 2 Thread(50:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(50:3/RU) 21 Page(2:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(50:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(50:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(2:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(63:3/12)
[PageFaultHandler][do_handlePageFault] Frame(12) is dirty, do swap-out Thread(50:3/W0)
[PageFaultHandler][SwapOut] page Page(63:3/12) frame Frame(12)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 63
PageTableEntry][do_lock] iorb IORB(Id(515),Device(0),Page(63:3/12),Diskblock(191),FileWrite,Openfile(10:3/0),Thread(50:3/W1)) this Page(63:3/12)
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(35:3/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(35:3/15) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 39644 offset = 732 page no = 38 Thread(49:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(49:3/RU) 22 Page(38:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(49:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(49:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(38:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(54:3/5)
[PageFaultHandler][do_handlePageFault] set Page(38:3/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(38:3/5) do swap-in Thread(49:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(516),Device(0),Page(38:3/5),Diskblock(166),FileRead,Openfile(10:3/0),Thread(49:3/W1)) this Page(38:3/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(55:6/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(55:6/18) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 44333 offset = 301 page no = 43 Thread(51:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(51:3/RU) 22 Page(43:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(51:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(51:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(43:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(35:3/15)
[PageFaultHandler][do_handlePageFault] Frame(15) is dirty, do swap-out Thread(51:3/W0)
[PageFaultHandler][SwapOut] page Page(35:3/15) frame Frame(15)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 35
PageTableEntry][do_lock] iorb IORB(Id(517),Device(0),Page(35:3/15),Diskblock(163),FileWrite,Openfile(10:3/0),Thread(51:3/W1)) this Page(35:3/15)
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 12047 offset = 783 page no = 11 Thread(47:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(47:3/RU) 22 Page(11:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(47:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(47:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(11:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(60:3/10)
[PageFaultHandler][do_handlePageFault] set Page(11:3/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(11:3/10) do swap-in Thread(47:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(518),Device(0),Page(11:3/10),Diskblock(139),FileRead,Openfile(10:3/0),Thread(47:3/W1)) this Page(11:3/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 52890 offset = 666 page no = 51 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 21 Page(51:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(51:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(54:4/20)
[PageFaultHandler][do_handlePageFault] set Page(51:3/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(51:3/20) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(519),Device(0),Page(51:3/20),Diskblock(179),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(51:3/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 85010/250000[PageTableEntry][do_unlock] this Page(19:4/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(19:4/16) swap-in finish Thread(31:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 48307 offset = 179 page no = 47 Thread(48:6/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 17837 offset = 429 page no = 17 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 21 Page(17:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(17:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(52:3/13)
[PageFaultHandler][do_handlePageFault] Frame(13) is dirty, do swap-out Thread(48:6/W0)
[PageFaultHandler][SwapOut] page Page(52:3/13) frame Frame(13)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 52
PageTableEntry][do_lock] iorb IORB(Id(520),Device(0),Page(52:3/13),Diskblock(52),FileWrite,Openfile(60:6/0),Thread(48:6/W1)) this Page(52:3/13)
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(521),Device(1),Page(0:3/null),Diskblock(4),FileRead,Openfile(66:3/1),Thread(55:3/W0)) this Page(0:3/null)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] validating_thread is null, handlePageFault
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(55:3/W0) 23 Page(0:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(55:3/W0) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(55:3/W1) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(0:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(59:3/0)
[PageFaultHandler][do_handlePageFault] Frame(0) is dirty, do swap-out Thread(55:3/W1)
[PageFaultHandler][SwapOut] page Page(59:3/0) frame Frame(0)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 59
PageTableEntry][do_lock] iorb IORB(Id(522),Device(0),Page(59:3/0),Diskblock(187),FileWrite,Openfile(10:3/0),Thread(55:3/W2)) this Page(59:3/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(63:3/12)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(12) Page(63:3/12) Thread(50:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(2:3/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(2:3/12) do swap-in Thread(50:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(523),Device(0),Page(2:3/12),Diskblock(130),FileRead,Openfile(10:3/0),Thread(50:3/W1)) this Page(2:3/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 41856 offset = 896 page no = 40 Thread(52:3/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 37438 offset = 574 page no = 36 Thread(52:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(52:3/RU) 21 Page(36:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(52:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(52:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(36:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(7:3/19)
[PageFaultHandler][do_handlePageFault] set Page(36:3/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(36:3/19) do swap-in Thread(52:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(524),Device(0),Page(36:3/19),Diskblock(164),FileRead,Openfile(10:3/0),Thread(52:3/W1)) this Page(36:3/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 51572 offset = 372 page no = 50 Thread(31:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(31:4/RU) 21 Page(50:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(31:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(31:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(50:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] set Page(50:4/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(50:4/2) do swap-in Thread(31:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(525),Device(0),Page(50:4/2),Diskblock(242),FileRead,Openfile(12:4/0),Thread(31:4/W1)) this Page(50:4/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(38:3/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(38:3/5) swap-in finish Thread(49:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(35:3/15)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(15) Page(35:3/15) Thread(51:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(43:3/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(43:3/15) do swap-in Thread(51:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(526),Device(0),Page(43:3/15),Diskblock(171),FileRead,Openfile(10:3/0),Thread(51:3/W1)) this Page(43:3/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(11:3/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(11:3/10) swap-in finish Thread(47:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 63921 offset = 433 page no = 62 Thread(47:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(47:3/RU) 22 Page(62:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(47:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(47:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(62:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(11:3/10)
[PageFaultHandler][do_handlePageFault] Frame(10) is dirty, do swap-out Thread(47:3/W0)
[PageFaultHandler][SwapOut] page Page(11:3/10) frame Frame(10)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 11
PageTableEntry][do_lock] iorb IORB(Id(527),Device(0),Page(11:3/10),Diskblock(139),FileWrite,Openfile(10:3/0),Thread(47:3/W1)) this Page(11:3/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(51:3/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(51:3/20) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 30269 offset = 573 page no = 29 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 21 Page(29:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(29:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] set Page(29:3/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(29:3/21) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(528),Device(0),Page(29:3/21),Diskblock(157),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(29:3/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(52:3/13)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(13) Page(52:3/13) Thread(48:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(17:6/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(17:6/13) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(529),Device(0),Page(17:6/13),Diskblock(17),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(17:6/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(59:3/0)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(0) Page(59:3/0) Thread(55:3/W1) finish
[PageFaultHandler][do_handlePageFault] set Page(0:3/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(0:3/0) do swap-in Thread(55:3/W1)
PageTableEntry][do_lock] iorb IORB(Id(530),Device(0),Page(0:3/0),Diskblock(128),FileRead,Openfile(10:3/0),Thread(55:3/W2)) this Page(0:3/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 86020/250000[PageTableEntry][do_unlock] this Page(2:3/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(2:3/12) swap-in finish Thread(50:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 42794 offset = 810 page no = 41 Thread(50:3/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(36:3/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(36:3/19) swap-in finish Thread(52:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 34653 offset = 861 page no = 33 Thread(52:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(52:3/RU) 21 Page(33:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(52:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(52:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(33:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(36:3/19)
[PageFaultHandler][do_handlePageFault] set Page(33:3/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(33:3/19) do swap-in Thread(52:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(531),Device(0),Page(33:3/19),Diskblock(161),FileRead,Openfile(10:3/0),Thread(52:3/W1)) this Page(33:3/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 22681 offset = 153 page no = 22 Thread(50:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(50:3/RU) 22 Page(22:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(50:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(50:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(22:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(9:3/25)
[PageFaultHandler][do_handlePageFault] set Page(22:3/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(22:3/25) do swap-in Thread(50:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(532),Device(0),Page(22:3/25),Diskblock(150),FileRead,Openfile(10:3/0),Thread(50:3/W1)) this Page(22:3/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(50:4/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(50:4/2) swap-in finish Thread(31:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 59984 offset = 592 page no = 58 Thread(31:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(31:4/RU) 21 Page(58:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(31:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(31:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(58:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(50:4/2)
[PageFaultHandler][do_handlePageFault] set Page(58:4/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(58:4/2) do swap-in Thread(31:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(533),Device(0),Page(58:4/2),Diskblock(250),FileRead,Openfile(12:4/0),Thread(31:4/W1)) this Page(58:4/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(43:3/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(43:3/15) swap-in finish Thread(51:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 47932 offset = 828 page no = 46 Thread(51:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(51:3/RU) 22 Page(46:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(51:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(51:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(46:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(43:3/15)
[PageFaultHandler][do_handlePageFault] Frame(15) is dirty, do swap-out Thread(51:3/W0)
[PageFaultHandler][SwapOut] page Page(43:3/15) frame Frame(15)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 43
PageTableEntry][do_lock] iorb IORB(Id(534),Device(0),Page(43:3/15),Diskblock(171),FileWrite,Openfile(10:3/0),Thread(51:3/W1)) this Page(43:3/15)
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(11:3/10)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(10) Page(11:3/10) Thread(47:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(62:3/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(62:3/10) do swap-in Thread(47:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(535),Device(0),Page(62:3/10),Diskblock(190),FileRead,Openfile(10:3/0),Thread(47:3/W1)) this Page(62:3/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(29:3/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(29:3/21) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(17:6/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(17:6/13) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 87020/250000[MMU][do_refer] address = 9459 offset = 243 page no = 9 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 21 Page(9:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(9:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(29:3/21)
[PageFaultHandler][do_handlePageFault] set Page(9:3/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(9:3/21) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(536),Device(0),Page(9:3/21),Diskblock(137),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(9:3/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:3/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(0:3/0) swap-in finish Thread(55:3/W1)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(537),Device(1),Page(0:6/26),Diskblock(4),FileWrite,Openfile(66:3/1),Thread(48:6/W0)) this Page(0:6/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:3/0)
[MMU][do_refer] address = 41686 offset = 726 page no = 40 Thread(55:3/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(0:6/26)
[PageTableEntry][do_unlock] this Page(33:3/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(33:3/19) swap-in finish Thread(52:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 40433 offset = 497 page no = 39 Thread(55:3/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(22:3/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(22:3/25) swap-in finish Thread(50:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 55747 offset = 451 page no = 54 Thread(50:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(50:3/RU) 22 Page(54:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(50:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(50:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(54:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(33:3/19)
[PageFaultHandler][do_handlePageFault] set Page(54:3/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(54:3/19) do swap-in Thread(50:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(538),Device(0),Page(54:3/19),Diskblock(182),FileRead,Openfile(10:3/0),Thread(50:3/W1)) this Page(54:3/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(58:4/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(58:4/2) swap-in finish Thread(31:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(43:3/15)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(15) Page(43:3/15) Thread(51:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(46:3/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(46:3/15) do swap-in Thread(51:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(539),Device(0),Page(46:3/15),Diskblock(174),FileRead,Openfile(10:3/0),Thread(51:3/W1)) this Page(46:3/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 13234 offset = 946 page no = 12 Thread(31:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(31:4/RU) 22 Page(12:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(31:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(31:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(12:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] set Page(12:4/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(12:4/29) do swap-in Thread(31:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(540),Device(0),Page(12:4/29),Diskblock(204),FileRead,Openfile(12:4/0),Thread(31:4/W1)) this Page(12:4/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 55591 offset = 295 page no = 54 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 22 Page(54:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(54:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] set Page(54:6/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(54:6/9) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(541),Device(0),Page(54:6/9),Diskblock(54),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(54:6/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(62:3/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(62:3/10) swap-in finish Thread(47:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 33871 offset = 79 page no = 33 Thread(47:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(47:3/RU) 21 Page(33:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(47:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(47:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(33:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(62:3/10)
[PageFaultHandler][do_handlePageFault] Frame(10) is dirty, do swap-out Thread(47:3/W0)
[PageFaultHandler][SwapOut] page Page(62:3/10) frame Frame(10)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 62
PageTableEntry][do_lock] iorb IORB(Id(542),Device(0),Page(62:3/10),Diskblock(190),FileWrite,Openfile(10:3/0),Thread(47:3/W1)) this Page(62:3/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(9:3/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(9:3/21) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 21263 offset = 783 page no = 20 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 22 Page(20:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(20:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(9:3/21)
[PageFaultHandler][do_handlePageFault] set Page(20:3/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(20:3/21) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(543),Device(0),Page(20:3/21),Diskblock(148),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(20:3/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 88040/250000[PageTableEntry][do_unlock] this Page(54:3/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(54:3/19) swap-in finish Thread(50:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 62931 offset = 467 page no = 61 Thread(50:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(50:3/RU) 22 Page(61:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(50:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(50:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(61:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(63:4/1)
[PageFaultHandler][do_handlePageFault] Frame(1) is dirty, do swap-out Thread(50:3/W0)
[PageFaultHandler][SwapOut] page Page(63:4/1) frame Frame(1)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 63
PageTableEntry][do_lock] iorb IORB(Id(544),Device(0),Page(63:4/1),Diskblock(191),FileWrite,Openfile(10:3/0),Thread(50:3/W1)) this Page(63:4/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(46:3/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(46:3/15) swap-in finish Thread(51:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 17667 offset = 259 page no = 17 Thread(56:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(56:3/RU) 22 Page(17:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(56:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(56:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(17:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(0:6/26)
[PageFaultHandler][do_handlePageFault] set Page(17:3/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(17:3/26) do swap-in Thread(56:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(545),Device(0),Page(17:3/26),Diskblock(145),FileRead,Openfile(10:3/0),Thread(56:3/W1)) this Page(17:3/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(12:4/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(12:4/29) swap-in finish Thread(31:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(54:6/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(54:6/9) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 40787 offset = 851 page no = 39 Thread(51:3/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 8340 offset = 148 page no = 8 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 21 Page(8:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(8:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(12:4/29)
[PageFaultHandler][do_handlePageFault] Frame(29) is dirty, do swap-out Thread(48:6/W0)
[PageFaultHandler][SwapOut] page Page(12:4/29) frame Frame(29)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 12
PageTableEntry][do_lock] iorb IORB(Id(546),Device(0),Page(12:4/29),Diskblock(12),FileWrite,Openfile(60:6/0),Thread(48:6/W1)) this Page(12:4/29)
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(62:3/10)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(10) Page(62:3/10) Thread(47:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(33:3/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(33:3/10) do swap-in Thread(47:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(547),Device(0),Page(33:3/10),Diskblock(161),FileRead,Openfile(10:3/0),Thread(47:3/W1)) this Page(33:3/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 38611 offset = 723 page no = 37 Thread(51:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(51:3/RU) 22 Page(37:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(51:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(51:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(37:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(1:3/14)
[PageFaultHandler][do_handlePageFault] set Page(37:3/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(37:3/14) do swap-in Thread(51:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(548),Device(0),Page(37:3/14),Diskblock(165),FileRead,Openfile(10:3/0),Thread(51:3/W1)) this Page(37:3/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(20:3/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(20:3/21) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 63196 offset = 732 page no = 61 Thread(14:3/RU)
[PageTableEntry][do_unlock] this Page(63:4/1)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(1) Page(63:4/1) Thread(50:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(61:3/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(61:3/1) do swap-in Thread(50:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(549),Device(0),Page(61:3/1),Diskblock(189),FileRead,Openfile(10:3/0),Thread(50:3/W1)) this Page(61:3/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 89030/250000[MMU][do_refer] address = 64826 offset = 314 page no = 63 Thread(31:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(31:4/RU) 21 Page(63:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(31:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(31:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(63:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(55:6/18)
[PageFaultHandler][do_handlePageFault] Frame(18) is dirty, do swap-out Thread(31:4/W0)
[PageFaultHandler][SwapOut] page Page(55:6/18) frame Frame(18)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 55
PageTableEntry][do_lock] iorb IORB(Id(550),Device(0),Page(55:6/18),Diskblock(247),FileWrite,Openfile(12:4/0),Thread(31:4/W1)) this Page(55:6/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(17:3/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(17:3/26) swap-in finish Thread(56:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(12:4/29)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(29) Page(12:4/29) Thread(48:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(8:6/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(8:6/29) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(551),Device(0),Page(8:6/29),Diskblock(8),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(8:6/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(33:3/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(33:3/10) swap-in finish Thread(47:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(37:3/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(37:3/14) swap-in finish Thread(51:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 46821 offset = 741 page no = 45 Thread(51:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(51:3/RU) 22 Page(45:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(51:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(51:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(45:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(33:3/10)
[PageFaultHandler][do_handlePageFault] set Page(45:3/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(45:3/10) do swap-in Thread(51:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(552),Device(0),Page(45:3/10),Diskblock(173),FileRead,Openfile(10:3/0),Thread(51:3/W1)) this Page(45:3/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(61:3/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(61:3/1) swap-in finish Thread(50:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 35678 offset = 862 page no = 34 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 22 Page(34:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(34:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(17:3/26)
[PageFaultHandler][do_handlePageFault] Frame(26) is dirty, do swap-out Thread(14:3/W0)
[PageFaultHandler][SwapOut] page Page(17:3/26) frame Frame(26)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 17
PageTableEntry][do_lock] iorb IORB(Id(553),Device(0),Page(17:3/26),Diskblock(145),FileWrite,Openfile(10:3/0),Thread(14:3/W1)) this Page(17:3/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(55:6/18)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(18) Page(55:6/18) Thread(31:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(63:4/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(63:4/18) do swap-in Thread(31:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(554),Device(0),Page(63:4/18),Diskblock(255),FileRead,Openfile(12:4/0),Thread(31:4/W1)) this Page(63:4/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 29588 offset = 916 page no = 28 Thread(50:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(50:3/RU) 21 Page(28:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(50:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(50:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(28:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(19:4/16)
[PageFaultHandler][do_handlePageFault] Frame(16) is dirty, do swap-out Thread(50:3/W0)
[PageFaultHandler][SwapOut] page Page(19:4/16) frame Frame(16)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 19
PageTableEntry][do_lock] iorb IORB(Id(555),Device(0),Page(19:4/16),Diskblock(147),FileWrite,Openfile(10:3/0),Thread(50:3/W1)) this Page(19:4/16)
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 90020/250000[PageTableEntry][do_unlock] this Page(8:6/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(8:6/29) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 49245 offset = 93 page no = 48 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 22 Page(48:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(48:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(8:3/22)
[PageFaultHandler][do_handlePageFault] Frame(22) is dirty, do swap-out Thread(48:6/W0)
[PageFaultHandler][SwapOut] page Page(8:3/22) frame Frame(22)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 8
PageTableEntry][do_lock] iorb IORB(Id(556),Device(0),Page(8:3/22),Diskblock(8),FileWrite,Openfile(60:6/0),Thread(48:6/W1)) this Page(8:3/22)
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(45:3/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(45:3/10) swap-in finish Thread(51:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 39224 offset = 312 page no = 38 Thread(51:3/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 44629 offset = 597 page no = 43 Thread(51:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(51:3/RU) 21 Page(43:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(51:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(51:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(43:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(48:3/23)
[PageFaultHandler][do_handlePageFault] Frame(23) is dirty, do swap-out Thread(51:3/W0)
[PageFaultHandler][SwapOut] page Page(48:3/23) frame Frame(23)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 48
PageTableEntry][do_lock] iorb IORB(Id(557),Device(0),Page(48:3/23),Diskblock(176),FileWrite,Openfile(10:3/0),Thread(51:3/W1)) this Page(48:3/23)
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(17:3/26)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(26) Page(17:3/26) Thread(14:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(34:3/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(34:3/26) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(558),Device(0),Page(34:3/26),Diskblock(162),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(34:3/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(63:4/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(63:4/18) swap-in finish Thread(31:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 59924 offset = 532 page no = 58 Thread(31:4/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(19:4/16)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(16) Page(19:4/16) Thread(50:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(28:3/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(28:3/16) do swap-in Thread(50:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(559),Device(0),Page(28:3/16),Diskblock(156),FileRead,Openfile(10:3/0),Thread(50:3/W1)) this Page(28:3/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(8:3/22)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(22) Page(8:3/22) Thread(48:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(48:6/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(48:6/22) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(560),Device(0),Page(48:6/22),Diskblock(48),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(48:6/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 33654 offset = 886 page no = 32 Thread(31:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(31:4/RU) 22 Page(32:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(31:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(31:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(32:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(63:4/18)
[PageFaultHandler][do_handlePageFault] set Page(32:4/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(32:4/18) do swap-in Thread(31:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(561),Device(0),Page(32:4/18),Diskblock(224),FileRead,Openfile(12:4/0),Thread(31:4/W1)) this Page(32:4/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 91005/250000[PageTableEntry][do_unlock] this Page(48:3/23)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(23) Page(48:3/23) Thread(51:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(43:3/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(43:3/23) do swap-in Thread(51:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(562),Device(0),Page(43:3/23),Diskblock(171),FileRead,Openfile(10:3/0),Thread(51:3/W1)) this Page(43:3/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(34:3/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(34:3/26) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 53564 offset = 316 page no = 52 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 22 Page(52:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(52:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(51:3/20)
[PageFaultHandler][do_handlePageFault] set Page(52:3/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(52:3/20) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(563),Device(0),Page(52:3/20),Diskblock(180),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(52:3/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(28:3/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(28:3/16) swap-in finish Thread(50:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(48:6/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(48:6/22) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 51500 offset = 300 page no = 50 Thread(50:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(50:3/RU) 21 Page(50:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(50:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(50:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(50:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(48:6/22)
[PageFaultHandler][do_handlePageFault] Frame(22) is dirty, do swap-out Thread(50:3/W0)
[PageFaultHandler][SwapOut] page Page(48:6/22) frame Frame(22)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 48
PageTableEntry][do_lock] iorb IORB(Id(564),Device(0),Page(48:6/22),Diskblock(176),FileWrite,Openfile(10:3/0),Thread(50:3/W1)) this Page(48:6/22)
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(32:4/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(32:4/18) swap-in finish Thread(31:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(43:3/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(43:3/23) swap-in finish Thread(51:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 40826 offset = 890 page no = 39 Thread(51:3/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 10702 offset = 462 page no = 10 Thread(51:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(51:3/RU) 21 Page(10:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(51:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(51:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(10:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(43:3/23)
[PageFaultHandler][do_handlePageFault] set Page(10:3/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(10:3/23) do swap-in Thread(51:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(565),Device(0),Page(10:3/23),Diskblock(138),FileRead,Openfile(10:3/0),Thread(51:3/W1)) this Page(10:3/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(52:3/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(52:3/20) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 92030/250000[MMU][do_refer] address = 30297 offset = 601 page no = 29 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 21 Page(29:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(29:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(2:3/12)
[PageFaultHandler][do_handlePageFault] set Page(29:3/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(29:3/12) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(566),Device(0),Page(29:3/12),Diskblock(157),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(29:3/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 44124 offset = 92 page no = 43 Thread(31:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(31:4/RU) 21 Page(43:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(31:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(31:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(43:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(17:6/13)
[PageFaultHandler][do_handlePageFault] set Page(43:4/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(43:4/13) do swap-in Thread(31:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(567),Device(0),Page(43:4/13),Diskblock(235),FileRead,Openfile(12:4/0),Thread(31:4/W1)) this Page(43:4/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(48:6/22)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(22) Page(48:6/22) Thread(50:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(50:3/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(50:3/22) do swap-in Thread(50:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(568),Device(0),Page(50:3/22),Diskblock(178),FileRead,Openfile(10:3/0),Thread(50:3/W1)) this Page(50:3/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(10:3/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(10:3/23) swap-in finish Thread(51:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(569),Device(1),Page(0:3/0),Diskblock(9),FileRead,Openfile(66:3/1),Thread(51:3/W0)) this Page(0:3/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:3/0)
[PageTableEntry][do_unlock] this Page(29:3/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(29:3/12) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(43:4/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(43:4/13) swap-in finish Thread(31:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(50:3/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(50:3/22) swap-in finish Thread(50:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 44702 offset = 670 page no = 43 Thread(51:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(51:3/RU) 21 Page(43:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(51:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(51:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(43:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(50:3/22)
[PageFaultHandler][do_handlePageFault] set Page(43:3/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(43:3/22) do swap-in Thread(51:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(570),Device(0),Page(43:3/22),Diskblock(171),FileRead,Openfile(10:3/0),Thread(51:3/W1)) this Page(43:3/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 16857 offset = 473 page no = 16 Thread(31:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(31:4/RU) 22 Page(16:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(31:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(31:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(16:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(40:3/4)
[PageFaultHandler][do_handlePageFault] Frame(4) is dirty, do swap-out Thread(31:4/W0)
[PageFaultHandler][SwapOut] page Page(40:3/4) frame Frame(4)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 40
PageTableEntry][do_lock] iorb IORB(Id(571),Device(0),Page(40:3/4),Diskblock(232),FileWrite,Openfile(12:4/0),Thread(31:4/W1)) this Page(40:3/4)
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 25846 offset = 246 page no = 25 Thread(50:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(50:3/RU) 22 Page(25:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(50:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(50:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(25:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(47:6/17)
[PageFaultHandler][do_handlePageFault] Frame(17) is dirty, do swap-out Thread(50:3/W0)
[PageFaultHandler][SwapOut] page Page(47:6/17) frame Frame(17)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 47
PageTableEntry][do_lock] iorb IORB(Id(572),Device(0),Page(47:6/17),Diskblock(175),FileWrite,Openfile(10:3/0),Thread(50:3/W1)) this Page(47:6/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(43:3/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(43:3/22) swap-in finish Thread(51:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 1746 offset = 722 page no = 1 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 22 Page(1:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(1:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(58:4/2)
[PageFaultHandler][do_handlePageFault] set Page(1:3/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(1:3/2) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(573),Device(0),Page(1:3/2),Diskblock(129),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(1:3/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 93023/250000[PageTableEntry][do_unlock] this Page(40:3/4)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(4) Page(40:3/4) Thread(31:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(16:4/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(16:4/4) do swap-in Thread(31:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(574),Device(0),Page(16:4/4),Diskblock(208),FileRead,Openfile(12:4/0),Thread(31:4/W1)) this Page(16:4/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 24696 offset = 120 page no = 24 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 21 Page(24:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(7) for Page(24:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(7) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] set Page(24:7/null) and Frame(7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(24:7/7) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(575),Device(0),Page(24:7/7),Diskblock(88),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(24:7/7)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 24570 offset = 1018 page no = 23 Thread(51:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(51:3/RU) 22 Page(23:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(51:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(51:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(23:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(39:3/6)
[PageFaultHandler][do_handlePageFault] Frame(6) is dirty, do swap-out Thread(51:3/W0)
[PageFaultHandler][SwapOut] page Page(39:3/6) frame Frame(6)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 39
PageTableEntry][do_lock] iorb IORB(Id(576),Device(0),Page(39:3/6),Diskblock(167),FileWrite,Openfile(10:3/0),Thread(51:3/W1)) this Page(39:3/6)
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(47:6/17)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(17) Page(47:6/17) Thread(50:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(25:3/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(25:3/17) do swap-in Thread(50:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(577),Device(0),Page(25:3/17),Diskblock(153),FileRead,Openfile(10:3/0),Thread(50:3/W1)) this Page(25:3/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:3/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(1:3/2) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 22328 offset = 824 page no = 21 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 21 Page(21:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(21:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(54:3/19)
[PageFaultHandler][do_handlePageFault] Frame(19) is dirty, do swap-out Thread(14:3/W0)
[PageFaultHandler][SwapOut] page Page(54:3/19) frame Frame(19)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 54
PageTableEntry][do_lock] iorb IORB(Id(578),Device(0),Page(54:3/19),Diskblock(182),FileWrite,Openfile(10:3/0),Thread(14:3/W1)) this Page(54:3/19)
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:4/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(16:4/4) swap-in finish Thread(31:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(24:7/7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(24:7/7) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 15187 offset = 851 page no = 14 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 21 Page(14:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(14:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(16:4/4)
[PageFaultHandler][do_handlePageFault] Frame(4) is dirty, do swap-out Thread(57:7/W0)
[PageFaultHandler][SwapOut] page Page(16:4/4) frame Frame(4)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 16
PageTableEntry][do_lock] iorb IORB(Id(579),Device(0),Page(16:4/4),Diskblock(80),FileWrite,Openfile(78:7/0),Thread(57:7/W1)) this Page(16:4/4)
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(39:3/6)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(6) Page(39:3/6) Thread(51:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(23:3/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(23:3/6) do swap-in Thread(51:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(580),Device(0),Page(23:3/6),Diskblock(151),FileRead,Openfile(10:3/0),Thread(51:3/W1)) this Page(23:3/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 9939 offset = 723 page no = 9 Thread(31:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(31:4/RU) 21 Page(9:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(31:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(31:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(7) for Page(9:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(7) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(24:7/7)
[PageFaultHandler][do_handlePageFault] set Page(9:4/null) and Frame(7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(9:4/7) do swap-in Thread(31:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(581),Device(0),Page(9:4/7),Diskblock(201),FileRead,Openfile(12:4/0),Thread(31:4/W1)) this Page(9:4/7)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(25:3/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(25:3/17) swap-in finish Thread(50:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(582),Device(1),Page(0:3/0),Diskblock(5),FileRead,Openfile(66:3/1),Thread(49:3/W0)) this Page(0:3/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:3/0)
[PageTableEntry][do_unlock] this Page(54:3/19)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(19) Page(54:3/19) Thread(14:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(21:3/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(21:3/19) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(583),Device(0),Page(21:3/19),Diskblock(149),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(21:3/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:4/4)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(4) Page(16:4/4) Thread(57:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(14:7/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(14:7/4) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(584),Device(0),Page(14:7/4),Diskblock(78),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(14:7/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 94054/250000[PageTableEntry][do_unlock] this Page(23:3/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(23:3/6) swap-in finish Thread(51:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(9:4/7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(9:4/7) swap-in finish Thread(31:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(21:3/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(21:3/19) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(14:7/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(14:7/4) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 35082 offset = 266 page no = 34 Thread(31:4/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(31:4/RU) 21 Page(34:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(31:4/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(31:4/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(34:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(54:6/9)
[PageFaultHandler][do_handlePageFault] Frame(9) is dirty, do swap-out Thread(31:4/W0)
[PageFaultHandler][SwapOut] page Page(54:6/9) frame Frame(9)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 54
PageTableEntry][do_lock] iorb IORB(Id(585),Device(0),Page(54:6/9),Diskblock(246),FileWrite,Openfile(12:4/0),Thread(31:4/W1)) this Page(54:6/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 62086 offset = 646 page no = 60 Thread(51:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(51:3/RU) 22 Page(60:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(51:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(51:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(60:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(20:3/21)
[PageFaultHandler][do_handlePageFault] Frame(21) is dirty, do swap-out Thread(51:3/W0)
[PageFaultHandler][SwapOut] page Page(20:3/21) frame Frame(21)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 20
PageTableEntry][do_lock] iorb IORB(Id(586),Device(0),Page(20:3/21),Diskblock(148),FileWrite,Openfile(10:3/0),Thread(51:3/W1)) this Page(20:3/21)
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(54:6/9)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(9) Page(54:6/9) Thread(31:4/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(34:4/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(34:4/9) do swap-in Thread(31:4/W0)
PageTableEntry][do_lock] iorb IORB(Id(587),Device(0),Page(34:4/9),Diskblock(226),FileRead,Openfile(12:4/0),Thread(31:4/W1)) this Page(34:4/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(20:3/21)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(21) Page(20:3/21) Thread(51:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(60:3/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(60:3/21) do swap-in Thread(51:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(588),Device(0),Page(60:3/21),Diskblock(188),FileRead,Openfile(10:3/0),Thread(51:3/W1)) this Page(60:3/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 3123 offset = 51 page no = 3 Thread(50:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(50:3/RU) 22 Page(3:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(50:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(50:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(3:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(41:3/27)
[PageFaultHandler][do_handlePageFault] Frame(27) is dirty, do swap-out Thread(50:3/W0)
[PageFaultHandler][SwapOut] page Page(41:3/27) frame Frame(27)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 41
PageTableEntry][do_lock] iorb IORB(Id(589),Device(0),Page(41:3/27),Diskblock(169),FileWrite,Openfile(10:3/0),Thread(50:3/W1)) this Page(41:3/27)
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 53990 offset = 742 page no = 52 Thread(14:3/RU)
[MMU][do_refer] Do memory write.
Simulation progress: 95060/250000[PageTableEntry][do_unlock] this Page(34:4/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(34:4/9) swap-in finish Thread(31:4/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 40471 offset = 535 page no = 39 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 21 Page(39:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(39:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(61:3/1)
[PageFaultHandler][do_handlePageFault] Frame(1) is dirty, do swap-out Thread(57:7/W0)
[PageFaultHandler][SwapOut] page Page(61:3/1) frame Frame(1)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 61
PageTableEntry][do_lock] iorb IORB(Id(590),Device(0),Page(61:3/1),Diskblock(125),FileWrite,Openfile(78:7/0),Thread(57:7/W1)) this Page(61:3/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(60:3/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(60:3/21) swap-in finish Thread(51:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 45244 offset = 188 page no = 44 Thread(49:3/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(41:3/27)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(27) Page(41:3/27) Thread(50:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(3:3/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(3:3/27) do swap-in Thread(50:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(591),Device(0),Page(3:3/27),Diskblock(131),FileRead,Openfile(10:3/0),Thread(50:3/W1)) this Page(3:3/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 4722 offset = 626 page no = 4 Thread(51:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(51:3/RU) 21 Page(4:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(51:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(51:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(4:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(60:3/21)
[PageFaultHandler][do_handlePageFault] Frame(21) is dirty, do swap-out Thread(51:3/W0)
[PageFaultHandler][SwapOut] page Page(60:3/21) frame Frame(21)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 60
PageTableEntry][do_lock] iorb IORB(Id(592),Device(0),Page(60:3/21),Diskblock(188),FileWrite,Openfile(10:3/0),Thread(51:3/W1)) this Page(60:3/21)
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(593),Device(1),Page(0:4/null),Diskblock(13),FileWrite,Openfile(74:3/1),Thread(31:4/W0)) this Page(0:4/null)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] validating_thread is null, handlePageFault
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(31:4/W0) 23 Page(0:4/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(31:4/W0) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(31:4/W1) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(0:4/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(4/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(37:3/14)
[PageFaultHandler][do_handlePageFault] Frame(14) is dirty, do swap-out Thread(31:4/W1)
[PageFaultHandler][SwapOut] page Page(37:3/14) frame Frame(14)file Openfile(12:4/0)
[PageFaultHandler][SwapOut] block no 37
PageTableEntry][do_lock] iorb IORB(Id(594),Device(0),Page(37:3/14),Diskblock(229),FileWrite,Openfile(12:4/0),Thread(31:4/W2)) this Page(37:3/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(61:3/1)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(1) Page(61:3/1) Thread(57:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(39:7/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(39:7/1) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(595),Device(0),Page(39:7/1),Diskblock(103),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(39:7/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(3:3/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(3:3/27) swap-in finish Thread(50:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(596),Device(1),Page(0:3/0),Diskblock(12),FileWrite,Openfile(74:3/1),Thread(50:3/W0)) this Page(0:3/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:3/0)
[PageTableEntry][do_unlock] this Page(60:3/21)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(21) Page(60:3/21) Thread(51:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(4:3/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(4:3/21) do swap-in Thread(51:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(597),Device(0),Page(4:3/21),Diskblock(132),FileRead,Openfile(10:3/0),Thread(51:3/W1)) this Page(4:3/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 6717 offset = 573 page no = 6 Thread(50:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(50:3/RU) 22 Page(6:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(50:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(50:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(6:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(8:6/29)
[PageFaultHandler][do_handlePageFault] set Page(6:3/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(6:3/29) do swap-in Thread(50:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(598),Device(0),Page(6:3/29),Diskblock(134),FileRead,Openfile(10:3/0),Thread(50:3/W1)) this Page(6:3/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(37:3/14)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(14) Page(37:3/14) Thread(31:4/W1) finish
[PageFaultHandler][do_handlePageFault] set Page(0:4/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(0:4/14) do swap-in Thread(31:4/W1)
PageTableEntry][do_lock] iorb IORB(Id(599),Device(0),Page(0:4/14),Diskblock(192),FileRead,Openfile(12:4/0),Thread(31:4/W2)) this Page(0:4/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 18714 offset = 282 page no = 18 Thread(49:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(49:3/RU) 21 Page(18:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(49:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(49:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(18:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(44:3/11)
[PageFaultHandler][do_handlePageFault] Frame(11) is dirty, do swap-out Thread(49:3/W0)
[PageFaultHandler][SwapOut] page Page(44:3/11) frame Frame(11)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 44
PageTableEntry][do_lock] iorb IORB(Id(600),Device(0),Page(44:3/11),Diskblock(172),FileWrite,Openfile(10:3/0),Thread(49:3/W1)) this Page(44:3/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(39:7/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(39:7/1) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 96027/250000[MMU][do_refer] address = 43897 offset = 889 page no = 42 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 22 Page(42:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(42:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(39:7/1)
[PageFaultHandler][do_handlePageFault] set Page(42:7/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(42:7/1) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(601),Device(0),Page(42:7/1),Diskblock(106),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(42:7/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(4:3/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(4:3/21) swap-in finish Thread(51:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 48866 offset = 738 page no = 47 Thread(51:3/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 17413 offset = 5 page no = 17 Thread(51:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(51:3/RU) 21 Page(17:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(51:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(51:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(17:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] set Page(17:3/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(17:3/28) do swap-in Thread(51:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(602),Device(0),Page(17:3/28),Diskblock(145),FileRead,Openfile(10:3/0),Thread(51:3/W1)) this Page(17:3/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(6:3/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(6:3/29) swap-in finish Thread(50:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 30271 offset = 575 page no = 29 Thread(50:3/RU)
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(603),Device(1),Page(0:3/0),Diskblock(27),FileWrite,Openfile(74:3/1),Thread(50:3/W0)) this Page(0:3/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:3/0)
[PageTableEntry][do_unlock] this Page(0:4/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(0:4/14) swap-in finish Thread(31:4/W1)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:4/14)
[PageTableEntry][do_unlock] this Page(44:3/11)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(11) Page(44:3/11) Thread(49:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(18:3/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(18:3/11) do swap-in Thread(49:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(604),Device(0),Page(18:3/11),Diskblock(146),FileRead,Openfile(10:3/0),Thread(49:3/W1)) this Page(18:3/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(42:7/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(42:7/1) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(17:3/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(17:3/28) swap-in finish Thread(51:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(18:3/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(18:3/11) swap-in finish Thread(49:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 97016/250000[PageTable][do_deallocateMemory] this Pagetable(Task(4/T))
[PageTable][do_deallocateMemory]  page_table_entry Page(0:4/14) frame_table_entry Frame(14)
[PageTable][do_deallocateMemory]  page_table_entry Page(9:4/7) frame_table_entry Frame(7)
[PageTable][do_deallocateMemory]  page_table_entry Page(29:4/3) frame_table_entry Frame(3)
[PageTable][do_deallocateMemory]  page_table_entry Page(32:4/18) frame_table_entry Frame(18)
[PageTable][do_deallocateMemory]  page_table_entry Page(34:4/9) frame_table_entry Frame(9)
[PageTable][do_deallocateMemory]  page_table_entry Page(43:4/13) frame_table_entry Frame(13)
[MMU][do_refer] address = 26354 offset = 754 page no = 25 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 22 Page(25:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(25:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(42:7/1)
[PageFaultHandler][do_handlePageFault] Frame(1) is dirty, do swap-out Thread(57:7/W0)
[PageFaultHandler][SwapOut] page Page(42:7/1) frame Frame(1)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 42
PageTableEntry][do_lock] iorb IORB(Id(605),Device(0),Page(42:7/1),Diskblock(106),FileWrite,Openfile(78:7/0),Thread(57:7/W1)) this Page(42:7/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(42:7/1)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(1) Page(42:7/1) Thread(57:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(25:7/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(25:7/1) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(606),Device(0),Page(25:7/1),Diskblock(89),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(25:7/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(25:7/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(25:7/1) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 53782 offset = 534 page no = 52 Thread(56:3/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 23963 offset = 411 page no = 23 Thread(56:3/RU)
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(607),Device(1),Page(2:3/null),Diskblock(4),FileRead,Openfile(82:3/1),Thread(58:3/W0)) this Page(2:3/null)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] validating_thread is null, handlePageFault
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(58:3/W0) 23 Page(2:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(58:3/W0) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(58:3/W1) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(2:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(45:3/10)
[PageFaultHandler][do_handlePageFault] Frame(10) is dirty, do swap-out Thread(58:3/W1)
[PageFaultHandler][SwapOut] page Page(45:3/10) frame Frame(10)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 45
PageTableEntry][do_lock] iorb IORB(Id(608),Device(0),Page(45:3/10),Diskblock(173),FileWrite,Openfile(10:3/0),Thread(58:3/W2)) this Page(45:3/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 21960 offset = 456 page no = 21 Thread(50:3/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(45:3/10)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(10) Page(45:3/10) Thread(58:3/W1) finish
[PageFaultHandler][do_handlePageFault] set Page(2:3/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(2:3/10) do swap-in Thread(58:3/W1)
PageTableEntry][do_lock] iorb IORB(Id(609),Device(0),Page(2:3/10),Diskblock(130),FileRead,Openfile(10:3/0),Thread(58:3/W2)) this Page(2:3/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(2:3/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(2:3/10) swap-in finish Thread(58:3/W1)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(2:3/10)
[MMU][do_refer] address = 35515 offset = 699 page no = 34 Thread(59:3/RU)
[MMU][do_refer] Do memory read.
Simulation progress: 98018/250000[MMU][do_refer] address = 56622 offset = 302 page no = 55 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 21 Page(55:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(55:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(28:3/16)
[PageFaultHandler][do_handlePageFault] set Page(55:3/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(55:3/16) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(610),Device(0),Page(55:3/16),Diskblock(183),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(55:3/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(55:3/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(55:3/16) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 40791 offset = 855 page no = 39 Thread(60:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(60:3/RU) 21 Page(39:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(60:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(60:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(39:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(0:3/0)
[PageFaultHandler][do_handlePageFault] Frame(0) is dirty, do swap-out Thread(60:3/W0)
[PageFaultHandler][SwapOut] page Page(0:3/0) frame Frame(0)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 0
PageTableEntry][do_lock] iorb IORB(Id(611),Device(0),Page(0:3/0),Diskblock(128),FileWrite,Openfile(10:3/0),Thread(60:3/W1)) this Page(0:3/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:3/0)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(0) Page(0:3/0) Thread(60:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(39:3/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(39:3/0) do swap-in Thread(60:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(612),Device(0),Page(39:3/0),Diskblock(167),FileRead,Openfile(10:3/0),Thread(60:3/W1)) this Page(39:3/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 55190 offset = 918 page no = 53 Thread(47:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(47:3/RU) 21 Page(53:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(47:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(47:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(53:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] set Page(53:3/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(53:3/18) do swap-in Thread(47:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(613),Device(0),Page(53:3/18),Diskblock(181),FileRead,Openfile(10:3/0),Thread(47:3/W1)) this Page(53:3/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 5723 offset = 603 page no = 5 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 21 Page(5:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(5:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] set Page(5:7/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(5:7/3) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(614),Device(0),Page(5:7/3),Diskblock(69),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(5:7/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(39:3/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(39:3/0) swap-in finish Thread(60:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(53:3/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(53:3/18) swap-in finish Thread(47:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(5:7/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(5:7/3) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 10164 offset = 948 page no = 9 Thread(51:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(51:3/RU) 22 Page(9:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(51:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(51:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(9:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(53:3/18)
[PageFaultHandler][do_handlePageFault] set Page(9:3/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(9:3/18) do swap-in Thread(51:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(615),Device(0),Page(9:3/18),Diskblock(137),FileRead,Openfile(10:3/0),Thread(51:3/W1)) this Page(9:3/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 35493 offset = 677 page no = 34 Thread(14:3/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 22247 offset = 743 page no = 21 Thread(14:3/RU)
[MMU][do_refer] Do memory read.
Simulation progress: 99016/250000[PageTableEntry][do_unlock] this Page(9:3/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(9:3/18) swap-in finish Thread(51:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 3270 offset = 198 page no = 3 Thread(50:3/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 39726 offset = 814 page no = 38 Thread(60:3/RU)
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(616),Device(1),Page(1:3/2),Diskblock(14),FileWrite,Openfile(74:3/1),Thread(47:3/W0)) this Page(1:3/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 18017 offset = 609 page no = 17 Thread(56:3/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(1:3/2)
[MMU][do_refer] address = 45774 offset = 718 page no = 44 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 21 Page(44:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(44:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(47:3/24)
[PageFaultHandler][do_handlePageFault] Frame(24) is dirty, do swap-out Thread(57:7/W0)
[PageFaultHandler][SwapOut] page Page(47:3/24) frame Frame(24)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 47
PageTableEntry][do_lock] iorb IORB(Id(617),Device(0),Page(47:3/24),Diskblock(111),FileWrite,Openfile(78:7/0),Thread(57:7/W1)) this Page(47:3/24)
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(618),Device(1),Page(1:3/2),Diskblock(29),FileWrite,Openfile(74:3/1),Thread(59:3/W0)) this Page(1:3/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(619),Device(1),Page(2:3/10),Diskblock(29),FileWrite,Openfile(74:3/1),Thread(14:3/W0)) this Page(2:3/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(47:3/24)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(24) Page(47:3/24) Thread(57:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(44:7/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(44:7/24) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(620),Device(0),Page(44:7/24),Diskblock(108),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(44:7/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:3/2)
[PageTableEntry][do_unlock] this Page(44:7/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(44:7/24) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 21430 offset = 950 page no = 20 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 22 Page(20:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(20:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] set Page(20:6/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(20:6/13) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(621),Device(0),Page(20:6/13),Diskblock(20),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(20:6/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(2:3/10)
[PageTableEntry][do_unlock] this Page(20:6/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(20:6/13) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageCleanDaemon][unleash] osp.Memory.PageCleanDaemon@1bf99cf5 execute time 100000
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(25)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(12)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(2)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(17)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(6)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(15)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(25)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(25) Page(22:3/25) isDirty true
[PageFaultHandler][SwapOut] file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 22
PageTableEntry][do_lock] iorb IORB(Id(622),Device(0),Page(22:3/25),Diskblock(150),FileWrite,Openfile(10:3/0),Thread(61:0/W1)) this Page(22:3/25)
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 100036/250000[MMU][do_refer] address = 4654 offset = 558 page no = 4 Thread(54:3/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 47534 offset = 430 page no = 46 Thread(54:3/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 8666 offset = 474 page no = 8 Thread(54:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(54:3/RU) 21 Page(8:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(54:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(54:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(8:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(43:3/22)
[PageFaultHandler][do_handlePageFault] set Page(8:3/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(8:3/22) do swap-in Thread(54:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(623),Device(0),Page(8:3/22),Diskblock(136),FileRead,Openfile(10:3/0),Thread(54:3/W1)) this Page(8:3/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 45152 offset = 96 page no = 44 Thread(49:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(49:3/RU) 22 Page(44:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(49:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(49:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(44:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(21:3/19)
[PageFaultHandler][do_handlePageFault] set Page(44:3/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(44:3/19) do swap-in Thread(49:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(624),Device(0),Page(44:3/19),Diskblock(172),FileRead,Openfile(10:3/0),Thread(49:3/W1)) this Page(44:3/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(22:3/25)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(25) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(12)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(12) Page(29:3/12) isDirty true
[PageFaultHandler][SwapOut] file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 29
PageTableEntry][do_lock] iorb IORB(Id(625),Device(0),Page(29:3/12),Diskblock(157),FileWrite,Openfile(10:3/0),Thread(61:0/W1)) this Page(29:3/12)
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 29422 offset = 750 page no = 28 Thread(50:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(50:3/RU) 22 Page(28:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(50:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(50:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(28:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(22:3/25)
[PageFaultHandler][do_handlePageFault] set Page(28:3/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(28:3/25) do swap-in Thread(50:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(626),Device(0),Page(28:3/25),Diskblock(156),FileRead,Openfile(10:3/0),Thread(50:3/W1)) this Page(28:3/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(8:3/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(8:3/22) swap-in finish Thread(54:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 5479 offset = 359 page no = 5 Thread(60:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(60:3/RU) 21 Page(5:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(60:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(60:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(7) for Page(5:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(7) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] set Page(5:3/null) and Frame(7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(5:3/7) do swap-in Thread(60:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(627),Device(0),Page(5:3/7),Diskblock(133),FileRead,Openfile(10:3/0),Thread(60:3/W1)) this Page(5:3/7)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(44:3/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(44:3/19) swap-in finish Thread(49:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 62420 offset = 980 page no = 60 Thread(47:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(47:3/RU) 21 Page(60:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(47:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(47:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(60:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(44:3/19)
[PageFaultHandler][do_handlePageFault] Frame(19) is dirty, do swap-out Thread(47:3/W0)
[PageFaultHandler][SwapOut] page Page(44:3/19) frame Frame(19)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 44
PageTableEntry][do_lock] iorb IORB(Id(628),Device(0),Page(44:3/19),Diskblock(172),FileWrite,Openfile(10:3/0),Thread(47:3/W1)) this Page(44:3/19)
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(29:3/12)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(12) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(2)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(2) Page(1:3/2) isDirty true
[PageFaultHandler][SwapOut] file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 1
PageTableEntry][do_lock] iorb IORB(Id(629),Device(0),Page(1:3/2),Diskblock(129),FileWrite,Openfile(10:3/0),Thread(61:0/W1)) this Page(1:3/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(28:3/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(28:3/25) swap-in finish Thread(50:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 63969 offset = 481 page no = 62 Thread(51:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(51:3/RU) 22 Page(62:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(51:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(51:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(62:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(29:3/12)
[PageFaultHandler][do_handlePageFault] set Page(62:3/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(62:3/12) do swap-in Thread(51:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(630),Device(0),Page(62:3/12),Diskblock(190),FileRead,Openfile(10:3/0),Thread(51:3/W1)) this Page(62:3/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(5:3/7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(5:3/7) swap-in finish Thread(60:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 16730 offset = 346 page no = 16 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 22 Page(16:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(7) for Page(16:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(7) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(5:3/7)
[PageFaultHandler][do_handlePageFault] set Page(16:7/null) and Frame(7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(16:7/7) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(631),Device(0),Page(16:7/7),Diskblock(80),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(16:7/7)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 101005/250000[PageTableEntry][do_unlock] this Page(44:3/19)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(19) Page(44:3/19) Thread(47:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(60:3/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(60:3/19) do swap-in Thread(47:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(632),Device(0),Page(60:3/19),Diskblock(188),FileRead,Openfile(10:3/0),Thread(47:3/W1)) this Page(60:3/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:3/2)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(2) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(17)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(17) Page(25:3/17) isDirty true
[PageFaultHandler][SwapOut] file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 25
PageTableEntry][do_lock] iorb IORB(Id(633),Device(0),Page(25:3/17),Diskblock(153),FileWrite,Openfile(10:3/0),Thread(61:0/W1)) this Page(25:3/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 42266 offset = 282 page no = 41 Thread(50:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(50:3/RU) 21 Page(41:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(50:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(50:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(41:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(1:3/2)
[PageFaultHandler][do_handlePageFault] set Page(41:3/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(41:3/2) do swap-in Thread(50:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(634),Device(0),Page(41:3/2),Diskblock(169),FileRead,Openfile(10:3/0),Thread(50:3/W1)) this Page(41:3/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 25813 offset = 213 page no = 25 Thread(56:3/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(62:3/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(62:3/12) swap-in finish Thread(51:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(16:7/7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(16:7/7) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(635),Device(1),Page(2:3/10),Diskblock(28),FileRead,Openfile(74:3/1),Thread(14:3/W0)) this Page(2:3/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 4933 offset = 837 page no = 4 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 21 Page(4:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(7) for Page(4:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(7) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(16:7/7)
[PageFaultHandler][do_handlePageFault] Frame(7) is dirty, do swap-out Thread(48:6/W0)
[PageFaultHandler][SwapOut] page Page(16:7/7) frame Frame(7)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 16
PageTableEntry][do_lock] iorb IORB(Id(636),Device(0),Page(16:7/7),Diskblock(16),FileWrite,Openfile(60:6/0),Thread(48:6/W1)) this Page(16:7/7)
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(2:3/10)
[MMU][do_refer] address = 62312 offset = 872 page no = 60 Thread(54:3/RU)
[PageTableEntry][do_unlock] this Page(60:3/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(60:3/19) swap-in finish Thread(47:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 52698 offset = 474 page no = 51 Thread(49:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(49:3/RU) 21 Page(51:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(49:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(49:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(51:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(60:3/19)
[PageFaultHandler][do_handlePageFault] Frame(19) is dirty, do swap-out Thread(49:3/W0)
[PageFaultHandler][SwapOut] page Page(60:3/19) frame Frame(19)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 60
PageTableEntry][do_lock] iorb IORB(Id(637),Device(0),Page(60:3/19),Diskblock(188),FileWrite,Openfile(10:3/0),Thread(49:3/W1)) this Page(60:3/19)
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(25:3/17)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(17) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(6)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(6) Page(23:3/6) isDirty true
[PageFaultHandler][SwapOut] file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 23
PageTableEntry][do_lock] iorb IORB(Id(638),Device(0),Page(23:3/6),Diskblock(151),FileWrite,Openfile(10:3/0),Thread(61:0/W1)) this Page(23:3/6)
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 36144 offset = 304 page no = 35 Thread(60:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(60:3/RU) 21 Page(35:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(60:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(60:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(35:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(25:3/17)
[PageFaultHandler][do_handlePageFault] set Page(35:3/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(35:3/17) do swap-in Thread(60:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(639),Device(0),Page(35:3/17),Diskblock(163),FileRead,Openfile(10:3/0),Thread(60:3/W1)) this Page(35:3/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 45195 offset = 139 page no = 44 Thread(54:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(54:3/RU) 22 Page(44:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(54:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(54:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(44:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] set Page(44:3/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(44:3/9) do swap-in Thread(54:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(640),Device(0),Page(44:3/9),Diskblock(172),FileRead,Openfile(10:3/0),Thread(54:3/W1)) this Page(44:3/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(41:3/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(41:3/2) swap-in finish Thread(50:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 4779 offset = 683 page no = 4 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 22 Page(4:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(4:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(41:3/2)
[PageFaultHandler][do_handlePageFault] set Page(4:7/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(4:7/2) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(641),Device(0),Page(4:7/2),Diskblock(68),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(4:7/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:7/7)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(7) Page(16:7/7) Thread(48:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(4:6/null) and Frame(7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(4:6/7) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(642),Device(0),Page(4:6/7),Diskblock(4),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(4:6/7)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 102040/250000[PageTableEntry][do_unlock] this Page(60:3/19)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(19) Page(60:3/19) Thread(49:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(51:3/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(51:3/19) do swap-in Thread(49:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(643),Device(0),Page(51:3/19),Diskblock(179),FileRead,Openfile(10:3/0),Thread(49:3/W1)) this Page(51:3/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 21212 offset = 732 page no = 20 Thread(50:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(50:3/RU) 22 Page(20:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(50:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(50:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(20:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(3:3/27)
[PageFaultHandler][do_handlePageFault] Frame(27) is dirty, do swap-out Thread(50:3/W0)
[PageFaultHandler][SwapOut] page Page(3:3/27) frame Frame(27)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 3
PageTableEntry][do_lock] iorb IORB(Id(644),Device(0),Page(3:3/27),Diskblock(131),FileWrite,Openfile(10:3/0),Thread(50:3/W1)) this Page(3:3/27)
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(23:3/6)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(6) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(15)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(15) Page(46:3/15) isDirty true
[PageFaultHandler][SwapOut] file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 46
PageTableEntry][do_lock] iorb IORB(Id(645),Device(0),Page(46:3/15),Diskblock(174),FileWrite,Openfile(10:3/0),Thread(61:0/W1)) this Page(46:3/15)
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 62329 offset = 889 page no = 60 Thread(47:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(47:3/RU) 22 Page(60:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(47:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(47:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(60:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] set Page(60:3/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(60:3/14) do swap-in Thread(47:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(646),Device(0),Page(60:3/14),Diskblock(188),FileRead,Openfile(10:3/0),Thread(47:3/W1)) this Page(60:3/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 30750 offset = 30 page no = 30 Thread(14:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(14:3/RU) 21 Page(30:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(14:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(14:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(30:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(6:3/29)
[PageFaultHandler][do_handlePageFault] Frame(29) is dirty, do swap-out Thread(14:3/W0)
[PageFaultHandler][SwapOut] page Page(6:3/29) frame Frame(29)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 6
PageTableEntry][do_lock] iorb IORB(Id(647),Device(0),Page(6:3/29),Diskblock(134),FileWrite,Openfile(10:3/0),Thread(14:3/W1)) this Page(6:3/29)
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(648),Device(1),Page(2:3/10),Diskblock(13),FileRead,Openfile(74:3/1),Thread(55:3/W0)) this Page(2:3/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(2:3/10)
[PageTableEntry][do_unlock] this Page(35:3/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(35:3/17) swap-in finish Thread(60:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(44:3/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(44:3/9) swap-in finish Thread(54:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(4:7/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(4:7/2) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 31473 offset = 753 page no = 30 Thread(55:3/RU)
[PageTableEntry][do_unlock] this Page(4:6/7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(4:6/7) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 43013 offset = 5 page no = 42 Thread(54:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(54:3/RU) 22 Page(42:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(54:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(54:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(42:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(44:3/9)
[PageFaultHandler][do_handlePageFault] Frame(9) is dirty, do swap-out Thread(54:3/W0)
[PageFaultHandler][SwapOut] page Page(44:3/9) frame Frame(9)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 44
PageTableEntry][do_lock] iorb IORB(Id(649),Device(0),Page(44:3/9),Diskblock(172),FileWrite,Openfile(10:3/0),Thread(54:3/W1)) this Page(44:3/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(650),Device(1),Page(4:6/7),Diskblock(29),FileRead,Openfile(74:3/1),Thread(48:6/W0)) this Page(4:6/7)
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 60571 offset = 155 page no = 59 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 21 Page(59:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(59:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(17:3/28)
[PageFaultHandler][do_handlePageFault] Frame(28) is dirty, do swap-out Thread(57:7/W0)
[PageFaultHandler][SwapOut] page Page(17:3/28) frame Frame(28)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 17
PageTableEntry][do_lock] iorb IORB(Id(651),Device(0),Page(17:3/28),Diskblock(81),FileWrite,Openfile(78:7/0),Thread(57:7/W1)) this Page(17:3/28)
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(4:6/7)
[PageTableEntry][do_unlock] this Page(51:3/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(51:3/19) swap-in finish Thread(49:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(652),Device(1),Page(2:3/10),Diskblock(13),FileWrite,Openfile(74:3/1),Thread(49:3/W0)) this Page(2:3/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(2:3/10)
[PageTableEntry][do_unlock] this Page(3:3/27)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(27) Page(3:3/27) Thread(50:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(20:3/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(20:3/27) do swap-in Thread(50:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(653),Device(0),Page(20:3/27),Diskblock(148),FileRead,Openfile(10:3/0),Thread(50:3/W1)) this Page(20:3/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 103006/250000[MMU][do_refer] address = 11652 offset = 388 page no = 11 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 22 Page(11:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(11:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(34:3/26)
[PageFaultHandler][do_handlePageFault] Frame(26) is dirty, do swap-out Thread(48:6/W0)
[PageFaultHandler][SwapOut] page Page(34:3/26) frame Frame(26)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 34
PageTableEntry][do_lock] iorb IORB(Id(654),Device(0),Page(34:3/26),Diskblock(34),FileWrite,Openfile(60:6/0),Thread(48:6/W1)) this Page(34:3/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(46:3/15)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(15) finish
[PageTableEntry][do_unlock] this Page(60:3/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(60:3/14) swap-in finish Thread(47:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 65264 offset = 752 page no = 63 Thread(47:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(47:3/RU) 21 Page(63:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(47:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(47:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(63:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(46:3/15)
[PageFaultHandler][do_handlePageFault] set Page(63:3/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(63:3/15) do swap-in Thread(47:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(655),Device(0),Page(63:3/15),Diskblock(191),FileRead,Openfile(10:3/0),Thread(47:3/W1)) this Page(63:3/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(6:3/29)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(29) Page(6:3/29) Thread(14:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(30:3/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(30:3/29) do swap-in Thread(14:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(656),Device(0),Page(30:3/29),Diskblock(158),FileRead,Openfile(10:3/0),Thread(14:3/W1)) this Page(30:3/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(44:3/9)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(9) Page(44:3/9) Thread(54:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(42:3/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(42:3/9) do swap-in Thread(54:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(657),Device(0),Page(42:3/9),Diskblock(170),FileRead,Openfile(10:3/0),Thread(54:3/W1)) this Page(42:3/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(17:3/28)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(28) Page(17:3/28) Thread(57:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(59:7/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(59:7/28) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(658),Device(0),Page(59:7/28),Diskblock(123),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(59:7/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(20:3/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(20:3/27) swap-in finish Thread(50:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(659),Device(1),Page(2:3/10),Diskblock(12),FileRead,Openfile(74:3/1),Thread(50:3/W0)) this Page(2:3/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(2:3/10)
[PageTableEntry][do_unlock] this Page(34:3/26)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(26) Page(34:3/26) Thread(48:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(11:6/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(11:6/26) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(660),Device(0),Page(11:6/26),Diskblock(11),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(11:6/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(661),Device(1),Page(2:3/10),Diskblock(12),FileWrite,Openfile(74:3/1),Thread(50:3/W0)) this Page(2:3/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 104020/250000[PageTableEntry][do_unlock] this Page(2:3/10)
[PageTableEntry][do_unlock] this Page(63:3/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(63:3/15) swap-in finish Thread(47:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(30:3/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(30:3/29) swap-in finish Thread(14:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(42:3/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(42:3/9) swap-in finish Thread(54:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 59787 offset = 395 page no = 58 Thread(50:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(50:3/RU) 21 Page(58:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(50:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(50:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(58:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(42:3/9)
[PageFaultHandler][do_handlePageFault] Frame(9) is dirty, do swap-out Thread(50:3/W0)
[PageFaultHandler][SwapOut] page Page(42:3/9) frame Frame(9)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 42
PageTableEntry][do_lock] iorb IORB(Id(662),Device(0),Page(42:3/9),Diskblock(170),FileWrite,Openfile(10:3/0),Thread(50:3/W1)) this Page(42:3/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(59:7/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(59:7/28) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 34674 offset = 882 page no = 33 Thread(54:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(54:3/RU) 21 Page(33:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(54:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(54:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(33:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(59:7/28)
[PageFaultHandler][do_handlePageFault] set Page(33:3/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(33:3/28) do swap-in Thread(54:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(663),Device(0),Page(33:3/28),Diskblock(161),FileRead,Openfile(10:3/0),Thread(54:3/W1)) this Page(33:3/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 659 offset = 659 page no = 0 Thread(55:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(55:3/RU) 22 Page(0:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(55:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(55:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(0:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(38:3/5)
[PageFaultHandler][do_handlePageFault] Frame(5) is dirty, do swap-out Thread(55:3/W0)
[PageFaultHandler][SwapOut] page Page(38:3/5) frame Frame(5)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 38
PageTableEntry][do_lock] iorb IORB(Id(664),Device(0),Page(38:3/5),Diskblock(166),FileWrite,Openfile(10:3/0),Thread(55:3/W1)) this Page(38:3/5)
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(11:6/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(11:6/26) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 50690 offset = 514 page no = 49 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 21 Page(49:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(49:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(52:3/20)
[PageFaultHandler][do_handlePageFault] Frame(20) is dirty, do swap-out Thread(57:7/W0)
[PageFaultHandler][SwapOut] page Page(52:3/20) frame Frame(20)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 52
PageTableEntry][do_lock] iorb IORB(Id(665),Device(0),Page(52:3/20),Diskblock(116),FileWrite,Openfile(78:7/0),Thread(57:7/W1)) this Page(52:3/20)
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 65317 offset = 805 page no = 63 Thread(51:3/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(42:3/9)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(9) Page(42:3/9) Thread(50:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(58:3/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(58:3/9) do swap-in Thread(50:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(666),Device(0),Page(58:3/9),Diskblock(186),FileRead,Openfile(10:3/0),Thread(50:3/W1)) this Page(58:3/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 20950 offset = 470 page no = 20 Thread(47:3/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(33:3/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(33:3/28) swap-in finish Thread(54:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 48391 offset = 263 page no = 47 Thread(51:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(51:3/RU) 22 Page(47:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(51:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(51:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(47:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(39:3/0)
[PageFaultHandler][do_handlePageFault] set Page(47:3/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(47:3/0) do swap-in Thread(51:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(667),Device(0),Page(47:3/0),Diskblock(175),FileRead,Openfile(10:3/0),Thread(51:3/W1)) this Page(47:3/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 105025/250000[PageTableEntry][do_unlock] this Page(38:3/5)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(5) Page(38:3/5) Thread(55:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(0:3/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(0:3/5) do swap-in Thread(55:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(668),Device(0),Page(0:3/5),Diskblock(128),FileRead,Openfile(10:3/0),Thread(55:3/W1)) this Page(0:3/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(52:3/20)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(20) Page(52:3/20) Thread(57:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(49:7/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(49:7/20) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(669),Device(0),Page(49:7/20),Diskblock(113),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(49:7/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 30383 offset = 687 page no = 29 Thread(47:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(47:3/RU) 22 Page(29:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(47:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(47:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(29:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(5:7/3)
[PageFaultHandler][do_handlePageFault] set Page(29:3/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(29:3/3) do swap-in Thread(47:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(670),Device(0),Page(29:3/3),Diskblock(157),FileRead,Openfile(10:3/0),Thread(47:3/W1)) this Page(29:3/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 18204 offset = 796 page no = 17 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 21 Page(17:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(17:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(10:3/23)
[PageFaultHandler][do_handlePageFault] set Page(17:6/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(17:6/23) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(671),Device(0),Page(17:6/23),Diskblock(17),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(17:6/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 2889 offset = 841 page no = 2 Thread(54:3/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 52621 offset = 397 page no = 51 Thread(54:3/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(58:3/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(58:3/9) swap-in finish Thread(50:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 2958 offset = 910 page no = 2 Thread(50:3/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(47:3/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(47:3/0) swap-in finish Thread(51:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 49455 offset = 303 page no = 48 Thread(54:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(54:3/RU) 21 Page(48:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(54:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(54:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(48:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(47:3/0)
[PageFaultHandler][do_handlePageFault] Frame(0) is dirty, do swap-out Thread(54:3/W0)
[PageFaultHandler][SwapOut] page Page(47:3/0) frame Frame(0)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 47
PageTableEntry][do_lock] iorb IORB(Id(672),Device(0),Page(47:3/0),Diskblock(175),FileWrite,Openfile(10:3/0),Thread(54:3/W1)) this Page(47:3/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:3/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(0:3/5) swap-in finish Thread(55:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(49:7/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(49:7/20) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 46377 offset = 297 page no = 45 Thread(55:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(55:3/RU) 21 Page(45:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(55:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(55:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(45:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(0:3/5)
[PageFaultHandler][do_handlePageFault] Frame(5) is dirty, do swap-out Thread(55:3/W0)
[PageFaultHandler][SwapOut] page Page(0:3/5) frame Frame(5)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 0
PageTableEntry][do_lock] iorb IORB(Id(673),Device(0),Page(0:3/5),Diskblock(128),FileWrite,Openfile(10:3/0),Thread(55:3/W1)) this Page(0:3/5)
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(29:3/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(29:3/3) swap-in finish Thread(47:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(17:6/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(17:6/23) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 1237 offset = 213 page no = 1 Thread(47:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(47:3/RU) 22 Page(1:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(47:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(47:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(1:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(49:7/20)
[PageFaultHandler][do_handlePageFault] set Page(1:3/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(1:3/20) do swap-in Thread(47:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(674),Device(0),Page(1:3/20),Diskblock(129),FileRead,Openfile(10:3/0),Thread(47:3/W1)) this Page(1:3/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 59480 offset = 88 page no = 58 Thread(51:3/RU)
[MMU][do_refer] Do memory read.
Simulation progress: 106083/250000[PageTableEntry][do_unlock] this Page(47:3/0)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(0) Page(47:3/0) Thread(54:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(48:3/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(48:3/0) do swap-in Thread(54:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(675),Device(0),Page(48:3/0),Diskblock(176),FileRead,Openfile(10:3/0),Thread(54:3/W1)) this Page(48:3/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:3/5)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(5) Page(0:3/5) Thread(55:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(45:3/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(45:3/5) do swap-in Thread(55:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(676),Device(0),Page(45:3/5),Diskblock(173),FileRead,Openfile(10:3/0),Thread(55:3/W1)) this Page(45:3/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:3/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(1:3/20) swap-in finish Thread(47:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 1129 offset = 105 page no = 1 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 21 Page(1:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(1:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(17:6/23)
[PageFaultHandler][do_handlePageFault] set Page(1:6/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(1:6/23) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(677),Device(0),Page(1:6/23),Diskblock(1),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(1:6/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 9381 offset = 165 page no = 9 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 21 Page(9:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(9:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(44:7/24)
[PageFaultHandler][do_handlePageFault] set Page(9:7/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(9:7/24) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(678),Device(0),Page(9:7/24),Diskblock(73),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(9:7/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 64860 offset = 348 page no = 63 Thread(51:3/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 17377 offset = 993 page no = 16 Thread(51:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(51:3/RU) 21 Page(16:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(51:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(51:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(16:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(8:3/22)
[PageFaultHandler][do_handlePageFault] set Page(16:3/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(16:3/22) do swap-in Thread(51:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(679),Device(0),Page(16:3/22),Diskblock(144),FileRead,Openfile(10:3/0),Thread(51:3/W1)) this Page(16:3/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(48:3/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(48:3/0) swap-in finish Thread(54:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(45:3/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(45:3/5) swap-in finish Thread(55:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(1:6/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(1:6/23) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 53973 offset = 725 page no = 52 Thread(47:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(47:3/RU) 21 Page(52:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(47:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(47:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(52:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(1:6/23)
[PageFaultHandler][do_handlePageFault] set Page(52:3/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(52:3/23) do swap-in Thread(47:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(680),Device(0),Page(52:3/23),Diskblock(180),FileRead,Openfile(10:3/0),Thread(47:3/W1)) this Page(52:3/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 32257 offset = 513 page no = 31 Thread(55:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(55:3/RU) 21 Page(31:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(55:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(55:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(31:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(28:3/25)
[PageFaultHandler][do_handlePageFault] Frame(25) is dirty, do swap-out Thread(55:3/W0)
[PageFaultHandler][SwapOut] page Page(28:3/25) frame Frame(25)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 28
PageTableEntry][do_lock] iorb IORB(Id(681),Device(0),Page(28:3/25),Diskblock(156),FileWrite,Openfile(10:3/0),Thread(55:3/W1)) this Page(28:3/25)
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(9:7/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(9:7/24) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 107005/250000[PageTableEntry][do_unlock] this Page(16:3/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(16:3/22) swap-in finish Thread(51:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 59087 offset = 719 page no = 57 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 21 Page(57:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(57:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(62:3/12)
[PageFaultHandler][do_handlePageFault] Frame(12) is dirty, do swap-out Thread(57:7/W0)
[PageFaultHandler][SwapOut] page Page(62:3/12) frame Frame(12)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 62
PageTableEntry][do_lock] iorb IORB(Id(682),Device(0),Page(62:3/12),Diskblock(126),FileWrite,Openfile(78:7/0),Thread(57:7/W1)) this Page(62:3/12)
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(52:3/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(52:3/23) swap-in finish Thread(47:3/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(28:3/25)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(25) Page(28:3/25) Thread(55:3/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(31:3/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(31:3/25) do swap-in Thread(55:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(683),Device(0),Page(31:3/25),Diskblock(159),FileRead,Openfile(10:3/0),Thread(55:3/W1)) this Page(31:3/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 58805 offset = 437 page no = 57 Thread(47:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(47:3/RU) 22 Page(57:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(47:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(47:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(7) for Page(57:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(7) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(4:6/7)
[PageFaultHandler][do_handlePageFault] Frame(7) is dirty, do swap-out Thread(47:3/W0)
[PageFaultHandler][SwapOut] page Page(4:6/7) frame Frame(7)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 4
PageTableEntry][do_lock] iorb IORB(Id(684),Device(0),Page(4:6/7),Diskblock(132),FileWrite,Openfile(10:3/0),Thread(47:3/W1)) this Page(4:6/7)
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(62:3/12)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(12) Page(62:3/12) Thread(57:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(57:7/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(57:7/12) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(685),Device(0),Page(57:7/12),Diskblock(121),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(57:7/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 39391 offset = 479 page no = 38 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 22 Page(38:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(38:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(35:3/17)
[PageFaultHandler][do_handlePageFault] set Page(38:6/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(38:6/17) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(686),Device(0),Page(38:6/17),Diskblock(38),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(38:6/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 33441 offset = 673 page no = 32 Thread(50:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(50:3/RU) 22 Page(32:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(50:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(50:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(32:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(51:3/19)
[PageFaultHandler][do_handlePageFault] set Page(32:3/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(32:3/19) do swap-in Thread(50:3/W0)
PageTableEntry][do_lock] iorb IORB(Id(687),Device(0),Page(32:3/19),Diskblock(160),FileRead,Openfile(10:3/0),Thread(50:3/W1)) this Page(32:3/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 13844 offset = 532 page no = 13 Thread(51:3/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(51:3/RU) 21 Page(13:3/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(51:3/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(51:3/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(13:3/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(3/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(60:3/14)
[PageFaultHandler][do_handlePageFault] Frame(14) is dirty, do swap-out Thread(51:3/W0)
[PageFaultHandler][SwapOut] page Page(60:3/14) frame Frame(14)file Openfile(10:3/0)
[PageFaultHandler][SwapOut] block no 60
PageTableEntry][do_lock] iorb IORB(Id(688),Device(0),Page(60:3/14),Diskblock(188),FileWrite,Openfile(10:3/0),Thread(51:3/W1)) this Page(60:3/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(60:3/14)
[PageTableEntry][do_unlock] this Page(32:3/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(32:3/null) swap-in finish Thread(50:3/KL)
[PageFaultHandler][do_handlePageFault] Thread already killed after swap-in
[MMU][do_refer] return from interrupt
[PageTableEntry][do_unlock] this Page(4:6/7)
[PageTable][do_deallocateMemory] this Pagetable(Task(3/T))
[PageTable][do_deallocateMemory]  page_table_entry Page(1:3/20) frame_table_entry Frame(20)
[PageTable][do_deallocateMemory]  page_table_entry Page(2:3/10) frame_table_entry Frame(10)
[PageTable][do_deallocateMemory]  page_table_entry Page(4:3/21) frame_table_entry Frame(21)
[PageTable][do_deallocateMemory]  page_table_entry Page(9:3/18) frame_table_entry Frame(18)
[PageTable][do_deallocateMemory]  page_table_entry Page(16:3/22) frame_table_entry Frame(22)
[PageTable][do_deallocateMemory]  page_table_entry Page(18:3/11) frame_table_entry Frame(11)
[PageTable][do_deallocateMemory]  page_table_entry Page(20:3/27) frame_table_entry Frame(27)
[PageTable][do_deallocateMemory]  page_table_entry Page(23:3/6) frame_table_entry Frame(6)
[PageTable][do_deallocateMemory]  page_table_entry Page(29:3/3) frame_table_entry Frame(3)
[PageTable][do_deallocateMemory]  page_table_entry Page(30:3/29) frame_table_entry Frame(29)
[PageTable][do_deallocateMemory]  page_table_entry Page(31:3/25) frame_table_entry Frame(25)
[PageTable][do_deallocateMemory] owner_task Task(3/T)
[PageTable][do_deallocateMemory]  page_table_entry Page(33:3/28) frame_table_entry Frame(28)
[PageTable][do_deallocateMemory]  page_table_entry Page(45:3/5) frame_table_entry Frame(5)
[PageTable][do_deallocateMemory]  page_table_entry Page(48:3/0) frame_table_entry Frame(0)
[PageTable][do_deallocateMemory]  page_table_entry Page(49:3/8) frame_table_entry Frame(8)
[PageTable][do_deallocateMemory]  page_table_entry Page(52:3/23) frame_table_entry Frame(23)
[PageTable][do_deallocateMemory]  page_table_entry Page(55:3/16) frame_table_entry Frame(16)
[PageTable][do_deallocateMemory]  page_table_entry Page(58:3/9) frame_table_entry Frame(9)
[PageTable][do_deallocateMemory]  page_table_entry Page(60:3/14) frame_table_entry Frame(14)
[PageTable][do_deallocateMemory] owner_task Task(3/T)
[PageTable][do_deallocateMemory]  page_table_entry Page(63:3/15) frame_table_entry Frame(15)
[PageTableEntry][do_unlock] this Page(31:3/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(31:3/25) swap-in finish Thread(55:3/KL)
[PageFaultHandler][do_handlePageFault] Thread already killed after swap-in
[MMU][do_refer] return from interrupt
[PageTableEntry][do_unlock] this Page(57:7/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(57:7/12) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(689),Device(1),Page(4:7/2),Diskblock(32),FileWrite,Openfile(86:7/1),Thread(62:7/W0)) this Page(4:7/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(38:6/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(38:6/17) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(690),Device(1),Page(11:6/26),Diskblock(32),FileWrite,Openfile(86:7/1),Thread(48:6/W0)) this Page(11:6/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(4:7/2)
[PageTableEntry][do_unlock] this Page(11:6/26)
[MMU][do_refer] address = 21397 offset = 917 page no = 20 Thread(62:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(62:7/RU) 21 Page(20:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(62:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(62:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(20:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] set Page(20:7/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(20:7/25) do swap-in Thread(62:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(691),Device(0),Page(20:7/25),Diskblock(84),FileRead,Openfile(78:7/0),Thread(62:7/W1)) this Page(20:7/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 108021/250000[PageTableEntry][do_unlock] this Page(20:7/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(20:7/25) swap-in finish Thread(62:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 21185 offset = 705 page no = 20 Thread(64:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(64:8/RU) 22 Page(20:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(64:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(64:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(20:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(57:7/12)
[PageFaultHandler][do_handlePageFault] set Page(20:8/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(20:8/12) do swap-in Thread(64:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(692),Device(0),Page(20:8/12),Diskblock(148),FileRead,Openfile(88:8/0),Thread(64:8/W1)) this Page(20:8/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 12927 offset = 639 page no = 12 Thread(65:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(65:8/RU) 21 Page(12:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(65:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(65:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(12:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(38:6/17)
[PageFaultHandler][do_handlePageFault] Frame(17) is dirty, do swap-out Thread(65:8/W0)
[PageFaultHandler][SwapOut] page Page(38:6/17) frame Frame(17)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 38
PageTableEntry][do_lock] iorb IORB(Id(693),Device(0),Page(38:6/17),Diskblock(166),FileWrite,Openfile(88:8/0),Thread(65:8/W1)) this Page(38:6/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(20:8/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(20:8/12) swap-in finish Thread(64:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 4763 offset = 667 page no = 4 Thread(57:7/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 35328 offset = 512 page no = 34 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 22 Page(34:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(34:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] set Page(34:7/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(34:7/14) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(694),Device(0),Page(34:7/14),Diskblock(98),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(34:7/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 24848 offset = 272 page no = 24 Thread(62:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(62:7/RU) 21 Page(24:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(62:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(62:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(24:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(4:7/2)
[PageFaultHandler][do_handlePageFault] Frame(2) is dirty, do swap-out Thread(62:7/W0)
[PageFaultHandler][SwapOut] page Page(4:7/2) frame Frame(2)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 4
PageTableEntry][do_lock] iorb IORB(Id(695),Device(0),Page(4:7/2),Diskblock(68),FileWrite,Openfile(78:7/0),Thread(62:7/W1)) this Page(4:7/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(38:6/17)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(17) Page(38:6/17) Thread(65:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(12:8/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(12:8/17) do swap-in Thread(65:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(696),Device(0),Page(12:8/17),Diskblock(140),FileRead,Openfile(88:8/0),Thread(65:8/W1)) this Page(12:8/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(34:7/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(34:7/14) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(4:7/2)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(2) Page(4:7/2) Thread(62:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(24:7/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(24:7/2) do swap-in Thread(62:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(697),Device(0),Page(24:7/2),Diskblock(88),FileRead,Openfile(78:7/0),Thread(62:7/W1)) this Page(24:7/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 109060/250000[MMU][do_refer] address = 46106 offset = 26 page no = 45 Thread(67:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(67:7/RU) 21 Page(45:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(67:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(67:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(45:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] set Page(45:7/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(45:7/21) do swap-in Thread(67:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(698),Device(0),Page(45:7/21),Diskblock(109),FileRead,Openfile(78:7/0),Thread(67:7/W1)) this Page(45:7/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(12:8/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(12:8/17) swap-in finish Thread(65:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(24:7/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(24:7/2) swap-in finish Thread(62:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(45:7/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(45:7/21) swap-in finish Thread(67:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 32412 offset = 668 page no = 31 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 22 Page(31:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(31:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(12:8/17)
[PageFaultHandler][do_handlePageFault] set Page(31:7/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(31:7/17) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(699),Device(0),Page(31:7/17),Diskblock(95),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(31:7/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(31:7/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(31:7/17) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 110020/250000[MMU][do_refer] address = 13799 offset = 487 page no = 13 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 22 Page(13:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(13:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(45:7/21)
[PageFaultHandler][do_handlePageFault] set Page(13:6/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(13:6/21) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(700),Device(0),Page(13:6/21),Diskblock(13),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(13:6/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 19929 offset = 473 page no = 19 Thread(69:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(69:7/RU) 22 Page(19:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(69:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(69:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(19:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(11:6/26)
[PageFaultHandler][do_handlePageFault] Frame(26) is dirty, do swap-out Thread(69:7/W0)
[PageFaultHandler][SwapOut] page Page(11:6/26) frame Frame(26)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 11
PageTableEntry][do_lock] iorb IORB(Id(701),Device(0),Page(11:6/26),Diskblock(75),FileWrite,Openfile(78:7/0),Thread(69:7/W1)) this Page(11:6/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(13:6/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(13:6/21) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(11:6/26)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(26) Page(11:6/26) Thread(69:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(19:7/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(19:7/26) do swap-in Thread(69:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(702),Device(0),Page(19:7/26),Diskblock(83),FileRead,Openfile(78:7/0),Thread(69:7/W1)) this Page(19:7/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(19:7/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(19:7/26) swap-in finish Thread(69:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 4566 offset = 470 page no = 4 Thread(63:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(63:8/RU) 22 Page(4:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(63:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(63:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(4:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(19:7/26)
[PageFaultHandler][do_handlePageFault] Frame(26) is dirty, do swap-out Thread(63:8/W0)
[PageFaultHandler][SwapOut] page Page(19:7/26) frame Frame(26)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 19
PageTableEntry][do_lock] iorb IORB(Id(703),Device(0),Page(19:7/26),Diskblock(147),FileWrite,Openfile(88:8/0),Thread(63:8/W1)) this Page(19:7/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 56472 offset = 152 page no = 55 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 22 Page(55:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(55:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] set Page(55:7/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(55:7/10) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(704),Device(0),Page(55:7/10),Diskblock(119),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(55:7/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(705),Device(1),Page(0:7/null),Diskblock(32),FileWrite,Openfile(90:8/1),Thread(62:7/W0)) this Page(0:7/null)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] validating_thread is null, handlePageFault
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(62:7/W0) 23 Page(0:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(62:7/W0) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(62:7/W1) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(0:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] set Page(0:7/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(0:7/29) do swap-in Thread(62:7/W1)
PageTableEntry][do_lock] iorb IORB(Id(706),Device(0),Page(0:7/29),Diskblock(64),FileRead,Openfile(78:7/0),Thread(62:7/W2)) this Page(0:7/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(19:7/26)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(26) Page(19:7/26) Thread(63:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(4:8/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(4:8/26) do swap-in Thread(63:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(707),Device(0),Page(4:8/26),Diskblock(132),FileRead,Openfile(88:8/0),Thread(63:8/W1)) this Page(4:8/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 28047 offset = 399 page no = 27 Thread(71:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(71:7/RU) 21 Page(27:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(71:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(71:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(27:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(25:7/1)
[PageFaultHandler][do_handlePageFault] Frame(1) is dirty, do swap-out Thread(71:7/W0)
[PageFaultHandler][SwapOut] page Page(25:7/1) frame Frame(1)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 25
PageTableEntry][do_lock] iorb IORB(Id(708),Device(0),Page(25:7/1),Diskblock(89),FileWrite,Openfile(78:7/0),Thread(71:7/W1)) this Page(25:7/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 26606 offset = 1006 page no = 25 Thread(67:7/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(55:7/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(55:7/10) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 63408 offset = 944 page no = 61 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 21 Page(61:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(61:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] set Page(61:6/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(61:6/16) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(709),Device(0),Page(61:6/16),Diskblock(61),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(61:6/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:7/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(0:7/29) swap-in finish Thread(62:7/W1)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 32011 offset = 267 page no = 31 Thread(69:7/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(0:7/29)
[MMU][do_refer] address = 12265 offset = 1001 page no = 11 Thread(65:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(65:8/RU) 21 Page(11:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(65:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(65:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(11:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(0:7/29)
[PageFaultHandler][do_handlePageFault] set Page(11:8/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(11:8/29) do swap-in Thread(65:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(710),Device(0),Page(11:8/29),Diskblock(139),FileRead,Openfile(88:8/0),Thread(65:8/W1)) this Page(11:8/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(4:8/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(4:8/26) swap-in finish Thread(63:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 55309 offset = 13 page no = 54 Thread(70:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(70:8/RU) 21 Page(54:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(70:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(70:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(54:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] set Page(54:8/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(54:8/28) do swap-in Thread(70:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(711),Device(0),Page(54:8/28),Diskblock(182),FileRead,Openfile(88:8/0),Thread(70:8/W1)) this Page(54:8/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(25:7/1)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(1) Page(25:7/1) Thread(71:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(27:7/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(27:7/1) do swap-in Thread(71:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(712),Device(0),Page(27:7/1),Diskblock(91),FileRead,Openfile(78:7/0),Thread(71:7/W1)) this Page(27:7/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 2489 offset = 441 page no = 2 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 21 Page(2:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(2:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] set Page(2:7/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(2:7/9) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(713),Device(0),Page(2:7/9),Diskblock(66),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(2:7/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(61:6/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(61:6/16) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(714),Device(1),Page(9:7/24),Diskblock(31),FileWrite,Openfile(90:8/1),Thread(68:7/W0)) this Page(9:7/24)
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 111008/250000[PageTableEntry][do_unlock] this Page(9:7/24)
[PageTableEntry][do_unlock] this Page(11:8/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(11:8/29) swap-in finish Thread(65:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 37863 offset = 999 page no = 36 Thread(62:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(62:7/RU) 21 Page(36:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(62:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(62:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(36:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(11:8/29)
[PageFaultHandler][do_handlePageFault] set Page(36:7/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(36:7/29) do swap-in Thread(62:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(715),Device(0),Page(36:7/29),Diskblock(100),FileRead,Openfile(78:7/0),Thread(62:7/W1)) this Page(36:7/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(716),Device(1),Page(9:7/24),Diskblock(32),FileRead,Openfile(90:8/1),Thread(69:7/W0)) this Page(9:7/24)
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(54:8/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(54:8/28) swap-in finish Thread(70:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(9:7/24)
[PageTableEntry][do_unlock] this Page(27:7/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(27:7/1) swap-in finish Thread(71:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 41 offset = 41 page no = 0 Thread(67:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(67:7/RU) 22 Page(0:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(67:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(67:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(0:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(54:8/28)
[PageFaultHandler][do_handlePageFault] set Page(0:7/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(0:7/28) do swap-in Thread(67:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(717),Device(0),Page(0:7/28),Diskblock(64),FileRead,Openfile(78:7/0),Thread(67:7/W1)) this Page(0:7/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(2:7/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(2:7/9) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 42075 offset = 91 page no = 41 Thread(73:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(73:7/RU) 21 Page(41:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(73:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(73:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(41:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] set Page(41:7/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(41:7/0) do swap-in Thread(73:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(718),Device(0),Page(41:7/0),Diskblock(105),FileRead,Openfile(78:7/0),Thread(73:7/W1)) this Page(41:7/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 62898 offset = 434 page no = 61 Thread(65:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(65:8/RU) 22 Page(61:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(65:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(65:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(61:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] set Page(61:8/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(61:8/6) do swap-in Thread(65:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(719),Device(0),Page(61:8/6),Diskblock(189),FileRead,Openfile(88:8/0),Thread(65:8/W1)) this Page(61:8/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 10907 offset = 667 page no = 10 Thread(66:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(66:7/RU) 22 Page(10:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(66:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(66:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(10:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] set Page(10:7/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(10:7/20) do swap-in Thread(66:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(720),Device(0),Page(10:7/20),Diskblock(74),FileRead,Openfile(78:7/0),Thread(66:7/W1)) this Page(10:7/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 16467 offset = 83 page no = 16 Thread(70:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(70:8/RU) 22 Page(16:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(70:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(70:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(16:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(9:7/24)
[PageFaultHandler][do_handlePageFault] Frame(24) is dirty, do swap-out Thread(70:8/W0)
[PageFaultHandler][SwapOut] page Page(9:7/24) frame Frame(24)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 9
PageTableEntry][do_lock] iorb IORB(Id(721),Device(0),Page(9:7/24),Diskblock(137),FileWrite,Openfile(88:8/0),Thread(70:8/W1)) this Page(9:7/24)
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(36:7/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(36:7/29) swap-in finish Thread(62:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(0:7/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(0:7/28) swap-in finish Thread(67:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(41:7/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(41:7/0) swap-in finish Thread(73:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(61:8/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(61:8/6) swap-in finish Thread(65:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(10:7/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(10:7/20) swap-in finish Thread(66:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 44198 offset = 166 page no = 43 Thread(62:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(62:7/RU) 21 Page(43:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(62:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(62:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(43:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(0:7/28)
[PageFaultHandler][do_handlePageFault] Frame(28) is dirty, do swap-out Thread(62:7/W0)
[PageFaultHandler][SwapOut] page Page(0:7/28) frame Frame(28)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 0
PageTableEntry][do_lock] iorb IORB(Id(722),Device(0),Page(0:7/28),Diskblock(64),FileWrite,Openfile(78:7/0),Thread(62:7/W1)) this Page(0:7/28)
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 112006/250000[PageTableEntry][do_unlock] this Page(9:7/24)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(24) Page(9:7/24) Thread(70:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(16:8/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(16:8/24) do swap-in Thread(70:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(723),Device(0),Page(16:8/24),Diskblock(144),FileRead,Openfile(88:8/0),Thread(70:8/W1)) this Page(16:8/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:7/28)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(28) Page(0:7/28) Thread(62:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(43:7/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(43:7/28) do swap-in Thread(62:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(724),Device(0),Page(43:7/28),Diskblock(107),FileRead,Openfile(78:7/0),Thread(62:7/W1)) this Page(43:7/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 60814 offset = 398 page no = 59 Thread(69:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(69:7/RU) 21 Page(59:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(69:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(69:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(59:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(61:8/6)
[PageFaultHandler][do_handlePageFault] Frame(6) is dirty, do swap-out Thread(69:7/W0)
[PageFaultHandler][SwapOut] page Page(61:8/6) frame Frame(6)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 61
PageTableEntry][do_lock] iorb IORB(Id(725),Device(0),Page(61:8/6),Diskblock(125),FileWrite,Openfile(78:7/0),Thread(69:7/W1)) this Page(61:8/6)
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:8/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(16:8/24) swap-in finish Thread(70:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 36381 offset = 541 page no = 35 Thread(72:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(72:8/RU) 22 Page(35:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(72:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(72:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(35:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(16:8/24)
[PageFaultHandler][do_handlePageFault] Frame(24) is dirty, do swap-out Thread(72:8/W0)
[PageFaultHandler][SwapOut] page Page(16:8/24) frame Frame(24)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 16
PageTableEntry][do_lock] iorb IORB(Id(726),Device(0),Page(16:8/24),Diskblock(144),FileWrite,Openfile(88:8/0),Thread(72:8/W1)) this Page(16:8/24)
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(43:7/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(43:7/28) swap-in finish Thread(62:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(61:8/6)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(6) Page(61:8/6) Thread(69:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(59:7/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(59:7/6) do swap-in Thread(69:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(727),Device(0),Page(59:7/6),Diskblock(123),FileRead,Openfile(78:7/0),Thread(69:7/W1)) this Page(59:7/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:8/24)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(24) Page(16:8/24) Thread(72:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(35:8/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(35:8/24) do swap-in Thread(72:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(728),Device(0),Page(35:8/24),Diskblock(163),FileRead,Openfile(88:8/0),Thread(72:8/W1)) this Page(35:8/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(59:7/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(59:7/6) swap-in finish Thread(69:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(35:8/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(35:8/24) swap-in finish Thread(72:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 60870 offset = 454 page no = 59 Thread(63:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(63:8/RU) 22 Page(59:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(63:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(63:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(59:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(59:7/6)
[PageFaultHandler][do_handlePageFault] set Page(59:8/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(59:8/6) do swap-in Thread(63:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(729),Device(0),Page(59:8/6),Diskblock(187),FileRead,Openfile(88:8/0),Thread(63:8/W1)) this Page(59:8/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 113005/250000[PageTableEntry][do_unlock] this Page(59:8/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(59:8/6) swap-in finish Thread(63:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 45554 offset = 498 page no = 44 Thread(64:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(64:8/RU) 21 Page(44:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(64:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(64:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(44:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] set Page(44:8/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(44:8/22) do swap-in Thread(64:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(730),Device(0),Page(44:8/22),Diskblock(172),FileRead,Openfile(88:8/0),Thread(64:8/W1)) this Page(44:8/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 9426 offset = 210 page no = 9 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 21 Page(9:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(9:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] set Page(9:6/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(9:6/19) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(731),Device(0),Page(9:6/19),Diskblock(9),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(9:6/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(44:8/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(44:8/22) swap-in finish Thread(64:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(9:6/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(9:6/19) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(732),Device(1),Page(4:8/26),Diskblock(28),FileWrite,Openfile(92:8/1),Thread(72:8/W0)) this Page(4:8/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(4:8/26)
Simulation progress: 114021/250000[MMU][do_refer] address = 44585 offset = 553 page no = 43 Thread(73:7/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 8853 offset = 661 page no = 8 Thread(62:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(62:7/RU) 22 Page(8:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(62:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(62:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(8:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(9:6/19)
[PageFaultHandler][do_handlePageFault] set Page(8:7/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(8:7/19) do swap-in Thread(62:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(733),Device(0),Page(8:7/19),Diskblock(72),FileRead,Openfile(78:7/0),Thread(62:7/W1)) this Page(8:7/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 12241 offset = 977 page no = 11 Thread(64:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(64:8/RU) 21 Page(11:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(64:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(64:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(11:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(20:8/12)
[PageFaultHandler][do_handlePageFault] Frame(12) is dirty, do swap-out Thread(64:8/W0)
[PageFaultHandler][SwapOut] page Page(20:8/12) frame Frame(12)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 20
PageTableEntry][do_lock] iorb IORB(Id(734),Device(0),Page(20:8/12),Diskblock(148),FileWrite,Openfile(88:8/0),Thread(64:8/W1)) this Page(20:8/12)
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 27380 offset = 756 page no = 26 Thread(65:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(65:8/RU) 22 Page(26:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(65:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(65:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(26:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(34:7/14)
[PageFaultHandler][do_handlePageFault] Frame(14) is dirty, do swap-out Thread(65:8/W0)
[PageFaultHandler][SwapOut] page Page(34:7/14) frame Frame(14)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 34
PageTableEntry][do_lock] iorb IORB(Id(735),Device(0),Page(34:7/14),Diskblock(162),FileWrite,Openfile(88:8/0),Thread(65:8/W1)) this Page(34:7/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(8:7/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(8:7/19) swap-in finish Thread(62:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 36550 offset = 710 page no = 35 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 22 Page(35:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(35:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(24:7/2)
[PageFaultHandler][do_handlePageFault] set Page(35:6/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(35:6/2) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(736),Device(0),Page(35:6/2),Diskblock(35),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(35:6/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(20:8/12)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(12) Page(20:8/12) Thread(64:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(11:8/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(11:8/12) do swap-in Thread(64:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(737),Device(0),Page(11:8/12),Diskblock(139),FileRead,Openfile(88:8/0),Thread(64:8/W1)) this Page(11:8/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(738),Device(1),Page(2:7/9),Diskblock(14),FileWrite,Openfile(92:8/1),Thread(66:7/W0)) this Page(2:7/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(2:7/9)
[PageTableEntry][do_unlock] this Page(34:7/14)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(14) Page(34:7/14) Thread(65:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(26:8/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(26:8/14) do swap-in Thread(65:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(739),Device(0),Page(26:8/14),Diskblock(154),FileRead,Openfile(88:8/0),Thread(65:8/W1)) this Page(26:8/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(35:6/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(35:6/2) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 115018/250000[PageTableEntry][do_unlock] this Page(11:8/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(11:8/12) swap-in finish Thread(64:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 19213 offset = 781 page no = 18 Thread(69:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(69:7/RU) 21 Page(18:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(69:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(69:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(18:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(11:8/12)
[PageFaultHandler][do_handlePageFault] set Page(18:7/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(18:7/12) do swap-in Thread(69:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(740),Device(0),Page(18:7/12),Diskblock(82),FileRead,Openfile(78:7/0),Thread(69:7/W1)) this Page(18:7/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(26:8/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(26:8/14) swap-in finish Thread(65:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(18:7/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(18:7/12) swap-in finish Thread(69:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 21128 offset = 648 page no = 20 Thread(73:7/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 36884 offset = 20 page no = 36 Thread(62:7/RU)
[MMU][do_refer] Do memory read.
Simulation progress: 116060/250000[MMU][do_refer] address = 42166 offset = 182 page no = 41 Thread(69:7/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 47643 offset = 539 page no = 46 Thread(72:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(72:8/RU) 22 Page(46:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(72:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(72:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(46:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] set Page(46:8/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(46:8/27) do swap-in Thread(72:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(741),Device(0),Page(46:8/27),Diskblock(174),FileRead,Openfile(88:8/0),Thread(72:8/W1)) this Page(46:8/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 11656 offset = 392 page no = 11 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 21 Page(11:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(11:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(31:7/17)
[PageFaultHandler][do_handlePageFault] Frame(17) is dirty, do swap-out Thread(48:6/W0)
[PageFaultHandler][SwapOut] page Page(31:7/17) frame Frame(17)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 31
PageTableEntry][do_lock] iorb IORB(Id(742),Device(0),Page(31:7/17),Diskblock(31),FileWrite,Openfile(60:6/0),Thread(48:6/W1)) this Page(31:7/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 61404 offset = 988 page no = 59 Thread(66:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(66:7/RU) 21 Page(59:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(66:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(66:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(59:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(13:6/21)
[PageFaultHandler][do_handlePageFault] Frame(21) is dirty, do swap-out Thread(66:7/W0)
[PageFaultHandler][SwapOut] page Page(13:6/21) frame Frame(21)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 13
PageTableEntry][do_lock] iorb IORB(Id(743),Device(0),Page(13:6/21),Diskblock(77),FileWrite,Openfile(78:7/0),Thread(66:7/W1)) this Page(13:6/21)
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 39679 offset = 767 page no = 38 Thread(70:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(70:8/RU) 21 Page(38:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(70:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(70:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(38:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] set Page(38:8/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(38:8/15) do swap-in Thread(70:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(744),Device(0),Page(38:8/15),Diskblock(166),FileRead,Openfile(88:8/0),Thread(70:8/W1)) this Page(38:8/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 50822 offset = 646 page no = 49 Thread(73:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(73:7/RU) 21 Page(49:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(73:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(73:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(49:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(55:7/10)
[PageFaultHandler][do_handlePageFault] Frame(10) is dirty, do swap-out Thread(73:7/W0)
[PageFaultHandler][SwapOut] page Page(55:7/10) frame Frame(10)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 55
PageTableEntry][do_lock] iorb IORB(Id(745),Device(0),Page(55:7/10),Diskblock(119),FileWrite,Openfile(78:7/0),Thread(73:7/W1)) this Page(55:7/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(46:8/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(46:8/27) swap-in finish Thread(72:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(31:7/17)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(17) Page(31:7/17) Thread(48:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(11:6/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(11:6/17) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(746),Device(0),Page(11:6/17),Diskblock(11),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(11:6/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 38321 offset = 433 page no = 37 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 22 Page(37:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(37:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(27:7/1)
[PageFaultHandler][do_handlePageFault] set Page(37:7/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(37:7/1) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(747),Device(0),Page(37:7/1),Diskblock(101),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(37:7/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(13:6/21)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(21) Page(13:6/21) Thread(66:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(59:7/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(59:7/21) do swap-in Thread(66:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(748),Device(0),Page(59:7/21),Diskblock(123),FileRead,Openfile(78:7/0),Thread(66:7/W1)) this Page(59:7/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 17070 offset = 686 page no = 16 Thread(72:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(72:8/RU) 21 Page(16:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(72:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(72:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(16:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(4:8/26)
[PageFaultHandler][do_handlePageFault] Frame(26) is dirty, do swap-out Thread(72:8/W0)
[PageFaultHandler][SwapOut] page Page(4:8/26) frame Frame(26)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 4
PageTableEntry][do_lock] iorb IORB(Id(749),Device(0),Page(4:8/26),Diskblock(132),FileWrite,Openfile(88:8/0),Thread(72:8/W1)) this Page(4:8/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 35904 offset = 64 page no = 35 Thread(62:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(62:7/RU) 21 Page(35:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(62:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(62:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(35:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(2:7/9)
[PageFaultHandler][do_handlePageFault] set Page(35:7/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(35:7/9) do swap-in Thread(62:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(750),Device(0),Page(35:7/9),Diskblock(99),FileRead,Openfile(78:7/0),Thread(62:7/W1)) this Page(35:7/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(38:8/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(38:8/15) swap-in finish Thread(70:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(55:7/10)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(10) Page(55:7/10) Thread(73:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(49:7/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(49:7/10) do swap-in Thread(73:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(751),Device(0),Page(49:7/10),Diskblock(113),FileRead,Openfile(78:7/0),Thread(73:7/W1)) this Page(49:7/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 117040/250000[PageTableEntry][do_unlock] this Page(11:6/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(11:6/17) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 20851 offset = 371 page no = 20 Thread(70:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(70:8/RU) 22 Page(20:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(70:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(70:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(20:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(11:6/17)
[PageFaultHandler][do_handlePageFault] set Page(20:8/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(20:8/17) do swap-in Thread(70:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(752),Device(0),Page(20:8/17),Diskblock(148),FileRead,Openfile(88:8/0),Thread(70:8/W1)) this Page(20:8/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(37:7/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(37:7/1) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(59:7/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(59:7/21) swap-in finish Thread(66:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(4:8/26)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(26) Page(4:8/26) Thread(72:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(16:8/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(16:8/26) do swap-in Thread(72:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(753),Device(0),Page(16:8/26),Diskblock(144),FileRead,Openfile(88:8/0),Thread(72:8/W1)) this Page(16:8/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(35:7/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(35:7/9) swap-in finish Thread(62:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(49:7/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(49:7/10) swap-in finish Thread(73:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 22494 offset = 990 page no = 21 Thread(66:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(66:7/RU) 22 Page(21:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(66:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(66:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(21:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(38:8/15)
[PageFaultHandler][do_handlePageFault] set Page(21:7/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(21:7/15) do swap-in Thread(66:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(754),Device(0),Page(21:7/15),Diskblock(85),FileRead,Openfile(78:7/0),Thread(66:7/W1)) this Page(21:7/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 15116 offset = 780 page no = 14 Thread(65:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(65:8/RU) 22 Page(14:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(65:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(65:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(14:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(61:6/16)
[PageFaultHandler][do_handlePageFault] set Page(14:8/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(14:8/16) do swap-in Thread(65:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(755),Device(0),Page(14:8/16),Diskblock(142),FileRead,Openfile(88:8/0),Thread(65:8/W1)) this Page(14:8/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(20:8/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(20:8/17) swap-in finish Thread(70:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 26313 offset = 713 page no = 25 Thread(62:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(62:7/RU) 22 Page(25:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(62:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(62:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(25:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] set Page(25:7/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(25:7/18) do swap-in Thread(62:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(756),Device(0),Page(25:7/18),Diskblock(89),FileRead,Openfile(78:7/0),Thread(62:7/W1)) this Page(25:7/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:8/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(16:8/26) swap-in finish Thread(72:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 54915 offset = 643 page no = 53 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 22 Page(53:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(53:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(16:8/26)
[PageFaultHandler][do_handlePageFault] set Page(53:7/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(53:7/26) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(757),Device(0),Page(53:7/26),Diskblock(117),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(53:7/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(21:7/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(21:7/15) swap-in finish Thread(66:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 118020/250000[PageTableEntry][do_unlock] this Page(14:8/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(14:8/16) swap-in finish Thread(65:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 27588 offset = 964 page no = 26 Thread(72:8/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(25:7/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(25:7/18) swap-in finish Thread(62:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 38266 offset = 378 page no = 37 Thread(73:7/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(53:7/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(53:7/26) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 60552 offset = 136 page no = 59 Thread(66:7/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 29954 offset = 258 page no = 29 Thread(66:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(66:7/RU) 21 Page(29:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(66:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(66:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(29:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(21:7/15)
[PageFaultHandler][do_handlePageFault] Frame(15) is dirty, do swap-out Thread(66:7/W0)
[PageFaultHandler][SwapOut] page Page(21:7/15) frame Frame(15)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 21
PageTableEntry][do_lock] iorb IORB(Id(758),Device(0),Page(21:7/15),Diskblock(85),FileWrite,Openfile(78:7/0),Thread(66:7/W1)) this Page(21:7/15)
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(21:7/15)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(15) Page(21:7/15) Thread(66:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(29:7/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(29:7/15) do swap-in Thread(66:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(759),Device(0),Page(29:7/15),Diskblock(93),FileRead,Openfile(78:7/0),Thread(66:7/W1)) this Page(29:7/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(29:7/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(29:7/15) swap-in finish Thread(66:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 3676 offset = 604 page no = 3 Thread(65:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(65:8/RU) 22 Page(3:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(65:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(65:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(3:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(25:7/18)
[PageFaultHandler][do_handlePageFault] Frame(18) is dirty, do swap-out Thread(65:8/W0)
[PageFaultHandler][SwapOut] page Page(25:7/18) frame Frame(18)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 25
PageTableEntry][do_lock] iorb IORB(Id(760),Device(0),Page(25:7/18),Diskblock(153),FileWrite,Openfile(88:8/0),Thread(65:8/W1)) this Page(25:7/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(25:7/18)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(18) Page(25:7/18) Thread(65:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(3:8/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(3:8/18) do swap-in Thread(65:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(761),Device(0),Page(3:8/18),Diskblock(131),FileRead,Openfile(88:8/0),Thread(65:8/W1)) this Page(3:8/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(3:8/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(3:8/18) swap-in finish Thread(65:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 119053/250000[MMU][do_refer] address = 60636 offset = 220 page no = 59 Thread(57:7/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 54789 offset = 517 page no = 53 Thread(70:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(70:8/RU) 22 Page(53:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(70:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(70:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(53:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] set Page(53:8/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(53:8/5) do swap-in Thread(70:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(762),Device(0),Page(53:8/5),Diskblock(181),FileRead,Openfile(88:8/0),Thread(70:8/W1)) this Page(53:8/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 13318 offset = 6 page no = 13 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 22 Page(13:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(13:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(14:7/4)
[PageFaultHandler][do_handlePageFault] set Page(13:6/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(13:6/4) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(763),Device(0),Page(13:6/4),Diskblock(13),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(13:6/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 52457 offset = 233 page no = 51 Thread(62:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(62:7/RU) 21 Page(51:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(62:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(62:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(51:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] set Page(51:7/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(51:7/23) do swap-in Thread(62:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(764),Device(0),Page(51:7/23),Diskblock(115),FileRead,Openfile(78:7/0),Thread(62:7/W1)) this Page(51:7/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(53:8/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(53:8/5) swap-in finish Thread(70:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(13:6/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(13:6/4) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 44930 offset = 898 page no = 43 Thread(73:7/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 31914 offset = 170 page no = 31 Thread(73:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(73:7/RU) 22 Page(31:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(73:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(73:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(31:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(13:6/4)
[PageFaultHandler][do_handlePageFault] Frame(4) is dirty, do swap-out Thread(73:7/W0)
[PageFaultHandler][SwapOut] page Page(13:6/4) frame Frame(4)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 13
PageTableEntry][do_lock] iorb IORB(Id(765),Device(0),Page(13:6/4),Diskblock(77),FileWrite,Openfile(78:7/0),Thread(73:7/W1)) this Page(13:6/4)
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(51:7/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(51:7/23) swap-in finish Thread(62:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(13:6/4)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(4) Page(13:6/4) Thread(73:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(31:7/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(31:7/4) do swap-in Thread(73:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(766),Device(0),Page(31:7/4),Diskblock(95),FileRead,Openfile(78:7/0),Thread(73:7/W1)) this Page(31:7/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageCleanDaemon][unleash] osp.Memory.PageCleanDaemon@1bf99cf5 execute time 120000
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(6)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(19)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(2)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(14)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(27)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(21)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(6)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(6) Page(59:8/6) isDirty true
[PageFaultHandler][SwapOut] file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 59
PageTableEntry][do_lock] iorb IORB(Id(767),Device(0),Page(59:8/6),Diskblock(187),FileWrite,Openfile(88:8/0),Thread(74:0/W1)) this Page(59:8/6)
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 120079/250000[PageTableEntry][do_unlock] this Page(31:7/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(31:7/4) swap-in finish Thread(73:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(59:8/6)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(6) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(19)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(19) Page(8:7/19) isDirty true
[PageFaultHandler][SwapOut] file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 8
PageTableEntry][do_lock] iorb IORB(Id(768),Device(0),Page(8:7/19),Diskblock(72),FileWrite,Openfile(78:7/0),Thread(74:0/W1)) this Page(8:7/19)
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(8:7/19)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(19) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(2)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(2) Page(35:6/2) isDirty true
[PageFaultHandler][SwapOut] file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 35
PageTableEntry][do_lock] iorb IORB(Id(769),Device(0),Page(35:6/2),Diskblock(35),FileWrite,Openfile(60:6/0),Thread(74:0/W1)) this Page(35:6/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 47641 offset = 537 page no = 46 Thread(66:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(66:7/RU) 22 Page(46:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(66:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(66:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(46:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(43:7/28)
[PageFaultHandler][do_handlePageFault] set Page(46:7/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(46:7/28) do swap-in Thread(66:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(770),Device(0),Page(46:7/28),Diskblock(110),FileRead,Openfile(78:7/0),Thread(66:7/W1)) this Page(46:7/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(35:6/2)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(2) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(14)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(14) Page(26:8/14) isDirty true
[PageFaultHandler][SwapOut] file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 26
PageTableEntry][do_lock] iorb IORB(Id(771),Device(0),Page(26:8/14),Diskblock(154),FileWrite,Openfile(88:8/0),Thread(74:0/W1)) this Page(26:8/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(46:7/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(46:7/28) swap-in finish Thread(66:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 28477 offset = 829 page no = 27 Thread(64:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(64:8/RU) 21 Page(27:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(64:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(64:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(27:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] set Page(27:8/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(27:8/8) do swap-in Thread(64:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(772),Device(0),Page(27:8/8),Diskblock(155),FileRead,Openfile(88:8/0),Thread(64:8/W1)) this Page(27:8/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 20983 offset = 503 page no = 20 Thread(48:6/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 10794 offset = 554 page no = 10 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 21 Page(10:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(10:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(59:8/6)
[PageFaultHandler][do_handlePageFault] set Page(10:6/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(10:6/6) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(773),Device(0),Page(10:6/6),Diskblock(10),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(10:6/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(26:8/14)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(14) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(27)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(27) Page(46:8/27) isDirty true
[PageFaultHandler][SwapOut] file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 46
PageTableEntry][do_lock] iorb IORB(Id(774),Device(0),Page(46:8/27),Diskblock(174),FileWrite,Openfile(88:8/0),Thread(74:0/W1)) this Page(46:8/27)
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(27:8/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(27:8/8) swap-in finish Thread(64:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 59663 offset = 271 page no = 58 Thread(63:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(63:8/RU) 21 Page(58:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(63:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(63:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(58:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(44:8/22)
[PageFaultHandler][do_handlePageFault] set Page(58:8/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(58:8/22) do swap-in Thread(63:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(775),Device(0),Page(58:8/22),Diskblock(186),FileRead,Openfile(88:8/0),Thread(63:8/W1)) this Page(58:8/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(10:6/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(10:6/6) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 53380 offset = 132 page no = 52 Thread(73:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(73:7/RU) 21 Page(52:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(73:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(73:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(52:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(10:6/6)
[PageFaultHandler][do_handlePageFault] set Page(52:7/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(52:7/6) do swap-in Thread(73:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(776),Device(0),Page(52:7/6),Diskblock(116),FileRead,Openfile(78:7/0),Thread(73:7/W1)) this Page(52:7/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(777),Device(1),Page(8:7/19),Diskblock(5),FileRead,Openfile(94:7/1),Thread(66:7/W0)) this Page(8:7/19)
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(8:7/19)
Simulation progress: 121019/250000[PageTableEntry][do_unlock] this Page(46:8/27)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(27) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(21)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(21) Page(59:7/21) isDirty true
[PageFaultHandler][SwapOut] file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 59
PageTableEntry][do_lock] iorb IORB(Id(778),Device(0),Page(59:7/21),Diskblock(123),FileWrite,Openfile(78:7/0),Thread(74:0/W1)) this Page(59:7/21)
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(58:8/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(58:8/22) swap-in finish Thread(63:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(52:7/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(52:7/6) swap-in finish Thread(73:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(59:7/21)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(21) finish
[MMU][do_refer] address = 50502 offset = 326 page no = 49 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 22 Page(49:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(49:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(8:7/19)
[PageFaultHandler][do_handlePageFault] Frame(19) is dirty, do swap-out Thread(48:6/W0)
[PageFaultHandler][SwapOut] page Page(8:7/19) frame Frame(19)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 8
PageTableEntry][do_lock] iorb IORB(Id(779),Device(0),Page(8:7/19),Diskblock(8),FileWrite,Openfile(60:6/0),Thread(48:6/W1)) this Page(8:7/19)
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 122033/250000[PageTableEntry][do_unlock] this Page(8:7/19)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(19) Page(8:7/19) Thread(48:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(49:6/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(49:6/19) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(780),Device(0),Page(49:6/19),Diskblock(49),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(49:6/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 56596 offset = 276 page no = 55 Thread(66:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(66:7/RU) 21 Page(55:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(66:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(66:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(55:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(35:6/2)
[PageFaultHandler][do_handlePageFault] set Page(55:7/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(55:7/2) do swap-in Thread(66:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(781),Device(0),Page(55:7/2),Diskblock(119),FileRead,Openfile(78:7/0),Thread(66:7/W1)) this Page(55:7/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 30838 offset = 118 page no = 30 Thread(65:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(65:8/RU) 21 Page(30:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(65:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(65:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(30:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(26:8/14)
[PageFaultHandler][do_handlePageFault] set Page(30:8/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(30:8/14) do swap-in Thread(65:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(782),Device(0),Page(30:8/14),Diskblock(158),FileRead,Openfile(88:8/0),Thread(65:8/W1)) this Page(30:8/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(49:6/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(49:6/19) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 18711 offset = 279 page no = 18 Thread(62:7/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(55:7/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(55:7/2) swap-in finish Thread(66:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(783),Device(1),Page(10:7/20),Diskblock(4),FileRead,Openfile(94:7/1),Thread(73:7/W0)) this Page(10:7/20)
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 45443 offset = 387 page no = 44 Thread(64:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(64:8/RU) 22 Page(44:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(64:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(64:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(44:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(55:7/2)
[PageFaultHandler][do_handlePageFault] set Page(44:8/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(44:8/2) do swap-in Thread(64:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(784),Device(0),Page(44:8/2),Diskblock(172),FileRead,Openfile(88:8/0),Thread(64:8/W1)) this Page(44:8/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(30:8/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(30:8/14) swap-in finish Thread(65:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(10:7/20)
[PageTableEntry][do_unlock] this Page(44:8/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(44:8/2) swap-in finish Thread(64:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 1948 offset = 924 page no = 1 Thread(62:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(62:7/RU) 22 Page(1:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(62:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(62:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(1:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] set Page(1:7/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(1:7/11) do swap-in Thread(62:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(785),Device(0),Page(1:7/11),Diskblock(65),FileRead,Openfile(78:7/0),Thread(62:7/W1)) this Page(1:7/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 21627 offset = 123 page no = 21 Thread(70:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(70:8/RU) 21 Page(21:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(70:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(70:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(21:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(46:8/27)
[PageFaultHandler][do_handlePageFault] set Page(21:8/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(21:8/27) do swap-in Thread(70:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(786),Device(0),Page(21:8/27),Diskblock(149),FileRead,Openfile(88:8/0),Thread(70:8/W1)) this Page(21:8/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:7/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(1:7/11) swap-in finish Thread(62:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 19115 offset = 683 page no = 18 Thread(72:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(72:8/RU) 22 Page(18:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(72:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(72:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(18:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(49:7/10)
[PageFaultHandler][do_handlePageFault] set Page(18:8/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(18:8/10) do swap-in Thread(72:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(787),Device(0),Page(18:8/10),Diskblock(146),FileRead,Openfile(88:8/0),Thread(72:8/W1)) this Page(18:8/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(788),Device(1),Page(1:7/11),Diskblock(9),FileRead,Openfile(94:7/1),Thread(73:7/W0)) this Page(1:7/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:7/11)
[MMU][do_refer] address = 18976 offset = 544 page no = 18 Thread(62:7/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(21:8/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(21:8/27) swap-in finish Thread(70:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 123009/250000[MMU][do_refer] address = 58675 offset = 307 page no = 57 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 21 Page(57:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(57:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(21:8/27)
[PageFaultHandler][do_handlePageFault] set Page(57:7/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(57:7/27) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(789),Device(0),Page(57:7/27),Diskblock(121),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(57:7/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(18:8/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(18:8/10) swap-in finish Thread(72:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(57:7/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(57:7/27) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 10143 offset = 927 page no = 9 Thread(70:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(70:8/RU) 21 Page(9:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(70:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(70:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(9:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(35:7/9)
[PageFaultHandler][do_handlePageFault] set Page(9:8/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(9:8/9) do swap-in Thread(70:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(790),Device(0),Page(9:8/9),Diskblock(137),FileRead,Openfile(88:8/0),Thread(70:8/W1)) this Page(9:8/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 35545 offset = 729 page no = 34 Thread(62:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(62:7/RU) 21 Page(34:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(62:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(62:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(34:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(37:7/1)
[PageFaultHandler][do_handlePageFault] Frame(1) is dirty, do swap-out Thread(62:7/W0)
[PageFaultHandler][SwapOut] page Page(37:7/1) frame Frame(1)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 37
PageTableEntry][do_lock] iorb IORB(Id(791),Device(0),Page(37:7/1),Diskblock(101),FileWrite,Openfile(78:7/0),Thread(62:7/W1)) this Page(37:7/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(9:8/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(9:8/9) swap-in finish Thread(70:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(37:7/1)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(1) Page(37:7/1) Thread(62:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(34:7/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(34:7/1) do swap-in Thread(62:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(792),Device(0),Page(34:7/1),Diskblock(98),FileRead,Openfile(78:7/0),Thread(62:7/W1)) this Page(34:7/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(34:7/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(34:7/1) swap-in finish Thread(62:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 21827 offset = 323 page no = 21 Thread(73:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(73:7/RU) 21 Page(21:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(73:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(73:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(21:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(34:7/1)
[PageFaultHandler][do_handlePageFault] set Page(21:7/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(21:7/1) do swap-in Thread(73:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(793),Device(0),Page(21:7/1),Diskblock(85),FileRead,Openfile(78:7/0),Thread(73:7/W1)) this Page(21:7/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(21:7/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(21:7/1) swap-in finish Thread(73:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 42899 offset = 915 page no = 41 Thread(66:7/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 9742 offset = 526 page no = 9 Thread(70:8/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 55430 offset = 134 page no = 54 Thread(76:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(76:6/RU) 21 Page(54:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(76:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(76:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(54:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] set Page(54:6/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(54:6/3) do swap-in Thread(76:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(794),Device(0),Page(54:6/3),Diskblock(54),FileRead,Openfile(60:6/0),Thread(76:6/W1)) this Page(54:6/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 26567 offset = 967 page no = 25 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 21 Page(25:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(25:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(20:8/17)
[PageFaultHandler][do_handlePageFault] Frame(17) is dirty, do swap-out Thread(48:6/W0)
[PageFaultHandler][SwapOut] page Page(20:8/17) frame Frame(17)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 20
PageTableEntry][do_lock] iorb IORB(Id(795),Device(0),Page(20:8/17),Diskblock(20),FileWrite,Openfile(60:6/0),Thread(48:6/W1)) this Page(20:8/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 52930 offset = 706 page no = 51 Thread(62:7/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(54:6/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(54:6/3) swap-in finish Thread(76:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(20:8/17)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(17) Page(20:8/17) Thread(48:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(25:6/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(25:6/17) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(796),Device(0),Page(25:6/17),Diskblock(25),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(25:6/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 124017/250000[PageTableEntry][do_unlock] this Page(25:6/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(25:6/17) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 40700 offset = 764 page no = 39 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 21 Page(39:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(39:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(25:6/17)
[PageFaultHandler][do_handlePageFault] set Page(39:7/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(39:7/17) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(797),Device(0),Page(39:7/17),Diskblock(103),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(39:7/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 58870 offset = 502 page no = 57 Thread(76:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(76:6/RU) 21 Page(57:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(76:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(76:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(57:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(53:7/26)
[PageFaultHandler][do_handlePageFault] Frame(26) is dirty, do swap-out Thread(76:6/W0)
[PageFaultHandler][SwapOut] page Page(53:7/26) frame Frame(26)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 53
PageTableEntry][do_lock] iorb IORB(Id(798),Device(0),Page(53:7/26),Diskblock(53),FileWrite,Openfile(60:6/0),Thread(76:6/W1)) this Page(53:7/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(39:7/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(39:7/17) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(53:7/26)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(26) Page(53:7/26) Thread(76:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(57:6/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(57:6/26) do swap-in Thread(76:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(799),Device(0),Page(57:6/26),Diskblock(57),FileRead,Openfile(60:6/0),Thread(76:6/W1)) this Page(57:6/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 33919 offset = 127 page no = 33 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 22 Page(33:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(33:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(36:7/29)
[PageFaultHandler][do_handlePageFault] set Page(33:6/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(33:6/29) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(800),Device(0),Page(33:6/29),Diskblock(33),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(33:6/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(57:6/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(57:6/26) swap-in finish Thread(76:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(801),Device(1),Page(1:7/11),Diskblock(4),FileWrite,Openfile(94:7/1),Thread(66:7/W0)) this Page(1:7/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(33:6/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(33:6/29) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(1:7/11)
[MMU][do_refer] address = 18027 offset = 619 page no = 17 Thread(62:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(62:7/RU) 21 Page(17:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(62:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(62:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(17:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(57:6/26)
[PageFaultHandler][do_handlePageFault] set Page(17:7/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(17:7/26) do swap-in Thread(62:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(802),Device(0),Page(17:7/26),Diskblock(81),FileRead,Openfile(78:7/0),Thread(62:7/W1)) this Page(17:7/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 18877 offset = 445 page no = 18 Thread(72:8/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(17:7/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(17:7/26) swap-in finish Thread(62:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(803),Device(1),Page(20:6/13),Diskblock(4),FileWrite,Openfile(94:7/1),Thread(76:6/W0)) this Page(20:6/13)
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(20:6/13)
[MMU][do_refer] address = 42451 offset = 467 page no = 41 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 22 Page(41:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(41:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(14:8/16)
[PageFaultHandler][do_handlePageFault] Frame(16) is dirty, do swap-out Thread(48:6/W0)
[PageFaultHandler][SwapOut] page Page(14:8/16) frame Frame(16)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 14
PageTableEntry][do_lock] iorb IORB(Id(804),Device(0),Page(14:8/16),Diskblock(14),FileWrite,Openfile(60:6/0),Thread(48:6/W1)) this Page(14:8/16)
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(14:8/16)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(16) Page(14:8/16) Thread(48:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(41:6/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(41:6/16) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(805),Device(0),Page(41:6/16),Diskblock(41),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(41:6/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(41:6/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(41:6/16) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 60565 offset = 149 page no = 59 Thread(57:7/RU)
[MMU][do_refer] Do memory read.
Simulation progress: 125011/250000[MMU][do_refer] address = 48129 offset = 1 page no = 47 Thread(62:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(62:7/RU) 22 Page(47:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(62:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(62:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(47:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(29:7/15)
[PageFaultHandler][do_handlePageFault] set Page(47:7/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(47:7/15) do swap-in Thread(62:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(806),Device(0),Page(47:7/15),Diskblock(111),FileRead,Openfile(78:7/0),Thread(62:7/W1)) this Page(47:7/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 7591 offset = 423 page no = 7 Thread(72:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(72:8/RU) 22 Page(7:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(72:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(72:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(7:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(3:8/18)
[PageFaultHandler][do_handlePageFault] Frame(18) is dirty, do swap-out Thread(72:8/W0)
[PageFaultHandler][SwapOut] page Page(3:8/18) frame Frame(18)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 3
PageTableEntry][do_lock] iorb IORB(Id(807),Device(0),Page(3:8/18),Diskblock(131),FileWrite,Openfile(88:8/0),Thread(72:8/W1)) this Page(3:8/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(47:7/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(47:7/15) swap-in finish Thread(62:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 28029 offset = 381 page no = 27 Thread(73:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(73:7/RU) 21 Page(27:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(73:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(73:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(27:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(53:8/5)
[PageFaultHandler][do_handlePageFault] Frame(5) is dirty, do swap-out Thread(73:7/W0)
[PageFaultHandler][SwapOut] page Page(53:8/5) frame Frame(5)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 53
PageTableEntry][do_lock] iorb IORB(Id(808),Device(0),Page(53:8/5),Diskblock(117),FileWrite,Openfile(78:7/0),Thread(73:7/W1)) this Page(53:8/5)
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 60861 offset = 445 page no = 59 Thread(70:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(70:8/RU) 22 Page(59:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(70:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(70:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(59:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(51:7/23)
[PageFaultHandler][do_handlePageFault] set Page(59:8/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(59:8/23) do swap-in Thread(70:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(809),Device(0),Page(59:8/23),Diskblock(187),FileRead,Openfile(88:8/0),Thread(70:8/W1)) this Page(59:8/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(3:8/18)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(18) Page(3:8/18) Thread(72:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(7:8/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(7:8/18) do swap-in Thread(72:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(810),Device(0),Page(7:8/18),Diskblock(135),FileRead,Openfile(88:8/0),Thread(72:8/W1)) this Page(7:8/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(53:8/5)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(5) Page(53:8/5) Thread(73:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(27:7/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(27:7/5) do swap-in Thread(73:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(811),Device(0),Page(27:7/5),Diskblock(91),FileRead,Openfile(78:7/0),Thread(73:7/W1)) this Page(27:7/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 60278 offset = 886 page no = 58 Thread(76:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(76:6/RU) 21 Page(58:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(76:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(76:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(58:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(35:8/24)
[PageFaultHandler][do_handlePageFault] Frame(24) is dirty, do swap-out Thread(76:6/W0)
[PageFaultHandler][SwapOut] page Page(35:8/24) frame Frame(24)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 35
PageTableEntry][do_lock] iorb IORB(Id(812),Device(0),Page(35:8/24),Diskblock(35),FileWrite,Openfile(60:6/0),Thread(76:6/W1)) this Page(35:8/24)
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(59:8/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(59:8/23) swap-in finish Thread(70:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 4885 offset = 789 page no = 4 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 21 Page(4:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(4:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(31:7/4)
[PageFaultHandler][do_handlePageFault] Frame(4) is dirty, do swap-out Thread(57:7/W0)
[PageFaultHandler][SwapOut] page Page(31:7/4) frame Frame(4)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 31
PageTableEntry][do_lock] iorb IORB(Id(813),Device(0),Page(31:7/4),Diskblock(95),FileWrite,Openfile(78:7/0),Thread(57:7/W1)) this Page(31:7/4)
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(7:8/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(7:8/18) swap-in finish Thread(72:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 65180 offset = 668 page no = 63 Thread(62:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(62:7/RU) 22 Page(63:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(62:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(62:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(63:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(7:8/18)
[PageFaultHandler][do_handlePageFault] Frame(18) is dirty, do swap-out Thread(62:7/W0)
[PageFaultHandler][SwapOut] page Page(7:8/18) frame Frame(18)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 7
PageTableEntry][do_lock] iorb IORB(Id(814),Device(0),Page(7:8/18),Diskblock(71),FileWrite,Openfile(78:7/0),Thread(62:7/W1)) this Page(7:8/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(27:7/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(27:7/5) swap-in finish Thread(73:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(35:8/24)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(24) Page(35:8/24) Thread(76:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(58:6/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(58:6/24) do swap-in Thread(76:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(815),Device(0),Page(58:6/24),Diskblock(58),FileRead,Openfile(60:6/0),Thread(76:6/W1)) this Page(58:6/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 37894 offset = 6 page no = 37 Thread(66:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(66:7/RU) 21 Page(37:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(66:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(66:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(37:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(46:7/28)
[PageFaultHandler][do_handlePageFault] Frame(28) is dirty, do swap-out Thread(66:7/W0)
[PageFaultHandler][SwapOut] page Page(46:7/28) frame Frame(28)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 46
PageTableEntry][do_lock] iorb IORB(Id(816),Device(0),Page(46:7/28),Diskblock(110),FileWrite,Openfile(78:7/0),Thread(66:7/W1)) this Page(46:7/28)
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(31:7/4)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(4) Page(31:7/4) Thread(57:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(4:7/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(4:7/4) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(817),Device(0),Page(4:7/4),Diskblock(68),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(4:7/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(7:8/18)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(18) Page(7:8/18) Thread(62:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(63:7/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(63:7/18) do swap-in Thread(62:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(818),Device(0),Page(63:7/18),Diskblock(127),FileRead,Openfile(78:7/0),Thread(62:7/W1)) this Page(63:7/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(819),Device(1),Page(1:7/11),Diskblock(34),FileWrite,Openfile(94:7/1),Thread(73:7/W0)) this Page(1:7/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 126001/250000[PageTableEntry][do_unlock] this Page(58:6/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(58:6/24) swap-in finish Thread(76:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 44619 offset = 587 page no = 43 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 21 Page(43:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(43:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(58:8/22)
[PageFaultHandler][do_handlePageFault] set Page(43:6/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(43:6/22) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(820),Device(0),Page(43:6/22),Diskblock(43),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(43:6/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(46:7/28)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(28) Page(46:7/28) Thread(66:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(37:7/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(37:7/28) do swap-in Thread(66:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(821),Device(0),Page(37:7/28),Diskblock(101),FileRead,Openfile(78:7/0),Thread(66:7/W1)) this Page(37:7/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:7/11)
[PageTableEntry][do_unlock] this Page(4:7/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(4:7/4) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 6469 offset = 325 page no = 6 Thread(70:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(70:8/RU) 21 Page(6:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(70:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(70:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(6:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(4:7/4)
[PageFaultHandler][do_handlePageFault] set Page(6:8/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(6:8/4) do swap-in Thread(70:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(822),Device(0),Page(6:8/4),Diskblock(134),FileRead,Openfile(88:8/0),Thread(70:8/W1)) this Page(6:8/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 51051 offset = 875 page no = 49 Thread(72:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(72:8/RU) 22 Page(49:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(72:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(72:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(49:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(20:7/25)
[PageFaultHandler][do_handlePageFault] set Page(49:8/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(49:8/25) do swap-in Thread(72:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(823),Device(0),Page(49:8/25),Diskblock(177),FileRead,Openfile(88:8/0),Thread(72:8/W1)) this Page(49:8/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(63:7/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(63:7/18) swap-in finish Thread(62:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(43:6/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(43:6/22) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 39901 offset = 989 page no = 38 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 21 Page(38:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(38:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(49:6/19)
[PageFaultHandler][do_handlePageFault] Frame(19) is dirty, do swap-out Thread(57:7/W0)
[PageFaultHandler][SwapOut] page Page(49:6/19) frame Frame(19)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 49
PageTableEntry][do_lock] iorb IORB(Id(824),Device(0),Page(49:6/19),Diskblock(113),FileWrite,Openfile(78:7/0),Thread(57:7/W1)) this Page(49:6/19)
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(37:7/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(37:7/28) swap-in finish Thread(66:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(6:8/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(6:8/4) swap-in finish Thread(70:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 62837 offset = 373 page no = 61 Thread(77:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(77:7/RU) 21 Page(61:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(77:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(77:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(61:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(6:8/4)
[PageFaultHandler][do_handlePageFault] set Page(61:7/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(61:7/4) do swap-in Thread(77:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(825),Device(0),Page(61:7/4),Diskblock(125),FileRead,Openfile(78:7/0),Thread(77:7/W1)) this Page(61:7/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(49:8/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(49:8/25) swap-in finish Thread(72:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(49:6/19)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(19) Page(49:6/19) Thread(57:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(38:7/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(38:7/19) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(826),Device(0),Page(38:7/19),Diskblock(102),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(38:7/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 22220 offset = 716 page no = 21 Thread(66:7/RU)
[MMU][do_refer] Do memory read.
Simulation progress: 127006/250000[PageTableEntry][do_unlock] this Page(61:7/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(61:7/4) swap-in finish Thread(77:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(38:7/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(38:7/19) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 17771 offset = 363 page no = 17 Thread(73:7/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 47403 offset = 299 page no = 46 Thread(73:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(73:7/RU) 21 Page(46:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(73:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(73:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(46:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(38:7/19)
[PageFaultHandler][do_handlePageFault] set Page(46:7/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(46:7/19) do swap-in Thread(73:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(827),Device(0),Page(46:7/19),Diskblock(110),FileRead,Openfile(78:7/0),Thread(73:7/W1)) this Page(46:7/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(46:7/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(46:7/19) swap-in finish Thread(73:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 28962 offset = 290 page no = 28 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 22 Page(28:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(28:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(30:8/14)
[PageFaultHandler][do_handlePageFault] set Page(28:6/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(28:6/14) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(828),Device(0),Page(28:6/14),Diskblock(28),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(28:6/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(28:6/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(28:6/14) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 50928 offset = 752 page no = 49 Thread(76:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(76:6/RU) 22 Page(49:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(76:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(76:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(49:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(44:8/2)
[PageFaultHandler][do_handlePageFault] Frame(2) is dirty, do swap-out Thread(76:6/W0)
[PageFaultHandler][SwapOut] page Page(44:8/2) frame Frame(2)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 44
PageTableEntry][do_lock] iorb IORB(Id(829),Device(0),Page(44:8/2),Diskblock(44),FileWrite,Openfile(60:6/0),Thread(76:6/W1)) this Page(44:8/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(44:8/2)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(2) Page(44:8/2) Thread(76:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(49:6/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(49:6/2) do swap-in Thread(76:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(830),Device(0),Page(49:6/2),Diskblock(49),FileRead,Openfile(60:6/0),Thread(76:6/W1)) this Page(49:6/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(49:6/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(49:6/2) swap-in finish Thread(76:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 9368 offset = 152 page no = 9 Thread(73:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(73:7/RU) 22 Page(9:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(73:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(73:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(9:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(18:8/10)
[PageFaultHandler][do_handlePageFault] Frame(10) is dirty, do swap-out Thread(73:7/W0)
[PageFaultHandler][SwapOut] page Page(18:8/10) frame Frame(10)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 18
PageTableEntry][do_lock] iorb IORB(Id(831),Device(0),Page(18:8/10),Diskblock(82),FileWrite,Openfile(78:7/0),Thread(73:7/W1)) this Page(18:8/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 128060/250000[PageTableEntry][do_unlock] this Page(18:8/10)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(10) Page(18:8/10) Thread(73:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(9:7/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(9:7/10) do swap-in Thread(73:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(832),Device(0),Page(9:7/10),Diskblock(73),FileRead,Openfile(78:7/0),Thread(73:7/W1)) this Page(9:7/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 63077 offset = 613 page no = 61 Thread(72:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(72:8/RU) 21 Page(61:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(72:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(72:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(61:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(59:7/21)
[PageFaultHandler][do_handlePageFault] set Page(61:8/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(61:8/21) do swap-in Thread(72:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(833),Device(0),Page(61:8/21),Diskblock(189),FileRead,Openfile(88:8/0),Thread(72:8/W1)) this Page(61:8/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(9:7/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(9:7/10) swap-in finish Thread(73:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 45230 offset = 174 page no = 44 Thread(76:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(76:6/RU) 21 Page(44:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(76:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(76:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(44:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(57:7/27)
[PageFaultHandler][do_handlePageFault] set Page(44:6/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(44:6/27) do swap-in Thread(76:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(834),Device(0),Page(44:6/27),Diskblock(44),FileRead,Openfile(60:6/0),Thread(76:6/W1)) this Page(44:6/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(61:8/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(61:8/21) swap-in finish Thread(72:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(44:6/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(44:6/27) swap-in finish Thread(76:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 18473 offset = 41 page no = 18 Thread(57:7/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 37023 offset = 159 page no = 36 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 22 Page(36:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(36:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(61:8/21)
[PageFaultHandler][do_handlePageFault] set Page(36:7/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(36:7/21) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(835),Device(0),Page(36:7/21),Diskblock(100),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(36:7/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(36:7/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(36:7/21) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 53939 offset = 691 page no = 52 Thread(70:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(70:8/RU) 21 Page(52:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(70:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(70:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(52:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(20:6/13)
[PageFaultHandler][do_handlePageFault] Frame(13) is dirty, do swap-out Thread(70:8/W0)
[PageFaultHandler][SwapOut] page Page(20:6/13) frame Frame(13)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 20
PageTableEntry][do_lock] iorb IORB(Id(836),Device(0),Page(20:6/13),Diskblock(148),FileWrite,Openfile(88:8/0),Thread(70:8/W1)) this Page(20:6/13)
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 3488 offset = 416 page no = 3 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 22 Page(3:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(3:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(21:7/1)
[PageFaultHandler][do_handlePageFault] set Page(3:6/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(3:6/1) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(837),Device(0),Page(3:6/1),Diskblock(3),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(3:6/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(20:6/13)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(13) Page(20:6/13) Thread(70:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(52:8/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(52:8/13) do swap-in Thread(70:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(838),Device(0),Page(52:8/13),Diskblock(180),FileRead,Openfile(88:8/0),Thread(70:8/W1)) this Page(52:8/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(3:6/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(3:6/1) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 129016/250000[MMU][do_refer] address = 48687 offset = 559 page no = 47 Thread(72:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(72:8/RU) 21 Page(47:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(72:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(72:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(47:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(54:6/3)
[PageFaultHandler][do_handlePageFault] set Page(47:8/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(47:8/3) do swap-in Thread(72:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(839),Device(0),Page(47:8/3),Diskblock(175),FileRead,Openfile(88:8/0),Thread(72:8/W1)) this Page(47:8/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 40916 offset = 980 page no = 39 Thread(77:7/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 18434 offset = 2 page no = 18 Thread(77:7/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 56022 offset = 726 page no = 54 Thread(76:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(76:6/RU) 22 Page(54:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(76:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(76:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(54:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(41:7/0)
[PageFaultHandler][do_handlePageFault] Frame(0) is dirty, do swap-out Thread(76:6/W0)
[PageFaultHandler][SwapOut] page Page(41:7/0) frame Frame(0)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 41
PageTableEntry][do_lock] iorb IORB(Id(840),Device(0),Page(41:7/0),Diskblock(41),FileWrite,Openfile(60:6/0),Thread(76:6/W1)) this Page(41:7/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(841),Device(1),Page(1:7/11),Diskblock(36),FileWrite,Openfile(94:7/1),Thread(66:7/W0)) this Page(1:7/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(52:8/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(52:8/13) swap-in finish Thread(70:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 50125 offset = 973 page no = 48 Thread(62:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(62:7/RU) 22 Page(48:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(62:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(62:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(48:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(39:7/17)
[PageFaultHandler][do_handlePageFault] Frame(17) is dirty, do swap-out Thread(62:7/W0)
[PageFaultHandler][SwapOut] page Page(39:7/17) frame Frame(17)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 39
PageTableEntry][do_lock] iorb IORB(Id(842),Device(0),Page(39:7/17),Diskblock(103),FileWrite,Openfile(78:7/0),Thread(62:7/W1)) this Page(39:7/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:7/11)
[PageTableEntry][do_unlock] this Page(47:8/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(47:8/3) swap-in finish Thread(72:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(41:7/0)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(0) Page(41:7/0) Thread(76:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(54:6/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(54:6/0) do swap-in Thread(76:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(843),Device(0),Page(54:6/0),Diskblock(54),FileRead,Openfile(60:6/0),Thread(76:6/W1)) this Page(54:6/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(39:7/17)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(17) Page(39:7/17) Thread(62:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(48:7/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(48:7/17) do swap-in Thread(62:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(844),Device(0),Page(48:7/17),Diskblock(112),FileRead,Openfile(78:7/0),Thread(62:7/W1)) this Page(48:7/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(54:6/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(54:6/0) swap-in finish Thread(76:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(48:7/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(48:7/17) swap-in finish Thread(62:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 11315 offset = 51 page no = 11 Thread(72:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(72:8/RU) 22 Page(11:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(72:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(72:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(11:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(47:8/3)
[PageFaultHandler][do_handlePageFault] set Page(11:8/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(11:8/3) do swap-in Thread(72:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(845),Device(0),Page(11:8/3),Diskblock(139),FileRead,Openfile(88:8/0),Thread(72:8/W1)) this Page(11:8/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 7619 offset = 451 page no = 7 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 22 Page(7:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(7:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(48:7/17)
[PageFaultHandler][do_handlePageFault] Frame(17) is dirty, do swap-out Thread(48:6/W0)
[PageFaultHandler][SwapOut] page Page(48:7/17) frame Frame(17)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 48
PageTableEntry][do_lock] iorb IORB(Id(846),Device(0),Page(48:7/17),Diskblock(48),FileWrite,Openfile(60:6/0),Thread(48:6/W1)) this Page(48:7/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(11:8/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(11:8/3) swap-in finish Thread(72:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 130044/250000[PageTableEntry][do_unlock] this Page(48:7/17)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(17) Page(48:7/17) Thread(48:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(7:6/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(7:6/17) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(847),Device(0),Page(7:6/17),Diskblock(7),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(7:6/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(7:6/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(7:6/17) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 12057 offset = 793 page no = 11 Thread(66:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(66:7/RU) 21 Page(11:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(66:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(66:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(11:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(7:6/17)
[PageFaultHandler][do_handlePageFault] Frame(17) is dirty, do swap-out Thread(66:7/W0)
[PageFaultHandler][SwapOut] page Page(7:6/17) frame Frame(17)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 7
PageTableEntry][do_lock] iorb IORB(Id(848),Device(0),Page(7:6/17),Diskblock(71),FileWrite,Openfile(78:7/0),Thread(66:7/W1)) this Page(7:6/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(7:6/17)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(17) Page(7:6/17) Thread(66:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(11:7/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(11:7/17) do swap-in Thread(66:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(849),Device(0),Page(11:7/17),Diskblock(75),FileRead,Openfile(78:7/0),Thread(66:7/W1)) this Page(11:7/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(11:7/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(11:7/17) swap-in finish Thread(66:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(850),Device(1),Page(0:6/null),Diskblock(18),FileRead,Openfile(98:8/1),Thread(48:6/W0)) this Page(0:6/null)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] validating_thread is null, handlePageFault
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/W0) 23 Page(0:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W1) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(0:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(41:6/16)
[PageFaultHandler][do_handlePageFault] Frame(16) is dirty, do swap-out Thread(48:6/W1)
[PageFaultHandler][SwapOut] page Page(41:6/16) frame Frame(16)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 41
PageTableEntry][do_lock] iorb IORB(Id(851),Device(0),Page(41:6/16),Diskblock(41),FileWrite,Openfile(60:6/0),Thread(48:6/W2)) this Page(41:6/16)
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(41:6/16)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(16) Page(41:6/16) Thread(48:6/W1) finish
[PageFaultHandler][do_handlePageFault] set Page(0:6/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(0:6/16) do swap-in Thread(48:6/W1)
PageTableEntry][do_lock] iorb IORB(Id(852),Device(0),Page(0:6/16),Diskblock(0),FileRead,Openfile(60:6/0),Thread(48:6/W2)) this Page(0:6/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:6/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(0:6/16) swap-in finish Thread(48:6/W1)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(853),Device(1),Page(0:8/null),Diskblock(5),FileWrite,Openfile(98:8/1),Thread(65:8/W0)) this Page(0:8/null)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] validating_thread is null, handlePageFault
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(65:8/W0) 23 Page(0:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(65:8/W0) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(65:8/W1) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(0:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(47:7/15)
[PageFaultHandler][do_handlePageFault] Frame(15) is dirty, do swap-out Thread(65:8/W1)
[PageFaultHandler][SwapOut] page Page(47:7/15) frame Frame(15)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 47
PageTableEntry][do_lock] iorb IORB(Id(854),Device(0),Page(47:7/15),Diskblock(175),FileWrite,Openfile(88:8/0),Thread(65:8/W2)) this Page(47:7/15)
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(855),Device(1),Page(1:7/11),Diskblock(12),FileWrite,Openfile(98:8/1),Thread(57:7/W0)) this Page(1:7/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:6/16)
[PageTableEntry][do_unlock] this Page(1:7/11)
Simulation progress: 131040/250000PageTableEntry][do_lock] iorb IORB(Id(856),Device(1),Page(1:7/11),Diskblock(35),FileRead,Openfile(98:8/1),Thread(66:7/W0)) this Page(1:7/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(47:7/15)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(15) Page(47:7/15) Thread(65:8/W1) finish
[PageFaultHandler][do_handlePageFault] set Page(0:8/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(0:8/15) do swap-in Thread(65:8/W1)
PageTableEntry][do_lock] iorb IORB(Id(857),Device(0),Page(0:8/15),Diskblock(128),FileRead,Openfile(88:8/0),Thread(65:8/W2)) this Page(0:8/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 48661 offset = 533 page no = 47 Thread(77:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(77:7/RU) 21 Page(47:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(77:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(77:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(47:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(59:8/23)
[PageFaultHandler][do_handlePageFault] Frame(23) is dirty, do swap-out Thread(77:7/W0)
[PageFaultHandler][SwapOut] page Page(59:8/23) frame Frame(23)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 59
PageTableEntry][do_lock] iorb IORB(Id(858),Device(0),Page(59:8/23),Diskblock(123),FileWrite,Openfile(78:7/0),Thread(77:7/W1)) this Page(59:8/23)
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:7/11)
[PageTableEntry][do_unlock] this Page(0:8/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(0:8/15) swap-in finish Thread(65:8/W1)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:8/15)
[PageTableEntry][do_unlock] this Page(59:8/23)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(23) Page(59:8/23) Thread(77:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(47:7/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(47:7/23) do swap-in Thread(77:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(859),Device(0),Page(47:7/23),Diskblock(111),FileRead,Openfile(78:7/0),Thread(77:7/W1)) this Page(47:7/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 31561 offset = 841 page no = 30 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 22 Page(30:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(30:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(27:7/5)
[PageFaultHandler][do_handlePageFault] set Page(30:7/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(30:7/5) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(860),Device(0),Page(30:7/5),Diskblock(94),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(30:7/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(47:7/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(47:7/23) swap-in finish Thread(77:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(30:7/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(30:7/5) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 23118 offset = 590 page no = 22 Thread(66:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(66:7/RU) 22 Page(22:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(66:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(66:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(22:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(47:7/23)
[PageFaultHandler][do_handlePageFault] set Page(22:7/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(22:7/23) do swap-in Thread(66:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(861),Device(0),Page(22:7/23),Diskblock(86),FileRead,Openfile(78:7/0),Thread(66:7/W1)) this Page(22:7/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 38814 offset = 926 page no = 37 Thread(70:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(70:8/RU) 21 Page(37:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(70:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(70:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(37:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(27:8/8)
[PageFaultHandler][do_handlePageFault] set Page(37:8/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(37:8/8) do swap-in Thread(70:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(862),Device(0),Page(37:8/8),Diskblock(165),FileRead,Openfile(88:8/0),Thread(70:8/W1)) this Page(37:8/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(22:7/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(22:7/23) swap-in finish Thread(66:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(37:8/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(37:8/8) swap-in finish Thread(70:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 132020/250000[MMU][do_refer] address = 14069 offset = 757 page no = 13 Thread(73:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(73:7/RU) 22 Page(13:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(73:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(73:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(13:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(37:8/8)
[PageFaultHandler][do_handlePageFault] set Page(13:7/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(13:7/8) do swap-in Thread(73:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(863),Device(0),Page(13:7/8),Diskblock(77),FileRead,Openfile(78:7/0),Thread(73:7/W1)) this Page(13:7/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(864),Device(1),Page(1:7/11),Diskblock(34),FileRead,Openfile(94:7/1),Thread(57:7/W0)) this Page(1:7/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(13:7/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(13:7/8) swap-in finish Thread(73:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 62307 offset = 867 page no = 60 Thread(66:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(66:7/RU) 21 Page(60:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(66:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(66:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(60:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(63:7/18)
[PageFaultHandler][do_handlePageFault] Frame(18) is dirty, do swap-out Thread(66:7/W0)
[PageFaultHandler][SwapOut] page Page(63:7/18) frame Frame(18)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 63
PageTableEntry][do_lock] iorb IORB(Id(865),Device(0),Page(63:7/18),Diskblock(127),FileWrite,Openfile(78:7/0),Thread(66:7/W1)) this Page(63:7/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:7/11)
[PageTableEntry][do_unlock] this Page(63:7/18)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(18) Page(63:7/18) Thread(66:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(60:7/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(60:7/18) do swap-in Thread(66:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(866),Device(0),Page(60:7/18),Diskblock(124),FileRead,Openfile(78:7/0),Thread(66:7/W1)) this Page(60:7/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(60:7/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(60:7/18) swap-in finish Thread(66:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 64709 offset = 197 page no = 63 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 22 Page(63:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(63:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(52:7/6)
[PageFaultHandler][do_handlePageFault] set Page(63:6/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(63:6/6) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(867),Device(0),Page(63:6/6),Diskblock(63),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(63:6/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(63:6/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(63:6/6) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 4569 offset = 473 page no = 4 Thread(77:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(77:7/RU) 21 Page(4:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(77:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(77:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(4:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(49:8/25)
[PageFaultHandler][do_handlePageFault] Frame(25) is dirty, do swap-out Thread(77:7/W0)
[PageFaultHandler][SwapOut] page Page(49:8/25) frame Frame(25)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 49
PageTableEntry][do_lock] iorb IORB(Id(868),Device(0),Page(49:8/25),Diskblock(113),FileWrite,Openfile(78:7/0),Thread(77:7/W1)) this Page(49:8/25)
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 3233 offset = 161 page no = 3 Thread(80:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(80:8/RU) 22 Page(3:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(80:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(80:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(3:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(37:7/28)
[PageFaultHandler][do_handlePageFault] set Page(3:8/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(3:8/28) do swap-in Thread(80:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(869),Device(0),Page(3:8/28),Diskblock(131),FileRead,Openfile(88:8/0),Thread(80:8/W1)) this Page(3:8/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(49:8/25)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(25) Page(49:8/25) Thread(77:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(4:7/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(4:7/25) do swap-in Thread(77:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(870),Device(0),Page(4:7/25),Diskblock(68),FileRead,Openfile(78:7/0),Thread(77:7/W1)) this Page(4:7/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 16972 offset = 588 page no = 16 Thread(72:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(72:8/RU) 22 Page(16:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(72:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(72:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(16:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(18:7/12)
[PageFaultHandler][do_handlePageFault] Frame(12) is dirty, do swap-out Thread(72:8/W0)
[PageFaultHandler][SwapOut] page Page(18:7/12) frame Frame(12)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 18
PageTableEntry][do_lock] iorb IORB(Id(871),Device(0),Page(18:7/12),Diskblock(146),FileWrite,Openfile(88:8/0),Thread(72:8/W1)) this Page(18:7/12)
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(3:8/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(3:8/28) swap-in finish Thread(80:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 19070 offset = 638 page no = 18 Thread(76:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(76:6/RU) 22 Page(18:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(76:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(76:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(18:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(61:7/4)
[PageFaultHandler][do_handlePageFault] set Page(18:6/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(18:6/4) do swap-in Thread(76:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(872),Device(0),Page(18:6/4),Diskblock(18),FileRead,Openfile(60:6/0),Thread(76:6/W1)) this Page(18:6/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(4:7/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(4:7/25) swap-in finish Thread(77:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 133023/250000[MMU][do_refer] address = 4515 offset = 419 page no = 4 Thread(66:7/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 23966 offset = 414 page no = 23 Thread(66:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(66:7/RU) 21 Page(23:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(66:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(66:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(23:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(1:7/11)
[PageFaultHandler][do_handlePageFault] Frame(11) is dirty, do swap-out Thread(66:7/W0)
[PageFaultHandler][SwapOut] page Page(1:7/11) frame Frame(11)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 1
PageTableEntry][do_lock] iorb IORB(Id(873),Device(0),Page(1:7/11),Diskblock(65),FileWrite,Openfile(78:7/0),Thread(66:7/W1)) this Page(1:7/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(18:7/12)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(12) Page(18:7/12) Thread(72:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(16:8/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(16:8/12) do swap-in Thread(72:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(874),Device(0),Page(16:8/12),Diskblock(144),FileRead,Openfile(88:8/0),Thread(72:8/W1)) this Page(16:8/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(18:6/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(18:6/4) swap-in finish Thread(76:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 53620 offset = 372 page no = 52 Thread(80:8/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 52567 offset = 343 page no = 51 Thread(80:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(80:8/RU) 21 Page(51:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(80:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(80:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(51:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(18:6/4)
[PageFaultHandler][do_handlePageFault] Frame(4) is dirty, do swap-out Thread(80:8/W0)
[PageFaultHandler][SwapOut] page Page(18:6/4) frame Frame(4)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 18
PageTableEntry][do_lock] iorb IORB(Id(875),Device(0),Page(18:6/4),Diskblock(146),FileWrite,Openfile(88:8/0),Thread(80:8/W1)) this Page(18:6/4)
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:7/11)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(11) Page(1:7/11) Thread(66:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(23:7/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(23:7/11) do swap-in Thread(66:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(876),Device(0),Page(23:7/11),Diskblock(87),FileRead,Openfile(78:7/0),Thread(66:7/W1)) this Page(23:7/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 17989 offset = 581 page no = 17 Thread(77:7/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(16:8/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(16:8/12) swap-in finish Thread(72:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(18:6/4)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(4) Page(18:6/4) Thread(80:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(51:8/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(51:8/4) do swap-in Thread(80:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(877),Device(0),Page(51:8/4),Diskblock(179),FileRead,Openfile(88:8/0),Thread(80:8/W1)) this Page(51:8/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(23:7/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(23:7/11) swap-in finish Thread(66:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 30303 offset = 607 page no = 29 Thread(63:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(63:8/RU) 21 Page(29:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(63:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(63:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(29:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(16:8/12)
[PageFaultHandler][do_handlePageFault] Frame(12) is dirty, do swap-out Thread(63:8/W0)
[PageFaultHandler][SwapOut] page Page(16:8/12) frame Frame(12)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 16
PageTableEntry][do_lock] iorb IORB(Id(878),Device(0),Page(16:8/12),Diskblock(144),FileWrite,Openfile(88:8/0),Thread(63:8/W1)) this Page(16:8/12)
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 20981 offset = 501 page no = 20 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 22 Page(20:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(20:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(49:6/2)
[PageFaultHandler][do_handlePageFault] Frame(2) is dirty, do swap-out Thread(48:6/W0)
[PageFaultHandler][SwapOut] page Page(49:6/2) frame Frame(2)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 49
PageTableEntry][do_lock] iorb IORB(Id(879),Device(0),Page(49:6/2),Diskblock(49),FileWrite,Openfile(60:6/0),Thread(48:6/W1)) this Page(49:6/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(51:8/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(51:8/4) swap-in finish Thread(80:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 3248 offset = 176 page no = 3 Thread(81:8/RU)
[MMU][do_refer] Do memory read.
Simulation progress: 134003/250000[PageTableEntry][do_unlock] this Page(16:8/12)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(12) Page(16:8/12) Thread(63:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(29:8/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(29:8/12) do swap-in Thread(63:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(880),Device(0),Page(29:8/12),Diskblock(157),FileRead,Openfile(88:8/0),Thread(63:8/W1)) this Page(29:8/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(49:6/2)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(2) Page(49:6/2) Thread(48:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(20:6/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(20:6/2) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(881),Device(0),Page(20:6/2),Diskblock(20),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(20:6/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(29:8/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(29:8/12) swap-in finish Thread(63:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(20:6/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(20:6/2) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 62857 offset = 393 page no = 61 Thread(77:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(77:7/RU) 21 Page(61:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(77:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(77:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(61:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(20:6/2)
[PageFaultHandler][do_handlePageFault] Frame(2) is dirty, do swap-out Thread(77:7/W0)
[PageFaultHandler][SwapOut] page Page(20:6/2) frame Frame(2)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 20
PageTableEntry][do_lock] iorb IORB(Id(882),Device(0),Page(20:6/2),Diskblock(84),FileWrite,Openfile(78:7/0),Thread(77:7/W1)) this Page(20:6/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 61710 offset = 270 page no = 60 Thread(72:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(72:8/RU) 21 Page(60:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(72:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(72:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(60:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(9:7/10)
[PageFaultHandler][do_handlePageFault] Frame(10) is dirty, do swap-out Thread(72:8/W0)
[PageFaultHandler][SwapOut] page Page(9:7/10) frame Frame(10)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 9
PageTableEntry][do_lock] iorb IORB(Id(883),Device(0),Page(9:7/10),Diskblock(137),FileWrite,Openfile(88:8/0),Thread(72:8/W1)) this Page(9:7/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(20:6/2)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(2) Page(20:6/2) Thread(77:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(61:7/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(61:7/2) do swap-in Thread(77:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(884),Device(0),Page(61:7/2),Diskblock(125),FileRead,Openfile(78:7/0),Thread(77:7/W1)) this Page(61:7/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 31322 offset = 602 page no = 30 Thread(66:7/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(9:7/10)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(10) Page(9:7/10) Thread(72:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(60:8/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(60:8/10) do swap-in Thread(72:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(885),Device(0),Page(60:8/10),Diskblock(188),FileRead,Openfile(88:8/0),Thread(72:8/W1)) this Page(60:8/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 22141 offset = 637 page no = 21 Thread(78:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(78:8/RU) 21 Page(21:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(78:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(78:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(21:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(9:8/9)
[PageFaultHandler][do_handlePageFault] set Page(21:8/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(21:8/9) do swap-in Thread(78:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(886),Device(0),Page(21:8/9),Diskblock(149),FileRead,Openfile(88:8/0),Thread(78:8/W1)) this Page(21:8/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 39045 offset = 133 page no = 38 Thread(80:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(80:8/RU) 22 Page(38:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(80:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(80:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(38:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(36:7/21)
[PageFaultHandler][do_handlePageFault] Frame(21) is dirty, do swap-out Thread(80:8/W0)
[PageFaultHandler][SwapOut] page Page(36:7/21) frame Frame(21)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 36
PageTableEntry][do_lock] iorb IORB(Id(887),Device(0),Page(36:7/21),Diskblock(164),FileWrite,Openfile(88:8/0),Thread(80:8/W1)) this Page(36:7/21)
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(61:7/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(61:7/2) swap-in finish Thread(77:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 135004/250000[MMU][do_refer] address = 17821 offset = 413 page no = 17 Thread(81:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(81:8/RU) 21 Page(17:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(81:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(81:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(17:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(3:6/1)
[PageFaultHandler][do_handlePageFault] Frame(1) is dirty, do swap-out Thread(81:8/W0)
[PageFaultHandler][SwapOut] page Page(3:6/1) frame Frame(1)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 3
PageTableEntry][do_lock] iorb IORB(Id(888),Device(0),Page(3:6/1),Diskblock(131),FileWrite,Openfile(88:8/0),Thread(81:8/W1)) this Page(3:6/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(60:8/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(60:8/10) swap-in finish Thread(72:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(21:8/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(21:8/9) swap-in finish Thread(78:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 17869 offset = 461 page no = 17 Thread(73:7/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(36:7/21)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(21) Page(36:7/21) Thread(80:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(38:8/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(38:8/21) do swap-in Thread(80:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(889),Device(0),Page(38:8/21),Diskblock(166),FileRead,Openfile(88:8/0),Thread(80:8/W1)) this Page(38:8/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 41612 offset = 652 page no = 40 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 21 Page(40:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(40:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(60:8/10)
[PageFaultHandler][do_handlePageFault] set Page(40:6/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(40:6/10) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(890),Device(0),Page(40:6/10),Diskblock(40),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(40:6/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(3:6/1)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(1) Page(3:6/1) Thread(81:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(17:8/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(17:8/1) do swap-in Thread(81:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(891),Device(0),Page(17:8/1),Diskblock(145),FileRead,Openfile(88:8/0),Thread(81:8/W1)) this Page(17:8/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(892),Device(2),Page(0:8/15),Diskblock(11),FileWrite,Openfile(100:8/2),Thread(65:8/W0)) this Page(0:8/15)
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 47069 offset = 989 page no = 45 Thread(66:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(66:7/RU) 22 Page(45:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(66:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(66:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(45:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(52:8/13)
[PageFaultHandler][do_handlePageFault] Frame(13) is dirty, do swap-out Thread(66:7/W0)
[PageFaultHandler][SwapOut] page Page(52:8/13) frame Frame(13)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 52
PageTableEntry][do_lock] iorb IORB(Id(893),Device(0),Page(52:8/13),Diskblock(116),FileWrite,Openfile(78:7/0),Thread(66:7/W1)) this Page(52:8/13)
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(38:8/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(38:8/21) swap-in finish Thread(80:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 43527 offset = 519 page no = 42 Thread(72:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(72:8/RU) 21 Page(42:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(72:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(72:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(42:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(38:8/21)
[PageFaultHandler][do_handlePageFault] Frame(21) is dirty, do swap-out Thread(72:8/W0)
[PageFaultHandler][SwapOut] page Page(38:8/21) frame Frame(21)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 38
PageTableEntry][do_lock] iorb IORB(Id(894),Device(0),Page(38:8/21),Diskblock(166),FileWrite,Openfile(88:8/0),Thread(72:8/W1)) this Page(38:8/21)
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(40:6/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(40:6/10) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 27765 offset = 117 page no = 27 Thread(76:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(76:6/RU) 21 Page(27:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(76:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(76:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(27:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(33:6/29)
[PageFaultHandler][do_handlePageFault] Frame(29) is dirty, do swap-out Thread(76:6/W0)
[PageFaultHandler][SwapOut] page Page(33:6/29) frame Frame(29)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 33
PageTableEntry][do_lock] iorb IORB(Id(895),Device(0),Page(33:6/29),Diskblock(33),FileWrite,Openfile(60:6/0),Thread(76:6/W1)) this Page(33:6/29)
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:8/15)
PageTableEntry][do_lock] iorb IORB(Id(896),Device(2),Page(0:8/15),Diskblock(12),FileRead,Openfile(102:8/2),Thread(78:8/W0)) this Page(0:8/15)
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(17:8/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(17:8/1) swap-in finish Thread(81:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(52:8/13)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(13) Page(52:8/13) Thread(66:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(45:7/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(45:7/13) do swap-in Thread(66:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(897),Device(0),Page(45:7/13),Diskblock(109),FileRead,Openfile(78:7/0),Thread(66:7/W1)) this Page(45:7/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 40242 offset = 306 page no = 39 Thread(80:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(80:8/RU) 22 Page(39:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(80:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(80:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(39:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(11:8/3)
[PageFaultHandler][do_handlePageFault] Frame(3) is dirty, do swap-out Thread(80:8/W0)
[PageFaultHandler][SwapOut] page Page(11:8/3) frame Frame(3)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 11
PageTableEntry][do_lock] iorb IORB(Id(898),Device(0),Page(11:8/3),Diskblock(139),FileWrite,Openfile(88:8/0),Thread(80:8/W1)) this Page(11:8/3)
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 31852 offset = 108 page no = 31 Thread(77:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(77:7/RU) 21 Page(31:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(77:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(77:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(31:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(17:7/26)
[PageFaultHandler][do_handlePageFault] Frame(26) is dirty, do swap-out Thread(77:7/W0)
[PageFaultHandler][SwapOut] page Page(17:7/26) frame Frame(26)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 17
PageTableEntry][do_lock] iorb IORB(Id(899),Device(0),Page(17:7/26),Diskblock(81),FileWrite,Openfile(78:7/0),Thread(77:7/W1)) this Page(17:7/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 136032/250000[PageTableEntry][do_unlock] this Page(38:8/21)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(21) Page(38:8/21) Thread(72:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(42:8/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(42:8/21) do swap-in Thread(72:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(900),Device(0),Page(42:8/21),Diskblock(170),FileRead,Openfile(88:8/0),Thread(72:8/W1)) this Page(42:8/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(33:6/29)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(29) Page(33:6/29) Thread(76:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(27:6/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(27:6/29) do swap-in Thread(76:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(901),Device(0),Page(27:6/29),Diskblock(27),FileRead,Openfile(60:6/0),Thread(76:6/W1)) this Page(27:6/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 35542 offset = 726 page no = 34 Thread(79:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(79:8/RU) 21 Page(34:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(79:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(79:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(34:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(11:7/17)
[PageFaultHandler][do_handlePageFault] set Page(34:8/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(34:8/17) do swap-in Thread(79:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(902),Device(0),Page(34:8/17),Diskblock(162),FileRead,Openfile(88:8/0),Thread(79:8/W1)) this Page(34:8/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:8/15)
[PageTableEntry][do_unlock] this Page(45:7/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(45:7/13) swap-in finish Thread(66:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(11:8/3)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(3) Page(11:8/3) Thread(80:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(39:8/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(39:8/3) do swap-in Thread(80:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(903),Device(0),Page(39:8/3),Diskblock(167),FileRead,Openfile(88:8/0),Thread(80:8/W1)) this Page(39:8/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(17:7/26)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(26) Page(17:7/26) Thread(77:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(31:7/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(31:7/26) do swap-in Thread(77:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(904),Device(0),Page(31:7/26),Diskblock(95),FileRead,Openfile(78:7/0),Thread(77:7/W1)) this Page(31:7/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 27455 offset = 831 page no = 26 Thread(57:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(57:7/RU) 21 Page(26:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(57:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(57:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(26:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(45:7/13)
[PageFaultHandler][do_handlePageFault] Frame(13) is dirty, do swap-out Thread(57:7/W0)
[PageFaultHandler][SwapOut] page Page(45:7/13) frame Frame(13)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 45
PageTableEntry][do_lock] iorb IORB(Id(905),Device(0),Page(45:7/13),Diskblock(109),FileWrite,Openfile(78:7/0),Thread(57:7/W1)) this Page(45:7/13)
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(42:8/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(42:8/21) swap-in finish Thread(72:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 7671 offset = 503 page no = 7 Thread(48:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(48:6/RU) 22 Page(7:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(48:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(48:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(7:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(42:8/21)
[PageFaultHandler][do_handlePageFault] set Page(7:6/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(7:6/21) do swap-in Thread(48:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(906),Device(0),Page(7:6/21),Diskblock(7),FileRead,Openfile(60:6/0),Thread(48:6/W1)) this Page(7:6/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(27:6/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(27:6/29) swap-in finish Thread(76:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 21160 offset = 680 page no = 20 Thread(66:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(66:7/RU) 21 Page(20:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(66:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(66:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(20:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(0:6/16)
[PageFaultHandler][do_handlePageFault] Frame(16) is dirty, do swap-out Thread(66:7/W0)
[PageFaultHandler][SwapOut] page Page(0:6/16) frame Frame(16)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 0
PageTableEntry][do_lock] iorb IORB(Id(907),Device(0),Page(0:6/16),Diskblock(64),FileWrite,Openfile(78:7/0),Thread(66:7/W1)) this Page(0:6/16)
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(34:8/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(34:8/17) swap-in finish Thread(79:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 137060/250000[PageTableEntry][do_unlock] this Page(39:8/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(39:8/3) swap-in finish Thread(80:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(31:7/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(31:7/26) swap-in finish Thread(77:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(45:7/13)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(13) Page(45:7/13) Thread(57:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(26:7/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(26:7/13) do swap-in Thread(57:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(908),Device(0),Page(26:7/13),Diskblock(90),FileRead,Openfile(78:7/0),Thread(57:7/W1)) this Page(26:7/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 42893 offset = 909 page no = 41 Thread(72:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(72:8/RU) 22 Page(41:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(72:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(72:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(41:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(39:8/3)
[PageFaultHandler][do_handlePageFault] Frame(3) is dirty, do swap-out Thread(72:8/W0)
[PageFaultHandler][SwapOut] page Page(39:8/3) frame Frame(3)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 39
PageTableEntry][do_lock] iorb IORB(Id(909),Device(0),Page(39:8/3),Diskblock(167),FileWrite,Openfile(88:8/0),Thread(72:8/W1)) this Page(39:8/3)
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(7:6/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(7:6/21) swap-in finish Thread(48:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(0:6/16)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(16) Page(0:6/16) Thread(66:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(20:7/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(20:7/16) do swap-in Thread(66:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(910),Device(0),Page(20:7/16),Diskblock(84),FileRead,Openfile(78:7/0),Thread(66:7/W1)) this Page(20:7/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(26:7/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(26:7/13) swap-in finish Thread(57:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(39:8/3)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(3) Page(39:8/3) Thread(72:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(41:8/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(41:8/3) do swap-in Thread(72:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(911),Device(0),Page(41:8/3),Diskblock(169),FileRead,Openfile(88:8/0),Thread(72:8/W1)) this Page(41:8/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 35967 offset = 127 page no = 35 Thread(81:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(81:8/RU) 22 Page(35:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(81:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(81:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(35:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(0:8/15)
[PageFaultHandler][do_handlePageFault] Frame(15) is dirty, do swap-out Thread(81:8/W0)
[PageFaultHandler][SwapOut] page Page(0:8/15) frame Frame(15)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 0
PageTableEntry][do_lock] iorb IORB(Id(912),Device(0),Page(0:8/15),Diskblock(128),FileWrite,Openfile(88:8/0),Thread(81:8/W1)) this Page(0:8/15)
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(20:7/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(20:7/16) swap-in finish Thread(66:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 15272 offset = 936 page no = 14 Thread(73:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(73:7/RU) 21 Page(14:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(73:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(73:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(14:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(22:7/23)
[PageFaultHandler][do_handlePageFault] Frame(23) is dirty, do swap-out Thread(73:7/W0)
[PageFaultHandler][SwapOut] page Page(22:7/23) frame Frame(23)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 22
PageTableEntry][do_lock] iorb IORB(Id(913),Device(0),Page(22:7/23),Diskblock(86),FileWrite,Openfile(78:7/0),Thread(73:7/W1)) this Page(22:7/23)
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 48914 offset = 786 page no = 47 Thread(62:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(62:7/RU) 22 Page(47:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(62:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(62:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(47:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(13:7/8)
[PageFaultHandler][do_handlePageFault] Frame(8) is dirty, do swap-out Thread(62:7/W0)
[PageFaultHandler][SwapOut] page Page(13:7/8) frame Frame(8)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 13
PageTableEntry][do_lock] iorb IORB(Id(914),Device(0),Page(13:7/8),Diskblock(77),FileWrite,Openfile(78:7/0),Thread(62:7/W1)) this Page(13:7/8)
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(41:8/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(41:8/3) swap-in finish Thread(72:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 138040/250000[PageTableEntry][do_unlock] this Page(0:8/15)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(15) Page(0:8/15) Thread(81:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(35:8/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(35:8/15) do swap-in Thread(81:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(915),Device(0),Page(35:8/15),Diskblock(163),FileRead,Openfile(88:8/0),Thread(81:8/W1)) this Page(35:8/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(22:7/23)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(23) Page(22:7/23) Thread(73:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(14:7/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(14:7/23) do swap-in Thread(73:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(916),Device(0),Page(14:7/23),Diskblock(78),FileRead,Openfile(78:7/0),Thread(73:7/W1)) this Page(14:7/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(13:7/8)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(8) Page(13:7/8) Thread(62:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(47:7/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(47:7/8) do swap-in Thread(62:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(917),Device(0),Page(47:7/8),Diskblock(111),FileRead,Openfile(78:7/0),Thread(62:7/W1)) this Page(47:7/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 20372 offset = 916 page no = 19 Thread(66:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(66:7/RU) 22 Page(19:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(66:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(66:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(19:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(41:8/3)
[PageFaultHandler][do_handlePageFault] Frame(3) is dirty, do swap-out Thread(66:7/W0)
[PageFaultHandler][SwapOut] page Page(41:8/3) frame Frame(3)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 41
PageTableEntry][do_lock] iorb IORB(Id(918),Device(0),Page(41:8/3),Diskblock(105),FileWrite,Openfile(78:7/0),Thread(66:7/W1)) this Page(41:8/3)
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(35:8/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(35:8/15) swap-in finish Thread(81:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 37644 offset = 780 page no = 36 Thread(63:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(63:8/RU) 22 Page(36:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(63:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(63:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(36:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(60:7/18)
[PageFaultHandler][do_handlePageFault] set Page(36:8/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(36:8/18) do swap-in Thread(63:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(919),Device(0),Page(36:8/18),Diskblock(164),FileRead,Openfile(88:8/0),Thread(63:8/W1)) this Page(36:8/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(14:7/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(14:7/23) swap-in finish Thread(73:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(47:7/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(47:7/8) swap-in finish Thread(62:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(41:8/3)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(3) Page(41:8/3) Thread(66:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(19:7/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(19:7/3) do swap-in Thread(66:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(920),Device(0),Page(19:7/3),Diskblock(83),FileRead,Openfile(78:7/0),Thread(66:7/W1)) this Page(19:7/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(921),Device(2),Page(4:7/25),Diskblock(12),FileWrite,Openfile(106:7/2),Thread(57:7/W0)) this Page(4:7/25)
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(36:8/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(36:8/18) swap-in finish Thread(63:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 49772 offset = 620 page no = 48 Thread(80:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(80:8/RU) 21 Page(48:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(80:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(80:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(48:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(47:7/8)
[PageFaultHandler][do_handlePageFault] Frame(8) is dirty, do swap-out Thread(80:8/W0)
[PageFaultHandler][SwapOut] page Page(47:7/8) frame Frame(8)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 47
PageTableEntry][do_lock] iorb IORB(Id(922),Device(0),Page(47:7/8),Diskblock(175),FileWrite,Openfile(88:8/0),Thread(80:8/W1)) this Page(47:7/8)
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(19:7/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(19:7/3) swap-in finish Thread(66:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(4:7/25)
[MMU][do_refer] address = 11287 offset = 23 page no = 11 Thread(73:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(73:7/RU) 21 Page(11:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(73:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(73:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(11:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(4:7/25)
[PageFaultHandler][do_handlePageFault] Frame(25) is dirty, do swap-out Thread(73:7/W0)
[PageFaultHandler][SwapOut] page Page(4:7/25) frame Frame(25)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 4
PageTableEntry][do_lock] iorb IORB(Id(923),Device(0),Page(4:7/25),Diskblock(68),FileWrite,Openfile(78:7/0),Thread(73:7/W1)) this Page(4:7/25)
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 43092 offset = 84 page no = 42 Thread(72:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(72:8/RU) 22 Page(42:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(72:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(72:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(42:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(23:7/11)
[PageFaultHandler][do_handlePageFault] set Page(42:8/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(42:8/11) do swap-in Thread(72:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(924),Device(0),Page(42:8/11),Diskblock(170),FileRead,Openfile(88:8/0),Thread(72:8/W1)) this Page(42:8/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 139002/250000[PageTableEntry][do_unlock] this Page(47:7/8)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(8) Page(47:7/8) Thread(80:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(48:8/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(48:8/8) do swap-in Thread(80:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(925),Device(0),Page(48:8/8),Diskblock(176),FileRead,Openfile(88:8/0),Thread(80:8/W1)) this Page(48:8/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(4:7/25)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(25) Page(4:7/25) Thread(73:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(11:7/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(11:7/25) do swap-in Thread(73:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(926),Device(0),Page(11:7/25),Diskblock(75),FileRead,Openfile(78:7/0),Thread(73:7/W1)) this Page(11:7/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 53299 offset = 51 page no = 52 Thread(82:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(82:8/RU) 21 Page(52:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(82:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(82:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(52:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(46:7/19)
[PageFaultHandler][do_handlePageFault] set Page(52:8/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(52:8/19) do swap-in Thread(82:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(927),Device(0),Page(52:8/19),Diskblock(180),FileRead,Openfile(88:8/0),Thread(82:8/W1)) this Page(52:8/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(42:8/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(42:8/11) swap-in finish Thread(72:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(48:8/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(48:8/8) swap-in finish Thread(80:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(11:7/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(11:7/25) swap-in finish Thread(73:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 35514 offset = 698 page no = 34 Thread(63:8/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 22755 offset = 227 page no = 22 Thread(70:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(70:8/RU) 21 Page(22:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(70:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(70:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(22:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(48:8/8)
[PageFaultHandler][do_handlePageFault] set Page(22:8/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(22:8/8) do swap-in Thread(70:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(928),Device(0),Page(22:8/8),Diskblock(150),FileRead,Openfile(88:8/0),Thread(70:8/W1)) this Page(22:8/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 65351 offset = 839 page no = 63 Thread(66:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(66:7/RU) 22 Page(63:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(66:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(66:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(63:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(28:6/14)
[PageFaultHandler][do_handlePageFault] Frame(14) is dirty, do swap-out Thread(66:7/W0)
[PageFaultHandler][SwapOut] page Page(28:6/14) frame Frame(14)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 28
PageTableEntry][do_lock] iorb IORB(Id(929),Device(0),Page(28:6/14),Diskblock(92),FileWrite,Openfile(78:7/0),Thread(66:7/W1)) this Page(28:6/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(52:8/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(52:8/19) swap-in finish Thread(82:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 24653 offset = 77 page no = 24 Thread(77:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(77:7/RU) 21 Page(24:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(77:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(77:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(24:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(51:8/4)
[PageFaultHandler][do_handlePageFault] set Page(24:7/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(24:7/4) do swap-in Thread(77:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(930),Device(0),Page(24:7/4),Diskblock(88),FileRead,Openfile(78:7/0),Thread(77:7/W1)) this Page(24:7/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(22:8/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(22:8/8) swap-in finish Thread(70:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(28:6/14)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(14) Page(28:6/14) Thread(66:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(63:7/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(63:7/14) do swap-in Thread(66:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(931),Device(0),Page(63:7/14),Diskblock(127),FileRead,Openfile(78:7/0),Thread(66:7/W1)) this Page(63:7/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 57141 offset = 821 page no = 55 Thread(62:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(62:7/RU) 21 Page(55:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(62:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(62:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(55:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(44:6/27)
[PageFaultHandler][do_handlePageFault] set Page(55:7/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(55:7/27) do swap-in Thread(62:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(932),Device(0),Page(55:7/27),Diskblock(119),FileRead,Openfile(78:7/0),Thread(62:7/W1)) this Page(55:7/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(24:7/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(24:7/4) swap-in finish Thread(77:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageCleanDaemon][unleash] osp.Memory.PageCleanDaemon@1bf99cf5 execute time 140000
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(0)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(20)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(5)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(21)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(15)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(18)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(0)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(0) Page(54:6/0) isDirty true
[PageFaultHandler][SwapOut] file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 54
PageTableEntry][do_lock] iorb IORB(Id(933),Device(0),Page(54:6/0),Diskblock(54),FileWrite,Openfile(60:6/0),Thread(85:0/W1)) this Page(54:6/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 140007/250000[MMU][do_refer] address = 23681 offset = 129 page no = 23 Thread(80:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(80:8/RU) 22 Page(23:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(80:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(80:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(23:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(24:7/4)
[PageFaultHandler][do_handlePageFault] set Page(23:8/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(23:8/4) do swap-in Thread(80:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(934),Device(0),Page(23:8/4),Diskblock(151),FileRead,Openfile(88:8/0),Thread(80:8/W1)) this Page(23:8/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(63:7/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(63:7/14) swap-in finish Thread(66:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(55:7/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(55:7/27) swap-in finish Thread(62:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 25282 offset = 706 page no = 24 Thread(79:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(79:8/RU) 21 Page(24:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(79:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(79:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(24:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(63:7/14)
[PageFaultHandler][do_handlePageFault] Frame(14) is dirty, do swap-out Thread(79:8/W0)
[PageFaultHandler][SwapOut] page Page(63:7/14) frame Frame(14)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 63
PageTableEntry][do_lock] iorb IORB(Id(935),Device(0),Page(63:7/14),Diskblock(191),FileWrite,Openfile(88:8/0),Thread(79:8/W1)) this Page(63:7/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(54:6/0)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(0) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(20)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(20) Page(10:7/20) isDirty true
[PageFaultHandler][SwapOut] file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 10
PageTableEntry][do_lock] iorb IORB(Id(936),Device(0),Page(10:7/20),Diskblock(74),FileWrite,Openfile(78:7/0),Thread(85:0/W1)) this Page(10:7/20)
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 37207 offset = 343 page no = 36 Thread(81:8/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(23:8/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(23:8/4) swap-in finish Thread(80:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 44646 offset = 614 page no = 43 Thread(70:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(70:8/RU) 22 Page(43:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(70:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(70:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(43:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(17:8/1)
[PageFaultHandler][do_handlePageFault] set Page(43:8/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(43:8/1) do swap-in Thread(70:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(937),Device(0),Page(43:8/1),Diskblock(171),FileRead,Openfile(88:8/0),Thread(70:8/W1)) this Page(43:8/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(63:7/14)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(14) Page(63:7/14) Thread(79:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(24:8/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(24:8/14) do swap-in Thread(79:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(938),Device(0),Page(24:8/14),Diskblock(152),FileRead,Openfile(88:8/0),Thread(79:8/W1)) this Page(24:8/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(10:7/20)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(20) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(5)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(5) Page(30:7/5) isDirty true
[PageFaultHandler][SwapOut] file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 30
PageTableEntry][do_lock] iorb IORB(Id(939),Device(0),Page(30:7/5),Diskblock(94),FileWrite,Openfile(78:7/0),Thread(85:0/W1)) this Page(30:7/5)
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(43:8/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(43:8/1) swap-in finish Thread(70:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 33297 offset = 529 page no = 32 Thread(62:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(62:7/RU) 21 Page(32:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(62:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(62:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(32:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(54:6/0)
[PageFaultHandler][do_handlePageFault] set Page(32:7/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(32:7/0) do swap-in Thread(62:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(940),Device(0),Page(32:7/0),Diskblock(96),FileRead,Openfile(78:7/0),Thread(62:7/W1)) this Page(32:7/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(24:8/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(24:8/14) swap-in finish Thread(79:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 24260 offset = 708 page no = 23 Thread(63:8/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(30:7/5)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(5) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(21)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(21) Page(7:6/21) isDirty true
[PageFaultHandler][SwapOut] file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 7
PageTableEntry][do_lock] iorb IORB(Id(941),Device(0),Page(7:6/21),Diskblock(7),FileWrite,Openfile(60:6/0),Thread(85:0/W1)) this Page(7:6/21)
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(32:7/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(32:7/0) swap-in finish Thread(62:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 141002/250000[MMU][do_refer] address = 25639 offset = 39 page no = 25 Thread(80:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(80:8/RU) 21 Page(25:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(80:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(80:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(25:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(32:7/0)
[PageFaultHandler][do_handlePageFault] set Page(25:8/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(25:8/0) do swap-in Thread(80:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(942),Device(0),Page(25:8/0),Diskblock(153),FileRead,Openfile(88:8/0),Thread(80:8/W1)) this Page(25:8/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(7:6/21)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(21) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(15)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(15) Page(35:8/15) isDirty true
[PageFaultHandler][SwapOut] file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 35
PageTableEntry][do_lock] iorb IORB(Id(943),Device(0),Page(35:8/15),Diskblock(163),FileWrite,Openfile(88:8/0),Thread(85:0/W1)) this Page(35:8/15)
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 40233 offset = 297 page no = 39 Thread(76:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(76:6/RU) 21 Page(39:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(76:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(76:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(39:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(10:7/20)
[PageFaultHandler][do_handlePageFault] set Page(39:6/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(39:6/20) do swap-in Thread(76:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(944),Device(0),Page(39:6/20),Diskblock(39),FileRead,Openfile(60:6/0),Thread(76:6/W1)) this Page(39:6/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(25:8/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(25:8/0) swap-in finish Thread(80:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 20613 offset = 133 page no = 20 Thread(86:10/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(86:10/RU) 22 Page(20:10/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(86:10/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(86:10/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(20:10/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(10/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(27:6/29)
[PageFaultHandler][do_handlePageFault] set Page(20:10/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(20:10/29) do swap-in Thread(86:10/W0)
PageTableEntry][do_lock] iorb IORB(Id(945),Device(0),Page(20:10/29),Diskblock(276),FileRead,Openfile(116:10/0),Thread(86:10/W1)) this Page(20:10/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(946),Device(2),Page(0:9/null),Diskblock(13),FileRead,Openfile(106:7/2),Thread(84:9/W0)) this Page(0:9/null)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] validating_thread is null, handlePageFault
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(84:9/W0) 23 Page(0:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(84:9/W0) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(84:9/W1) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(0:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(26:7/13)
[PageFaultHandler][do_handlePageFault] set Page(0:9/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(0:9/13) do swap-in Thread(84:9/W1)
PageTableEntry][do_lock] iorb IORB(Id(947),Device(0),Page(0:9/13),Diskblock(192),FileRead,Openfile(112:9/0),Thread(84:9/W2)) this Page(0:9/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(35:8/15)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(15) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(18)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(18) Page(36:8/18) isDirty true
[PageFaultHandler][SwapOut] file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 36
PageTableEntry][do_lock] iorb IORB(Id(948),Device(0),Page(36:8/18),Diskblock(164),FileWrite,Openfile(88:8/0),Thread(85:0/W1)) this Page(36:8/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 45035 offset = 1003 page no = 43 Thread(70:8/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(39:6/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(39:6/20) swap-in finish Thread(76:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 32805 offset = 37 page no = 32 Thread(79:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(79:8/RU) 22 Page(32:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(79:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(79:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(32:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(39:6/20)
[PageFaultHandler][do_handlePageFault] set Page(32:8/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(32:8/20) do swap-in Thread(79:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(949),Device(0),Page(32:8/20),Diskblock(160),FileRead,Openfile(88:8/0),Thread(79:8/W1)) this Page(32:8/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 30942 offset = 222 page no = 30 Thread(63:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(63:8/RU) 22 Page(30:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(63:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(63:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(30:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(31:7/26)
[PageFaultHandler][do_handlePageFault] set Page(30:8/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(30:8/26) do swap-in Thread(63:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(950),Device(0),Page(30:8/26),Diskblock(158),FileRead,Openfile(88:8/0),Thread(63:8/W1)) this Page(30:8/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(951),Device(2),Page(3:8/28),Diskblock(11),FileRead,Openfile(108:6/2),Thread(81:8/W0)) this Page(3:8/28)
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(20:10/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(20:10/29) swap-in finish Thread(86:10/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(0:9/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(0:9/13) swap-in finish Thread(84:9/W1)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 142077/250000[PageTableEntry][do_unlock] this Page(36:8/18)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(18) finish
[PageTableEntry][do_unlock] this Page(32:8/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(32:8/20) swap-in finish Thread(79:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(3:8/28)
[PageTableEntry][do_unlock] this Page(30:8/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(30:8/26) swap-in finish Thread(63:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 8077 offset = 909 page no = 7 Thread(76:6/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 4731 offset = 635 page no = 4 Thread(73:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(73:7/RU) 21 Page(4:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(73:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(73:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(4:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(30:8/26)
[PageFaultHandler][do_handlePageFault] Frame(26) is dirty, do swap-out Thread(73:7/W0)
[PageFaultHandler][SwapOut] page Page(30:8/26) frame Frame(26)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 30
PageTableEntry][do_lock] iorb IORB(Id(952),Device(0),Page(30:8/26),Diskblock(94),FileWrite,Openfile(78:7/0),Thread(73:7/W1)) this Page(30:8/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:9/13)
[PageTableEntry][do_unlock] this Page(30:8/26)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(26) Page(30:8/26) Thread(73:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(4:7/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(4:7/26) do swap-in Thread(73:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(953),Device(0),Page(4:7/26),Diskblock(68),FileRead,Openfile(78:7/0),Thread(73:7/W1)) this Page(4:7/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(4:7/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(4:7/26) swap-in finish Thread(73:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 38535 offset = 647 page no = 37 Thread(77:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(77:7/RU) 21 Page(37:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(77:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(77:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(37:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(20:7/16)
[PageFaultHandler][do_handlePageFault] set Page(37:7/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(37:7/16) do swap-in Thread(77:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(954),Device(0),Page(37:7/16),Diskblock(101),FileRead,Openfile(78:7/0),Thread(77:7/W1)) this Page(37:7/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 40232 offset = 296 page no = 39 Thread(80:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(80:8/RU) 21 Page(39:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(80:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(80:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(39:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(7:6/21)
[PageFaultHandler][do_handlePageFault] set Page(39:8/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(39:8/21) do swap-in Thread(80:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(955),Device(0),Page(39:8/21),Diskblock(167),FileRead,Openfile(88:8/0),Thread(80:8/W1)) this Page(39:8/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(37:7/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(37:7/16) swap-in finish Thread(77:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 143029/250000[MMU][do_refer] address = 15785 offset = 425 page no = 15 Thread(72:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(72:8/RU) 21 Page(15:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(72:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(72:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(15:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(34:8/17)
[PageFaultHandler][do_handlePageFault] set Page(15:8/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(15:8/17) do swap-in Thread(72:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(956),Device(0),Page(15:8/17),Diskblock(143),FileRead,Openfile(88:8/0),Thread(72:8/W1)) this Page(15:8/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(39:8/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(39:8/21) swap-in finish Thread(80:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(15:8/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(15:8/17) swap-in finish Thread(72:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 31428 offset = 708 page no = 30 Thread(76:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(76:6/RU) 21 Page(30:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(76:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(76:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(30:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(39:8/21)
[PageFaultHandler][do_handlePageFault] set Page(30:6/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(30:6/21) do swap-in Thread(76:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(957),Device(0),Page(30:6/21),Diskblock(30),FileRead,Openfile(60:6/0),Thread(76:6/W1)) this Page(30:6/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 46341 offset = 261 page no = 45 Thread(78:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(78:8/RU) 22 Page(45:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(78:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(78:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(45:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(35:8/15)
[PageFaultHandler][do_handlePageFault] set Page(45:8/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(45:8/15) do swap-in Thread(78:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(958),Device(0),Page(45:8/15),Diskblock(173),FileRead,Openfile(88:8/0),Thread(78:8/W1)) this Page(45:8/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 7522 offset = 354 page no = 7 Thread(84:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(84:9/RU) 22 Page(7:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(84:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(84:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(7:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(14:7/23)
[PageFaultHandler][do_handlePageFault] set Page(7:9/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(7:9/23) do swap-in Thread(84:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(959),Device(0),Page(7:9/23),Diskblock(199),FileRead,Openfile(112:9/0),Thread(84:9/W1)) this Page(7:9/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 32095 offset = 351 page no = 31 Thread(62:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(62:7/RU) 22 Page(31:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(62:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(62:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(31:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(36:8/18)
[PageFaultHandler][do_handlePageFault] set Page(31:7/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(31:7/18) do swap-in Thread(62:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(960),Device(0),Page(31:7/18),Diskblock(95),FileRead,Openfile(78:7/0),Thread(62:7/W1)) this Page(31:7/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(30:6/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(30:6/21) swap-in finish Thread(76:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 21352 offset = 872 page no = 20 Thread(73:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(73:7/RU) 21 Page(20:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(73:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(73:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(20:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(3:8/28)
[PageFaultHandler][do_handlePageFault] Frame(28) is dirty, do swap-out Thread(73:7/W0)
[PageFaultHandler][SwapOut] page Page(3:8/28) frame Frame(28)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 3
PageTableEntry][do_lock] iorb IORB(Id(961),Device(0),Page(3:8/28),Diskblock(67),FileWrite,Openfile(78:7/0),Thread(73:7/W1)) this Page(3:8/28)
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 54733 offset = 461 page no = 53 Thread(82:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(82:8/RU) 21 Page(53:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(82:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(82:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(53:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(63:6/6)
[PageFaultHandler][do_handlePageFault] Frame(6) is dirty, do swap-out Thread(82:8/W0)
[PageFaultHandler][SwapOut] page Page(63:6/6) frame Frame(6)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 63
PageTableEntry][do_lock] iorb IORB(Id(962),Device(0),Page(63:6/6),Diskblock(191),FileWrite,Openfile(88:8/0),Thread(82:8/W1)) this Page(63:6/6)
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(45:8/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(45:8/15) swap-in finish Thread(78:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 24815 offset = 239 page no = 24 Thread(77:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(77:7/RU) 22 Page(24:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(77:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(77:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(24:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(45:8/15)
[PageFaultHandler][do_handlePageFault] Frame(15) is dirty, do swap-out Thread(77:7/W0)
[PageFaultHandler][SwapOut] page Page(45:8/15) frame Frame(15)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 45
PageTableEntry][do_lock] iorb IORB(Id(963),Device(0),Page(45:8/15),Diskblock(109),FileWrite,Openfile(78:7/0),Thread(77:7/W1)) this Page(45:8/15)
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(7:9/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(7:9/23) swap-in finish Thread(84:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 21696 offset = 192 page no = 21 Thread(81:8/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(31:7/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(31:7/18) swap-in finish Thread(62:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 144005/250000[PageTableEntry][do_unlock] this Page(3:8/28)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(28) Page(3:8/28) Thread(73:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(20:7/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(20:7/28) do swap-in Thread(73:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(964),Device(0),Page(20:7/28),Diskblock(84),FileRead,Openfile(78:7/0),Thread(73:7/W1)) this Page(20:7/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(63:6/6)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(6) Page(63:6/6) Thread(82:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(53:8/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(53:8/6) do swap-in Thread(82:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(965),Device(0),Page(53:8/6),Diskblock(181),FileRead,Openfile(88:8/0),Thread(82:8/W1)) this Page(53:8/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(45:8/15)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(15) Page(45:8/15) Thread(77:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(24:7/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(24:7/15) do swap-in Thread(77:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(966),Device(0),Page(24:7/15),Diskblock(88),FileRead,Openfile(78:7/0),Thread(77:7/W1)) this Page(24:7/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 29793 offset = 97 page no = 29 Thread(86:10/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(86:10/RU) 21 Page(29:10/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(86:10/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(86:10/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(29:10/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(10/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(31:7/18)
[PageFaultHandler][do_handlePageFault] Frame(18) is dirty, do swap-out Thread(86:10/W0)
[PageFaultHandler][SwapOut] page Page(31:7/18) frame Frame(18)file Openfile(116:10/0)
[PageFaultHandler][SwapOut] block no 31
PageTableEntry][do_lock] iorb IORB(Id(967),Device(0),Page(31:7/18),Diskblock(287),FileWrite,Openfile(116:10/0),Thread(86:10/W1)) this Page(31:7/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(20:7/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(20:7/28) swap-in finish Thread(73:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 16890 offset = 506 page no = 16 Thread(79:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(79:8/RU) 21 Page(16:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(79:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(79:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(16:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(11:7/25)
[PageFaultHandler][do_handlePageFault] set Page(16:8/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(16:8/25) do swap-in Thread(79:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(968),Device(0),Page(16:8/25),Diskblock(144),FileRead,Openfile(88:8/0),Thread(79:8/W1)) this Page(16:8/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(53:8/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(53:8/6) swap-in finish Thread(82:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(24:7/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(24:7/15) swap-in finish Thread(77:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 41664 offset = 704 page no = 40 Thread(81:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(81:8/RU) 22 Page(40:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(81:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(81:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(40:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(53:8/6)
[PageFaultHandler][do_handlePageFault] set Page(40:8/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(40:8/6) do swap-in Thread(81:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(969),Device(0),Page(40:8/6),Diskblock(168),FileRead,Openfile(88:8/0),Thread(81:8/W1)) this Page(40:8/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 50380 offset = 204 page no = 49 Thread(87:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(87:8/RU) 22 Page(49:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(87:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(87:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(49:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(29:8/12)
[PageFaultHandler][do_handlePageFault] set Page(49:8/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(49:8/12) do swap-in Thread(87:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(970),Device(0),Page(49:8/12),Diskblock(177),FileRead,Openfile(88:8/0),Thread(87:8/W1)) this Page(49:8/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(31:7/18)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(18) Page(31:7/18) Thread(86:10/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(29:10/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(29:10/18) do swap-in Thread(86:10/W0)
PageTableEntry][do_lock] iorb IORB(Id(971),Device(0),Page(29:10/18),Diskblock(285),FileRead,Openfile(116:10/0),Thread(86:10/W1)) this Page(29:10/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:8/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(16:8/25) swap-in finish Thread(79:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 37714 offset = 850 page no = 36 Thread(70:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(70:8/RU) 21 Page(36:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(70:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(70:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(36:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(16:8/25)
[PageFaultHandler][do_handlePageFault] set Page(36:8/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(36:8/25) do swap-in Thread(70:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(972),Device(0),Page(36:8/25),Diskblock(164),FileRead,Openfile(88:8/0),Thread(70:8/W1)) this Page(36:8/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 145040/250000[PageTableEntry][do_unlock] this Page(40:8/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(40:8/6) swap-in finish Thread(81:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 25712 offset = 112 page no = 25 Thread(73:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(73:7/RU) 22 Page(25:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(73:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(73:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(25:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(22:8/8)
[PageFaultHandler][do_handlePageFault] set Page(25:7/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(25:7/8) do swap-in Thread(73:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(973),Device(0),Page(25:7/8),Diskblock(89),FileRead,Openfile(78:7/0),Thread(73:7/W1)) this Page(25:7/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(49:8/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(49:8/12) swap-in finish Thread(87:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 38392 offset = 504 page no = 37 Thread(84:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(84:9/RU) 22 Page(37:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(84:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(84:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(37:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(23:8/4)
[PageFaultHandler][do_handlePageFault] Frame(4) is dirty, do swap-out Thread(84:9/W0)
[PageFaultHandler][SwapOut] page Page(23:8/4) frame Frame(4)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 23
PageTableEntry][do_lock] iorb IORB(Id(974),Device(0),Page(23:8/4),Diskblock(215),FileWrite,Openfile(112:9/0),Thread(84:9/W1)) this Page(23:8/4)
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 54188 offset = 940 page no = 52 Thread(77:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(77:7/RU) 21 Page(52:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(77:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(77:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(52:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(21:8/9)
[PageFaultHandler][do_handlePageFault] set Page(52:7/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(52:7/9) do swap-in Thread(77:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(975),Device(0),Page(52:7/9),Diskblock(116),FileRead,Openfile(78:7/0),Thread(77:7/W1)) this Page(52:7/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(29:10/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(29:10/18) swap-in finish Thread(86:10/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(36:8/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(36:8/25) swap-in finish Thread(70:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(25:7/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(25:7/8) swap-in finish Thread(73:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 31960 offset = 216 page no = 31 Thread(72:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(72:8/RU) 22 Page(31:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(72:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(72:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(31:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(29:10/18)
[PageFaultHandler][do_handlePageFault] set Page(31:8/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(31:8/18) do swap-in Thread(72:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(976),Device(0),Page(31:8/18),Diskblock(159),FileRead,Openfile(88:8/0),Thread(72:8/W1)) this Page(31:8/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(23:8/4)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(4) Page(23:8/4) Thread(84:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(37:9/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(37:9/4) do swap-in Thread(84:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(977),Device(0),Page(37:9/4),Diskblock(229),FileRead,Openfile(112:9/0),Thread(84:9/W1)) this Page(37:9/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(52:7/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(52:7/9) swap-in finish Thread(77:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 58045 offset = 701 page no = 56 Thread(81:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(81:8/RU) 22 Page(56:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(81:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(81:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(56:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(25:7/8)
[PageFaultHandler][do_handlePageFault] Frame(8) is dirty, do swap-out Thread(81:8/W0)
[PageFaultHandler][SwapOut] page Page(25:7/8) frame Frame(8)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 25
PageTableEntry][do_lock] iorb IORB(Id(978),Device(0),Page(25:7/8),Diskblock(153),FileWrite,Openfile(88:8/0),Thread(81:8/W1)) this Page(25:7/8)
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 146020/250000[PageTableEntry][do_unlock] this Page(31:8/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(31:8/18) swap-in finish Thread(72:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 58409 offset = 41 page no = 57 Thread(82:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(82:8/RU) 21 Page(57:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(82:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(82:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(57:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(61:7/2)
[PageFaultHandler][do_handlePageFault] set Page(57:8/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(57:8/2) do swap-in Thread(82:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(979),Device(0),Page(57:8/2),Diskblock(185),FileRead,Openfile(88:8/0),Thread(82:8/W1)) this Page(57:8/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 19234 offset = 802 page no = 18 Thread(86:10/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(86:10/RU) 21 Page(18:10/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(86:10/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(86:10/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(18:10/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(10/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(43:8/1)
[PageFaultHandler][do_handlePageFault] Frame(1) is dirty, do swap-out Thread(86:10/W0)
[PageFaultHandler][SwapOut] page Page(43:8/1) frame Frame(1)file Openfile(116:10/0)
[PageFaultHandler][SwapOut] block no 43
PageTableEntry][do_lock] iorb IORB(Id(980),Device(0),Page(43:8/1),Diskblock(299),FileWrite,Openfile(116:10/0),Thread(86:10/W1)) this Page(43:8/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 58126 offset = 782 page no = 56 Thread(80:8/RU)
[PageTableEntry][do_unlock] this Page(37:9/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(37:9/4) swap-in finish Thread(84:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 51533 offset = 333 page no = 50 Thread(73:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(73:7/RU) 21 Page(50:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(73:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(73:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(50:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(25:8/0)
[PageFaultHandler][do_handlePageFault] set Page(50:7/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(50:7/0) do swap-in Thread(73:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(981),Device(0),Page(50:7/0),Diskblock(114),FileRead,Openfile(78:7/0),Thread(73:7/W1)) this Page(50:7/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(25:7/8)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(8) Page(25:7/8) Thread(81:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(56:8/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(56:8/8) do swap-in Thread(81:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(982),Device(0),Page(56:8/8),Diskblock(184),FileRead,Openfile(88:8/0),Thread(81:8/W1)) this Page(56:8/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(57:8/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(57:8/2) swap-in finish Thread(82:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 48875 offset = 747 page no = 47 Thread(72:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(72:8/RU) 21 Page(47:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(72:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(72:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(47:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(20:10/29)
[PageFaultHandler][do_handlePageFault] Frame(29) is dirty, do swap-out Thread(72:8/W0)
[PageFaultHandler][SwapOut] page Page(20:10/29) frame Frame(29)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 20
PageTableEntry][do_lock] iorb IORB(Id(983),Device(0),Page(20:10/29),Diskblock(148),FileWrite,Openfile(88:8/0),Thread(72:8/W1)) this Page(20:10/29)
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(43:8/1)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(1) Page(43:8/1) Thread(86:10/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(18:10/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(18:10/1) do swap-in Thread(86:10/W0)
PageTableEntry][do_lock] iorb IORB(Id(984),Device(0),Page(18:10/1),Diskblock(274),FileRead,Openfile(116:10/0),Thread(86:10/W1)) this Page(18:10/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 43849 offset = 841 page no = 42 Thread(84:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(84:9/RU) 21 Page(42:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(84:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(84:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(42:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(0:9/13)
[PageFaultHandler][do_handlePageFault] Frame(13) is dirty, do swap-out Thread(84:9/W0)
[PageFaultHandler][SwapOut] page Page(0:9/13) frame Frame(13)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 0
PageTableEntry][do_lock] iorb IORB(Id(985),Device(0),Page(0:9/13),Diskblock(192),FileWrite,Openfile(112:9/0),Thread(84:9/W1)) this Page(0:9/13)
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(50:7/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(50:7/0) swap-in finish Thread(73:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 147065/250000[PageTableEntry][do_unlock] this Page(56:8/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(56:8/8) swap-in finish Thread(81:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(986),Device(2),Page(15:8/17),Diskblock(13),FileRead,Openfile(106:7/2),Thread(79:8/W0)) this Page(15:8/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 44896 offset = 864 page no = 43 Thread(82:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(82:8/RU) 22 Page(43:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(82:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(82:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(43:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(56:8/8)
[PageFaultHandler][do_handlePageFault] Frame(8) is dirty, do swap-out Thread(82:8/W0)
[PageFaultHandler][SwapOut] page Page(56:8/8) frame Frame(8)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 56
PageTableEntry][do_lock] iorb IORB(Id(987),Device(0),Page(56:8/8),Diskblock(184),FileWrite,Openfile(88:8/0),Thread(82:8/W1)) this Page(56:8/8)
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(20:10/29)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(29) Page(20:10/29) Thread(72:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(47:8/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(47:8/29) do swap-in Thread(72:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(988),Device(0),Page(47:8/29),Diskblock(175),FileRead,Openfile(88:8/0),Thread(72:8/W1)) this Page(47:8/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 2601 offset = 553 page no = 2 Thread(76:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(76:6/RU) 22 Page(2:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(76:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(76:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(2:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(50:7/0)
[PageFaultHandler][do_handlePageFault] set Page(2:6/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(2:6/0) do swap-in Thread(76:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(989),Device(0),Page(2:6/0),Diskblock(2),FileRead,Openfile(60:6/0),Thread(76:6/W1)) this Page(2:6/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 27916 offset = 268 page no = 27 Thread(87:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(87:8/RU) 22 Page(27:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(87:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(87:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(27:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(30:7/5)
[PageFaultHandler][do_handlePageFault] set Page(27:8/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(27:8/5) do swap-in Thread(87:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(990),Device(0),Page(27:8/5),Diskblock(155),FileRead,Openfile(88:8/0),Thread(87:8/W1)) this Page(27:8/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(15:8/17)
[PageTableEntry][do_unlock] this Page(18:10/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(18:10/1) swap-in finish Thread(86:10/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 19049 offset = 617 page no = 18 Thread(62:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(62:7/RU) 21 Page(18:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(62:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(62:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(18:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(32:8/20)
[PageFaultHandler][do_handlePageFault] Frame(20) is dirty, do swap-out Thread(62:7/W0)
[PageFaultHandler][SwapOut] page Page(32:8/20) frame Frame(20)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 32
PageTableEntry][do_lock] iorb IORB(Id(991),Device(0),Page(32:8/20),Diskblock(96),FileWrite,Openfile(78:7/0),Thread(62:7/W1)) this Page(32:8/20)
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:9/13)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(13) Page(0:9/13) Thread(84:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(42:9/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(42:9/13) do swap-in Thread(84:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(992),Device(0),Page(42:9/13),Diskblock(234),FileRead,Openfile(112:9/0),Thread(84:9/W1)) this Page(42:9/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(56:8/8)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(8) Page(56:8/8) Thread(82:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(43:8/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(43:8/8) do swap-in Thread(82:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(993),Device(0),Page(43:8/8),Diskblock(171),FileRead,Openfile(88:8/0),Thread(82:8/W1)) this Page(43:8/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(47:8/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(47:8/29) swap-in finish Thread(72:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 39526 offset = 614 page no = 38 Thread(63:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(63:8/RU) 21 Page(38:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(63:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(63:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(38:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(58:6/24)
[PageFaultHandler][do_handlePageFault] set Page(38:8/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(38:8/24) do swap-in Thread(63:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(994),Device(0),Page(38:8/24),Diskblock(166),FileRead,Openfile(88:8/0),Thread(63:8/W1)) this Page(38:8/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(2:6/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(2:6/0) swap-in finish Thread(76:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 148078/250000[MMU][do_refer] address = 49203 offset = 51 page no = 48 Thread(73:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(73:7/RU) 22 Page(48:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(73:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(73:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(48:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(4:7/26)
[PageFaultHandler][do_handlePageFault] set Page(48:7/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(48:7/26) do swap-in Thread(73:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(995),Device(0),Page(48:7/26),Diskblock(112),FileRead,Openfile(78:7/0),Thread(73:7/W1)) this Page(48:7/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(27:8/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(27:8/5) swap-in finish Thread(87:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 16127 offset = 767 page no = 15 Thread(70:8/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(32:8/20)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(20) Page(32:8/20) Thread(62:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(18:7/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(18:7/20) do swap-in Thread(62:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(996),Device(0),Page(18:7/20),Diskblock(82),FileRead,Openfile(78:7/0),Thread(62:7/W1)) this Page(18:7/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(997),Device(2),Page(15:8/17),Diskblock(13),FileWrite,Openfile(106:7/2),Thread(80:8/W0)) this Page(15:8/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 53040 offset = 816 page no = 51 Thread(81:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(81:8/RU) 21 Page(51:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(81:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(81:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(51:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(27:8/5)
[PageFaultHandler][do_handlePageFault] Frame(5) is dirty, do swap-out Thread(81:8/W0)
[PageFaultHandler][SwapOut] page Page(27:8/5) frame Frame(5)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 27
PageTableEntry][do_lock] iorb IORB(Id(998),Device(0),Page(27:8/5),Diskblock(155),FileWrite,Openfile(88:8/0),Thread(81:8/W1)) this Page(27:8/5)
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 28736 offset = 64 page no = 28 Thread(72:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(72:8/RU) 22 Page(28:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(72:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(72:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(28:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(37:7/16)
[PageFaultHandler][do_handlePageFault] set Page(28:8/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(28:8/16) do swap-in Thread(72:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(999),Device(0),Page(28:8/16),Diskblock(156),FileRead,Openfile(88:8/0),Thread(72:8/W1)) this Page(28:8/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(42:9/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(42:9/13) swap-in finish Thread(84:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(15:8/17)
[PageTableEntry][do_unlock] this Page(43:8/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(43:8/8) swap-in finish Thread(82:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 8910 offset = 718 page no = 8 Thread(87:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(87:8/RU) 21 Page(8:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(87:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(87:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(8:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(43:6/22)
[PageFaultHandler][do_handlePageFault] set Page(8:8/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(8:8/22) do swap-in Thread(87:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(1000),Device(0),Page(8:8/22),Diskblock(136),FileRead,Openfile(88:8/0),Thread(87:8/W1)) this Page(8:8/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(38:8/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(38:8/24) swap-in finish Thread(63:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(48:7/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(48:7/26) swap-in finish Thread(73:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(18:7/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(18:7/20) swap-in finish Thread(62:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 149030/250000[PageTableEntry][do_unlock] this Page(27:8/5)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(5) Page(27:8/5) Thread(81:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(51:8/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(51:8/5) do swap-in Thread(81:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(1001),Device(0),Page(51:8/5),Diskblock(179),FileRead,Openfile(88:8/0),Thread(81:8/W1)) this Page(51:8/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(1002),Device(2),Page(2:6/0),Diskblock(8),FileRead,Openfile(114:8/2),Thread(76:6/W0)) this Page(2:6/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(28:8/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(28:8/16) swap-in finish Thread(72:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 28782 offset = 110 page no = 28 Thread(88:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(88:11/RU) 21 Page(28:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(88:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(88:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(28:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(38:8/24)
[PageFaultHandler][do_handlePageFault] set Page(28:11/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(28:11/24) do swap-in Thread(88:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1003),Device(0),Page(28:11/24),Diskblock(348),FileRead,Openfile(122:11/0),Thread(88:11/W1)) this Page(28:11/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(1004),Device(2),Page(15:8/17),Diskblock(13),FileWrite,Openfile(114:8/2),Thread(79:8/W0)) this Page(15:8/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(8:8/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(8:8/22) swap-in finish Thread(87:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(51:8/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(51:8/5) swap-in finish Thread(81:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 9637 offset = 421 page no = 9 Thread(70:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(70:8/RU) 22 Page(9:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(70:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(70:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(9:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(51:8/5)
[PageFaultHandler][do_handlePageFault] set Page(9:8/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(9:8/5) do swap-in Thread(70:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(1005),Device(0),Page(9:8/5),Diskblock(137),FileRead,Openfile(88:8/0),Thread(70:8/W1)) this Page(9:8/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 51712 offset = 512 page no = 50 Thread(62:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(62:7/RU) 21 Page(50:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(62:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(62:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(50:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(28:8/16)
[PageFaultHandler][do_handlePageFault] Frame(16) is dirty, do swap-out Thread(62:7/W0)
[PageFaultHandler][SwapOut] page Page(28:8/16) frame Frame(16)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 28
PageTableEntry][do_lock] iorb IORB(Id(1006),Device(0),Page(28:8/16),Diskblock(92),FileWrite,Openfile(78:7/0),Thread(62:7/W1)) this Page(28:8/16)
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 43512 offset = 504 page no = 42 Thread(66:7/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(66:7/RU) 21 Page(42:7/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(66:7/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(66:7/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(42:7/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(7/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(42:8/11)
[PageFaultHandler][do_handlePageFault] Frame(11) is dirty, do swap-out Thread(66:7/W0)
[PageFaultHandler][SwapOut] page Page(42:8/11) frame Frame(11)file Openfile(78:7/0)
[PageFaultHandler][SwapOut] block no 42
PageTableEntry][do_lock] iorb IORB(Id(1007),Device(0),Page(42:8/11),Diskblock(106),FileWrite,Openfile(78:7/0),Thread(66:7/W1)) this Page(42:8/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(2:6/0)
PageTableEntry][do_lock] iorb IORB(Id(1008),Device(2),Page(0:8/null),Diskblock(12),FileWrite,Openfile(106:7/2),Thread(89:8/W0)) this Page(0:8/null)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] validating_thread is null, handlePageFault
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(89:8/W0) 23 Page(0:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(89:8/W0) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(89:8/W1) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(0:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(52:8/19)
[PageFaultHandler][do_handlePageFault] set Page(0:8/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(0:8/19) do swap-in Thread(89:8/W1)
PageTableEntry][do_lock] iorb IORB(Id(1009),Device(0),Page(0:8/19),Diskblock(128),FileRead,Openfile(88:8/0),Thread(89:8/W2)) this Page(0:8/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(28:11/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(28:11/24) swap-in finish Thread(88:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(9:8/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(9:8/5) swap-in finish Thread(70:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 58090 offset = 746 page no = 56 Thread(83:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(83:8/RU) 21 Page(56:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(83:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(83:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(56:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(24:7/15)
[PageFaultHandler][do_handlePageFault] Frame(15) is dirty, do swap-out Thread(83:8/W0)
[PageFaultHandler][SwapOut] page Page(24:7/15) frame Frame(15)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 24
PageTableEntry][do_lock] iorb IORB(Id(1010),Device(0),Page(24:7/15),Diskblock(152),FileWrite,Openfile(88:8/0),Thread(83:8/W1)) this Page(24:7/15)
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(28:8/16)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(16) Page(28:8/16) Thread(62:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(50:7/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(50:7/16) do swap-in Thread(62:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(1011),Device(0),Page(50:7/16),Diskblock(114),FileRead,Openfile(78:7/0),Thread(62:7/W1)) this Page(50:7/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 18325 offset = 917 page no = 17 Thread(86:10/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(86:10/RU) 22 Page(17:10/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(86:10/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(86:10/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(17:10/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(10/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(49:8/12)
[PageFaultHandler][do_handlePageFault] Frame(12) is dirty, do swap-out Thread(86:10/W0)
[PageFaultHandler][SwapOut] page Page(49:8/12) frame Frame(12)file Openfile(116:10/0)
[PageFaultHandler][SwapOut] block no 49
PageTableEntry][do_lock] iorb IORB(Id(1012),Device(0),Page(49:8/12),Diskblock(305),FileWrite,Openfile(116:10/0),Thread(86:10/W1)) this Page(49:8/12)
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 150004/250000[PageTableEntry][do_unlock] this Page(42:8/11)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(11) Page(42:8/11) Thread(66:7/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(42:7/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(42:7/11) do swap-in Thread(66:7/W0)
PageTableEntry][do_lock] iorb IORB(Id(1013),Device(0),Page(42:7/11),Diskblock(106),FileRead,Openfile(78:7/0),Thread(66:7/W1)) this Page(42:7/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 25342 offset = 766 page no = 24 Thread(73:7/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(0:8/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(0:8/19) swap-in finish Thread(89:8/W1)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 26352 offset = 752 page no = 25 Thread(84:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(84:9/RU) 22 Page(25:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(84:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(84:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(25:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(40:8/6)
[PageFaultHandler][do_handlePageFault] Frame(6) is dirty, do swap-out Thread(84:9/W0)
[PageFaultHandler][SwapOut] page Page(40:8/6) frame Frame(6)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 40
PageTableEntry][do_lock] iorb IORB(Id(1014),Device(0),Page(40:8/6),Diskblock(232),FileWrite,Openfile(112:9/0),Thread(84:9/W1)) this Page(40:8/6)
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(24:7/15)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(15) Page(24:7/15) Thread(83:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(56:8/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(56:8/15) do swap-in Thread(83:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(1015),Device(0),Page(56:8/15),Diskblock(184),FileRead,Openfile(88:8/0),Thread(83:8/W1)) this Page(56:8/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(15:8/17)
[PageTableEntry][do_unlock] this Page(50:7/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(50:7/16) swap-in finish Thread(62:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 20939 offset = 459 page no = 20 Thread(82:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(82:8/RU) 22 Page(20:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(82:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(82:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(20:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(55:7/27)
[PageFaultHandler][do_handlePageFault] set Page(20:8/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(20:8/27) do swap-in Thread(82:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(1016),Device(0),Page(20:8/27),Diskblock(148),FileRead,Openfile(88:8/0),Thread(82:8/W1)) this Page(20:8/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 27305 offset = 681 page no = 26 Thread(70:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(70:8/RU) 22 Page(26:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(70:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(70:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(26:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(36:8/25)
[PageFaultHandler][do_handlePageFault] set Page(26:8/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(26:8/25) do swap-in Thread(70:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(1017),Device(0),Page(26:8/25),Diskblock(154),FileRead,Openfile(88:8/0),Thread(70:8/W1)) this Page(26:8/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:8/19)
[MMU][do_refer] address = 24437 offset = 885 page no = 23 Thread(87:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(87:8/RU) 21 Page(23:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(87:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(87:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(23:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(37:9/4)
[PageFaultHandler][do_handlePageFault] Frame(4) is dirty, do swap-out Thread(87:8/W0)
[PageFaultHandler][SwapOut] page Page(37:9/4) frame Frame(4)file Openfile(88:8/0)
[PageFaultHandler][SwapOut] block no 37
PageTableEntry][do_lock] iorb IORB(Id(1018),Device(0),Page(37:9/4),Diskblock(165),FileWrite,Openfile(88:8/0),Thread(87:8/W1)) this Page(37:9/4)
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(49:8/12)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(12) Page(49:8/12) Thread(86:10/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(17:10/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(17:10/12) do swap-in Thread(86:10/W0)
PageTableEntry][do_lock] iorb IORB(Id(1019),Device(0),Page(17:10/12),Diskblock(273),FileRead,Openfile(116:10/0),Thread(86:10/W1)) this Page(17:10/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 35705 offset = 889 page no = 34 Thread(90:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(90:9/RU) 21 Page(34:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(90:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(90:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(34:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(52:7/9)
[PageFaultHandler][do_handlePageFault] set Page(34:9/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(34:9/9) do swap-in Thread(90:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1020),Device(0),Page(34:9/9),Diskblock(226),FileRead,Openfile(112:9/0),Thread(90:9/W1)) this Page(34:9/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 751 offset = 751 page no = 0 Thread(76:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(76:6/RU) 22 Page(0:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(76:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(76:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(0:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(24:8/14)
[PageFaultHandler][do_handlePageFault] set Page(0:6/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(0:6/14) do swap-in Thread(76:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1021),Device(0),Page(0:6/14),Diskblock(0),FileRead,Openfile(60:6/0),Thread(76:6/W1)) this Page(0:6/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(42:7/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(42:7/11) swap-in finish Thread(66:7/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 151049/250000[PageTableEntry][do_unlock] this Page(40:8/6)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(6) Page(40:8/6) Thread(84:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(25:9/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(25:9/6) do swap-in Thread(84:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1022),Device(0),Page(25:9/6),Diskblock(217),FileRead,Openfile(112:9/0),Thread(84:9/W1)) this Page(25:9/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 58884 offset = 516 page no = 57 Thread(89:8/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(56:8/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(56:8/15) swap-in finish Thread(83:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(20:8/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(20:8/27) swap-in finish Thread(82:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(26:8/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(26:8/25) swap-in finish Thread(70:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(37:9/4)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(4) Page(37:9/4) Thread(87:8/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(23:8/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(23:8/4) do swap-in Thread(87:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(1023),Device(0),Page(23:8/4),Diskblock(151),FileRead,Openfile(88:8/0),Thread(87:8/W1)) this Page(23:8/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(17:10/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(17:10/12) swap-in finish Thread(86:10/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 36659 offset = 819 page no = 35 Thread(63:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(63:8/RU) 22 Page(35:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(63:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(63:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(35:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(42:7/11)
[PageFaultHandler][do_handlePageFault] set Page(35:8/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(35:8/11) do swap-in Thread(63:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(1024),Device(0),Page(35:8/11),Diskblock(163),FileRead,Openfile(88:8/0),Thread(63:8/W1)) this Page(35:8/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(34:9/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(34:9/9) swap-in finish Thread(90:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 152040/250000[PageTableEntry][do_unlock] this Page(0:6/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(0:6/14) swap-in finish Thread(76:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 43321 offset = 313 page no = 42 Thread(80:8/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(80:8/RU) 21 Page(42:8/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(80:8/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(80:8/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(42:8/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(8/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(56:8/15)
[PageFaultHandler][do_handlePageFault] set Page(42:8/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(42:8/15) do swap-in Thread(80:8/W0)
PageTableEntry][do_lock] iorb IORB(Id(1025),Device(0),Page(42:8/15),Diskblock(170),FileRead,Openfile(88:8/0),Thread(80:8/W1)) this Page(42:8/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 58181 offset = 837 page no = 56 Thread(88:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(88:11/RU) 22 Page(56:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(88:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(88:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(56:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(26:8/25)
[PageFaultHandler][do_handlePageFault] Frame(25) is dirty, do swap-out Thread(88:11/W0)
[PageFaultHandler][SwapOut] page Page(26:8/25) frame Frame(25)file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 26
PageTableEntry][do_lock] iorb IORB(Id(1026),Device(0),Page(26:8/25),Diskblock(346),FileWrite,Openfile(122:11/0),Thread(88:11/W1)) this Page(26:8/25)
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(25:9/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(25:9/6) swap-in finish Thread(84:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(1027),Device(2),Page(0:8/19),Diskblock(6),FileWrite,Openfile(114:8/2),Thread(89:8/W0)) this Page(0:8/19)
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 7216 offset = 48 page no = 7 Thread(90:9/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 34194 offset = 402 page no = 33 Thread(90:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(90:9/RU) 21 Page(33:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(90:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(90:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(33:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(40:6/10)
[PageFaultHandler][do_handlePageFault] set Page(33:9/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(33:9/10) do swap-in Thread(90:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1028),Device(0),Page(33:9/10),Diskblock(225),FileRead,Openfile(112:9/0),Thread(90:9/W1)) this Page(33:9/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(23:8/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(23:8/4) swap-in finish Thread(87:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(35:8/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(35:8/11) swap-in finish Thread(63:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 9374 offset = 158 page no = 9 Thread(70:8/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(42:8/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(42:8/15) swap-in finish Thread(80:8/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(1029),Device(2),Page(8:8/22),Diskblock(8),FileRead,Openfile(108:6/2),Thread(79:8/W0)) this Page(8:8/22)
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(8:8/22)
[PageTable][do_deallocateMemory] this Pagetable(Task(8/T))
[PageTable][do_deallocateMemory]  page_table_entry Page(0:8/19) frame_table_entry Frame(19)
[PageTable][do_deallocateMemory]  page_table_entry Page(8:8/22) frame_table_entry Frame(22)
[PageTable][do_deallocateMemory]  page_table_entry Page(9:8/5) frame_table_entry Frame(5)
[PageTable][do_deallocateMemory]  page_table_entry Page(15:8/17) frame_table_entry Frame(17)
[PageTable][do_deallocateMemory]  page_table_entry Page(20:8/27) frame_table_entry Frame(27)
[PageTable][do_deallocateMemory]  page_table_entry Page(23:8/4) frame_table_entry Frame(4)
[PageTable][do_deallocateMemory]  page_table_entry Page(26:8/25) frame_table_entry Frame(25)
[PageTable][do_deallocateMemory] owner_task Task(11/L)
[PageTable][do_deallocateMemory]  page_table_entry Page(31:8/18) frame_table_entry Frame(18)
[PageTable][do_deallocateMemory]  page_table_entry Page(35:8/11) frame_table_entry Frame(11)
[PageTable][do_deallocateMemory]  page_table_entry Page(42:8/15) frame_table_entry Frame(15)
[PageTable][do_deallocateMemory]  page_table_entry Page(43:8/8) frame_table_entry Frame(8)
[PageTable][do_deallocateMemory]  page_table_entry Page(47:8/29) frame_table_entry Frame(29)
[PageTable][do_deallocateMemory]  page_table_entry Page(57:8/2) frame_table_entry Frame(2)
[PageTable][do_deallocateMemory] this Pagetable(Task(7/T))
[PageTable][do_deallocateMemory]  page_table_entry Page(18:7/20) frame_table_entry Frame(20)
[PageTable][do_deallocateMemory]  page_table_entry Page(19:7/3) frame_table_entry Frame(3)
[PageTable][do_deallocateMemory]  page_table_entry Page(20:7/28) frame_table_entry Frame(28)
[PageTable][do_deallocateMemory]  page_table_entry Page(48:7/26) frame_table_entry Frame(26)
[PageTable][do_deallocateMemory]  page_table_entry Page(50:7/16) frame_table_entry Frame(16)
Simulation progress: 153020/250000PageTableEntry][do_lock] iorb IORB(Id(1030),Device(2),Page(7:9/23),Diskblock(11),FileRead,Openfile(108:6/2),Thread(84:9/W0)) this Page(7:9/23)
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(26:8/25)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(25) Page(26:8/25) Thread(88:11/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(56:11/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(56:11/25) do swap-in Thread(88:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1031),Device(0),Page(56:11/25),Diskblock(376),FileRead,Openfile(122:11/0),Thread(88:11/W1)) this Page(56:11/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:8/19)
[PageTableEntry][do_unlock] this Page(33:9/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(33:9/10) swap-in finish Thread(90:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 45933 offset = 877 page no = 44 Thread(92:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(92:6/RU) 21 Page(44:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(92:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(92:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(44:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] set Page(44:6/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(44:6/15) do swap-in Thread(92:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1032),Device(0),Page(44:6/15),Diskblock(44),FileRead,Openfile(60:6/0),Thread(92:6/W1)) this Page(44:6/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 22352 offset = 848 page no = 21 Thread(76:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(76:6/RU) 22 Page(21:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(76:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(76:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(21:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(33:9/10)
[PageFaultHandler][do_handlePageFault] set Page(21:6/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(21:6/10) do swap-in Thread(76:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1033),Device(0),Page(21:6/10),Diskblock(21),FileRead,Openfile(60:6/0),Thread(76:6/W1)) this Page(21:6/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(56:11/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(56:11/25) swap-in finish Thread(88:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 9514 offset = 298 page no = 9 Thread(94:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(94:9/RU) 22 Page(9:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(94:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(94:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(9:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(2:6/0)
[PageFaultHandler][do_handlePageFault] Frame(0) is dirty, do swap-out Thread(94:9/W0)
[PageFaultHandler][SwapOut] page Page(2:6/0) frame Frame(0)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 2
PageTableEntry][do_lock] iorb IORB(Id(1034),Device(0),Page(2:6/0),Diskblock(194),FileWrite,Openfile(112:9/0),Thread(94:9/W1)) this Page(2:6/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(44:6/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(44:6/15) swap-in finish Thread(92:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(7:9/23)
[PageTableEntry][do_unlock] this Page(21:6/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(21:6/10) swap-in finish Thread(76:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 46564 offset = 484 page no = 45 Thread(90:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(90:9/RU) 21 Page(45:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(90:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(90:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(45:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(21:6/10)
[PageFaultHandler][do_handlePageFault] Frame(10) is dirty, do swap-out Thread(90:9/W0)
[PageFaultHandler][SwapOut] page Page(21:6/10) frame Frame(10)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 21
PageTableEntry][do_lock] iorb IORB(Id(1035),Device(0),Page(21:6/10),Diskblock(213),FileWrite,Openfile(112:9/0),Thread(90:9/W1)) this Page(21:6/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 154003/250000[MMU][do_refer] address = 8749 offset = 557 page no = 8 Thread(92:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(92:6/RU) 22 Page(8:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(92:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(92:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(8:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] set Page(8:6/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(8:6/26) do swap-in Thread(92:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1036),Device(0),Page(8:6/26),Diskblock(8),FileRead,Openfile(60:6/0),Thread(92:6/W1)) this Page(8:6/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 20276 offset = 820 page no = 19 Thread(84:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(84:9/RU) 21 Page(19:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(84:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(84:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(19:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] set Page(19:9/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(19:9/17) do swap-in Thread(84:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1037),Device(0),Page(19:9/17),Diskblock(211),FileRead,Openfile(112:9/0),Thread(84:9/W1)) this Page(19:9/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(2:6/0)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(0) Page(2:6/0) Thread(94:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(9:9/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(9:9/0) do swap-in Thread(94:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1038),Device(0),Page(9:9/0),Diskblock(201),FileRead,Openfile(112:9/0),Thread(94:9/W1)) this Page(9:9/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(21:6/10)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(10) Page(21:6/10) Thread(90:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(45:9/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(45:9/10) do swap-in Thread(90:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1039),Device(0),Page(45:9/10),Diskblock(237),FileRead,Openfile(112:9/0),Thread(90:9/W1)) this Page(45:9/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 3642 offset = 570 page no = 3 Thread(96:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(96:11/RU) 21 Page(3:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(96:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(96:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(3:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] set Page(3:11/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(3:11/8) do swap-in Thread(96:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1040),Device(0),Page(3:11/8),Diskblock(323),FileRead,Openfile(122:11/0),Thread(96:11/W1)) this Page(3:11/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(1041),Device(2),Page(28:11/24),Diskblock(12),FileWrite,Openfile(108:6/2),Thread(88:11/W0)) this Page(28:11/24)
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(8:6/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(8:6/26) swap-in finish Thread(92:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 57657 offset = 313 page no = 56 Thread(91:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(91:6/RU) 21 Page(56:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(91:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(91:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(56:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] set Page(56:6/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(56:6/22) do swap-in Thread(91:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1042),Device(0),Page(56:6/22),Diskblock(56),FileRead,Openfile(60:6/0),Thread(91:6/W1)) this Page(56:6/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 30130 offset = 434 page no = 29 Thread(95:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(95:9/RU) 22 Page(29:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(95:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(95:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(29:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(30:6/21)
[PageFaultHandler][do_handlePageFault] set Page(29:9/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(29:9/21) do swap-in Thread(95:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1043),Device(0),Page(29:9/21),Diskblock(221),FileRead,Openfile(112:9/0),Thread(95:9/W1)) this Page(29:9/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 41864 offset = 904 page no = 40 Thread(97:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(97:6/RU) 22 Page(40:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(97:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(97:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(40:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(7:9/23)
[PageFaultHandler][do_handlePageFault] Frame(23) is dirty, do swap-out Thread(97:6/W0)
[PageFaultHandler][SwapOut] page Page(7:9/23) frame Frame(23)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 7
PageTableEntry][do_lock] iorb IORB(Id(1044),Device(0),Page(7:9/23),Diskblock(7),FileWrite,Openfile(60:6/0),Thread(97:6/W1)) this Page(7:9/23)
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(1045),Device(2),Page(0:6/14),Diskblock(8),FileRead,Openfile(108:6/2),Thread(93:6/W0)) this Page(0:6/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 34024 offset = 232 page no = 33 Thread(92:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(92:6/RU) 21 Page(33:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(92:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(92:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(33:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] set Page(33:6/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(33:6/28) do swap-in Thread(92:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1046),Device(0),Page(33:6/28),Diskblock(33),FileRead,Openfile(60:6/0),Thread(92:6/W1)) this Page(33:6/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(19:9/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(19:9/17) swap-in finish Thread(84:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(28:11/24)
[MMU][do_refer] address = 35275 offset = 459 page no = 34 Thread(84:9/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 42419 offset = 435 page no = 41 Thread(84:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(84:9/RU) 22 Page(41:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(84:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(84:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(41:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(19:9/17)
[PageFaultHandler][do_handlePageFault] set Page(41:9/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(41:9/17) do swap-in Thread(84:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1047),Device(0),Page(41:9/17),Diskblock(233),FileRead,Openfile(112:9/0),Thread(84:9/W1)) this Page(41:9/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(9:9/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(9:9/0) swap-in finish Thread(94:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 62307 offset = 867 page no = 60 Thread(88:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(88:11/RU) 21 Page(60:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(88:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(88:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(60:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] set Page(60:11/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(60:11/3) do swap-in Thread(88:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1048),Device(0),Page(60:11/3),Diskblock(380),FileRead,Openfile(122:11/0),Thread(88:11/W1)) this Page(60:11/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 155030/250000[PageTableEntry][do_unlock] this Page(45:9/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(45:9/10) swap-in finish Thread(90:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 34285 offset = 493 page no = 33 Thread(98:6/RU)
[PageTableEntry][do_unlock] this Page(3:11/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(3:11/8) swap-in finish Thread(96:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(0:6/14)
[MMU][do_refer] address = 1147 offset = 123 page no = 1 Thread(94:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(94:9/RU) 21 Page(1:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(94:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(94:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(1:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(28:11/24)
[PageFaultHandler][do_handlePageFault] set Page(1:9/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(1:9/24) do swap-in Thread(94:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1049),Device(0),Page(1:9/24),Diskblock(193),FileRead,Openfile(112:9/0),Thread(94:9/W1)) this Page(1:9/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 27368 offset = 744 page no = 26 Thread(99:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(99:6/RU) 21 Page(26:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(99:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(99:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(26:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] set Page(26:6/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(26:6/16) do swap-in Thread(99:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1050),Device(0),Page(26:6/16),Diskblock(26),FileRead,Openfile(60:6/0),Thread(99:6/W1)) this Page(26:6/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(56:6/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(56:6/22) swap-in finish Thread(91:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(1051),Device(1),Page(0:6/14),Diskblock(28),FileWrite,Openfile(126:6/1),Thread(93:6/W0)) this Page(0:6/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:6/14)
PageTableEntry][do_lock] iorb IORB(Id(1052),Device(1),Page(1:6/null),Diskblock(29),FileWrite,Openfile(126:6/1),Thread(91:6/W0)) this Page(1:6/null)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] validating_thread is null, handlePageFault
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(91:6/W0) 23 Page(1:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(91:6/W0) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(91:6/W1) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(1:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] set Page(1:6/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(1:6/5) do swap-in Thread(91:6/W1)
PageTableEntry][do_lock] iorb IORB(Id(1053),Device(0),Page(1:6/5),Diskblock(1),FileRead,Openfile(60:6/0),Thread(91:6/W2)) this Page(1:6/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(29:9/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(29:9/21) swap-in finish Thread(95:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 15415 offset = 55 page no = 15 Thread(76:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(76:6/RU) 22 Page(15:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(76:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(76:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(15:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(29:9/21)
[PageFaultHandler][do_handlePageFault] Frame(21) is dirty, do swap-out Thread(76:6/W0)
[PageFaultHandler][SwapOut] page Page(29:9/21) frame Frame(21)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 29
PageTableEntry][do_lock] iorb IORB(Id(1054),Device(0),Page(29:9/21),Diskblock(29),FileWrite,Openfile(60:6/0),Thread(76:6/W1)) this Page(29:9/21)
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 61274 offset = 858 page no = 59 Thread(93:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(93:6/RU) 22 Page(59:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(93:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(93:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(59:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(17:10/12)
[PageFaultHandler][do_handlePageFault] Frame(12) is dirty, do swap-out Thread(93:6/W0)
[PageFaultHandler][SwapOut] page Page(17:10/12) frame Frame(12)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 17
PageTableEntry][do_lock] iorb IORB(Id(1055),Device(0),Page(17:10/12),Diskblock(17),FileWrite,Openfile(60:6/0),Thread(93:6/W1)) this Page(17:10/12)
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 3068 offset = 1020 page no = 2 Thread(90:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(90:9/RU) 22 Page(2:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(90:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(90:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(2:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] set Page(2:9/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(2:9/19) do swap-in Thread(90:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1056),Device(0),Page(2:9/19),Diskblock(194),FileRead,Openfile(112:9/0),Thread(90:9/W1)) this Page(2:9/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(7:9/23)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(23) Page(7:9/23) Thread(97:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(40:6/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(40:6/23) do swap-in Thread(97:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1057),Device(0),Page(40:6/23),Diskblock(40),FileRead,Openfile(60:6/0),Thread(97:6/W1)) this Page(40:6/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(1058),Device(1),Page(3:11/8),Diskblock(29),FileWrite,Openfile(126:6/1),Thread(96:11/W0)) this Page(3:11/8)
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 27311 offset = 687 page no = 26 Thread(95:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(95:9/RU) 21 Page(26:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(95:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(95:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(26:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(25:9/6)
[PageFaultHandler][do_handlePageFault] Frame(6) is dirty, do swap-out Thread(95:9/W0)
[PageFaultHandler][SwapOut] page Page(25:9/6) frame Frame(6)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 25
PageTableEntry][do_lock] iorb IORB(Id(1059),Device(0),Page(25:9/6),Diskblock(217),FileWrite,Openfile(112:9/0),Thread(95:9/W1)) this Page(25:9/6)
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(33:6/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(33:6/28) swap-in finish Thread(92:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] Do memory read.
Simulation progress: 156002/250000[PageTableEntry][do_unlock] this Page(3:11/8)
[MMU][do_refer] address = 48690 offset = 562 page no = 47 Thread(92:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(92:6/RU) 21 Page(47:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(92:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(92:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(47:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] set Page(47:6/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(47:6/27) do swap-in Thread(92:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1060),Device(0),Page(47:6/27),Diskblock(47),FileRead,Openfile(60:6/0),Thread(92:6/W1)) this Page(47:6/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 51979 offset = 779 page no = 50 Thread(96:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(96:11/RU) 21 Page(50:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(96:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(96:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(50:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] set Page(50:11/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(50:11/4) do swap-in Thread(96:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1061),Device(0),Page(50:11/4),Diskblock(370),FileRead,Openfile(122:11/0),Thread(96:11/W1)) this Page(50:11/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(41:9/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(41:9/17) swap-in finish Thread(84:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 53365 offset = 117 page no = 52 Thread(98:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(98:6/RU) 22 Page(52:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(98:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(98:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(52:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(41:9/17)
[PageFaultHandler][do_handlePageFault] Frame(17) is dirty, do swap-out Thread(98:6/W0)
[PageFaultHandler][SwapOut] page Page(41:9/17) frame Frame(17)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 41
PageTableEntry][do_lock] iorb IORB(Id(1062),Device(0),Page(41:9/17),Diskblock(41),FileWrite,Openfile(60:6/0),Thread(98:6/W1)) this Page(41:9/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 35679 offset = 863 page no = 34 Thread(84:9/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(60:11/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(60:11/3) swap-in finish Thread(88:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(1:9/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(1:9/24) swap-in finish Thread(94:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(26:6/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(26:6/16) swap-in finish Thread(99:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 8268 offset = 76 page no = 8 Thread(99:6/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(1:6/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(1:6/5) swap-in finish Thread(91:6/W1)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(1063),Device(1),Page(0:9/null),Diskblock(14),FileWrite,Openfile(126:6/1),Thread(94:9/W0)) this Page(0:9/null)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] validating_thread is null, handlePageFault
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(94:9/W0) 23 Page(0:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(94:9/W0) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(94:9/W1) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(0:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(1:9/24)
[PageFaultHandler][do_handlePageFault] set Page(0:9/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(0:9/24) do swap-in Thread(94:9/W1)
PageTableEntry][do_lock] iorb IORB(Id(1064),Device(0),Page(0:9/24),Diskblock(192),FileRead,Openfile(112:9/0),Thread(94:9/W2)) this Page(0:9/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(29:9/21)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(21) Page(29:9/21) Thread(76:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(15:6/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(15:6/21) do swap-in Thread(76:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1065),Device(0),Page(15:6/21),Diskblock(15),FileRead,Openfile(60:6/0),Thread(76:6/W1)) this Page(15:6/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(17:10/12)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(12) Page(17:10/12) Thread(93:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(59:6/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(59:6/12) do swap-in Thread(93:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1066),Device(0),Page(59:6/12),Diskblock(59),FileRead,Openfile(60:6/0),Thread(93:6/W1)) this Page(59:6/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:6/5)
[MMU][do_refer] address = 46800 offset = 720 page no = 45 Thread(91:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(91:6/RU) 21 Page(45:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(91:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(91:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(45:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(1:6/5)
[PageFaultHandler][do_handlePageFault] set Page(45:6/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(45:6/5) do swap-in Thread(91:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1067),Device(0),Page(45:6/5),Diskblock(45),FileRead,Openfile(60:6/0),Thread(91:6/W1)) this Page(45:6/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 44201 offset = 169 page no = 43 Thread(99:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(99:6/RU) 22 Page(43:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(99:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(99:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(43:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(34:9/9)
[PageFaultHandler][do_handlePageFault] Frame(9) is dirty, do swap-out Thread(99:6/W0)
[PageFaultHandler][SwapOut] page Page(34:9/9) frame Frame(9)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 34
PageTableEntry][do_lock] iorb IORB(Id(1068),Device(0),Page(34:9/9),Diskblock(34),FileWrite,Openfile(60:6/0),Thread(99:6/W1)) this Page(34:9/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 157047/250000[PageTableEntry][do_unlock] this Page(2:9/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(2:9/19) swap-in finish Thread(90:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 2867 offset = 819 page no = 2 Thread(90:9/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(40:6/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(40:6/23) swap-in finish Thread(97:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(1069),Device(1),Page(0:6/14),Diskblock(28),FileRead,Openfile(126:6/1),Thread(97:6/W0)) this Page(0:6/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 38110 offset = 222 page no = 37 Thread(90:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(90:9/RU) 21 Page(37:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(90:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(90:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(37:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(40:6/23)
[PageFaultHandler][do_handlePageFault] Frame(23) is dirty, do swap-out Thread(90:9/W0)
[PageFaultHandler][SwapOut] page Page(40:6/23) frame Frame(23)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 40
PageTableEntry][do_lock] iorb IORB(Id(1070),Device(0),Page(40:6/23),Diskblock(232),FileWrite,Openfile(112:9/0),Thread(90:9/W1)) this Page(40:6/23)
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:6/14)
[MMU][do_refer] address = 65309 offset = 797 page no = 63 Thread(97:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(97:6/RU) 22 Page(63:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(97:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(97:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(63:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(42:9/13)
[PageFaultHandler][do_handlePageFault] set Page(63:6/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(63:6/13) do swap-in Thread(97:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1071),Device(0),Page(63:6/13),Diskblock(63),FileRead,Openfile(60:6/0),Thread(97:6/W1)) this Page(63:6/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(25:9/6)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(6) Page(25:9/6) Thread(95:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(26:9/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(26:9/6) do swap-in Thread(95:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1072),Device(0),Page(26:9/6),Diskblock(218),FileRead,Openfile(112:9/0),Thread(95:9/W1)) this Page(26:9/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(47:6/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(47:6/27) swap-in finish Thread(92:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 4707 offset = 611 page no = 4 Thread(92:6/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 36092 offset = 252 page no = 35 Thread(92:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(92:6/RU) 21 Page(35:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(92:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(92:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(35:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(47:6/27)
[PageFaultHandler][do_handlePageFault] set Page(35:6/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(35:6/27) do swap-in Thread(92:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1073),Device(0),Page(35:6/27),Diskblock(35),FileRead,Openfile(60:6/0),Thread(92:6/W1)) this Page(35:6/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 158060/250000[PageTableEntry][do_unlock] this Page(50:11/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(50:11/4) swap-in finish Thread(96:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(41:9/17)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(17) Page(41:9/17) Thread(98:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(52:6/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(52:6/17) do swap-in Thread(98:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1074),Device(0),Page(52:6/17),Diskblock(52),FileRead,Openfile(60:6/0),Thread(98:6/W1)) this Page(52:6/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 46981 offset = 901 page no = 45 Thread(96:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(96:11/RU) 22 Page(45:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(96:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(96:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(45:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] set Page(45:11/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(45:11/18) do swap-in Thread(96:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1075),Device(0),Page(45:11/18),Diskblock(365),FileRead,Openfile(122:11/0),Thread(96:11/W1)) this Page(45:11/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:9/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(0:9/24) swap-in finish Thread(94:9/W1)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:9/24)
[PageTableEntry][do_unlock] this Page(15:6/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(15:6/21) swap-in finish Thread(76:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 38749 offset = 861 page no = 37 Thread(76:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(76:6/RU) 22 Page(37:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(76:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(76:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(37:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] set Page(37:6/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(37:6/11) do swap-in Thread(76:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1076),Device(0),Page(37:6/11),Diskblock(37),FileRead,Openfile(60:6/0),Thread(76:6/W1)) this Page(37:6/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 18505 offset = 73 page no = 18 Thread(94:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(94:9/RU) 21 Page(18:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(94:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(94:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(18:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] set Page(18:9/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(18:9/20) do swap-in Thread(94:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1077),Device(0),Page(18:9/20),Diskblock(210),FileRead,Openfile(112:9/0),Thread(94:9/W1)) this Page(18:9/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(59:6/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(59:6/12) swap-in finish Thread(93:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(45:6/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(45:6/5) swap-in finish Thread(91:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(1078),Device(1),Page(0:6/14),Diskblock(28),FileRead,Openfile(126:6/1),Thread(91:6/W0)) this Page(0:6/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 22176 offset = 672 page no = 21 Thread(93:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(93:6/RU) 21 Page(21:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(93:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(93:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(21:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(45:6/5)
[PageFaultHandler][do_handlePageFault] set Page(21:6/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(21:6/5) do swap-in Thread(93:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1079),Device(0),Page(21:6/5),Diskblock(21),FileRead,Openfile(60:6/0),Thread(93:6/W1)) this Page(21:6/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(34:9/9)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(9) Page(34:9/9) Thread(99:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(43:6/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(43:6/9) do swap-in Thread(99:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1080),Device(0),Page(43:6/9),Diskblock(43),FileRead,Openfile(60:6/0),Thread(99:6/W1)) this Page(43:6/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 159027/250000[PageTableEntry][do_unlock] this Page(0:6/14)
[PageTableEntry][do_unlock] this Page(40:6/23)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(23) Page(40:6/23) Thread(90:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(37:9/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(37:9/23) do swap-in Thread(90:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1081),Device(0),Page(37:9/23),Diskblock(229),FileRead,Openfile(112:9/0),Thread(90:9/W1)) this Page(37:9/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(63:6/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(63:6/13) swap-in finish Thread(97:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 19303 offset = 871 page no = 18 Thread(91:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(91:6/RU) 21 Page(18:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(91:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(91:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(18:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(44:6/15)
[PageFaultHandler][do_handlePageFault] set Page(18:6/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(18:6/15) do swap-in Thread(91:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1082),Device(0),Page(18:6/15),Diskblock(18),FileRead,Openfile(60:6/0),Thread(91:6/W1)) this Page(18:6/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(1083),Device(1),Page(0:6/14),Diskblock(29),FileWrite,Openfile(126:6/1),Thread(97:6/W0)) this Page(0:6/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(26:9/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(26:9/6) swap-in finish Thread(95:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(0:6/14)
[MMU][do_refer] address = 15725 offset = 365 page no = 15 Thread(86:10/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(86:10/RU) 21 Page(15:10/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(86:10/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(86:10/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(15:10/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(10/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(9:9/0)
[PageFaultHandler][do_handlePageFault] Frame(0) is dirty, do swap-out Thread(86:10/W0)
[PageFaultHandler][SwapOut] page Page(9:9/0) frame Frame(0)file Openfile(116:10/0)
[PageFaultHandler][SwapOut] block no 9
PageTableEntry][do_lock] iorb IORB(Id(1084),Device(0),Page(9:9/0),Diskblock(265),FileWrite,Openfile(116:10/0),Thread(86:10/W1)) this Page(9:9/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(35:6/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(35:6/27) swap-in finish Thread(92:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(52:6/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(52:6/17) swap-in finish Thread(98:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 29906 offset = 210 page no = 29 Thread(97:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(97:6/RU) 22 Page(29:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(97:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(97:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(29:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(35:6/27)
[PageFaultHandler][do_handlePageFault] set Page(29:6/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(29:6/27) do swap-in Thread(97:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1085),Device(0),Page(29:6/27),Diskblock(29),FileRead,Openfile(60:6/0),Thread(97:6/W1)) this Page(29:6/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageCleanDaemon][unleash] osp.Memory.PageCleanDaemon@1bf99cf5 execute time 160000
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(19)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(21)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(12)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(14)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(25)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(13)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(19)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(19) Page(2:9/19) isDirty true
[PageFaultHandler][SwapOut] file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 2
PageTableEntry][do_lock] iorb IORB(Id(1086),Device(0),Page(2:9/19),Diskblock(194),FileWrite,Openfile(112:9/0),Thread(100:0/W1)) this Page(2:9/19)
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 160020/250000[MMU][do_refer] address = 57215 offset = 895 page no = 55 Thread(92:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(92:6/RU) 22 Page(55:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(92:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(92:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(55:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(3:11/8)
[PageFaultHandler][do_handlePageFault] set Page(55:6/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(55:6/8) do swap-in Thread(92:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1087),Device(0),Page(55:6/8),Diskblock(55),FileRead,Openfile(60:6/0),Thread(92:6/W1)) this Page(55:6/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(45:11/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(45:11/18) swap-in finish Thread(96:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(37:6/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(37:6/11) swap-in finish Thread(76:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 18737 offset = 305 page no = 18 Thread(95:9/RU)
[MMU][do_refer] address = 48162 offset = 34 page no = 47 Thread(76:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(76:6/RU) 22 Page(47:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(76:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(76:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(47:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(45:11/18)
[PageFaultHandler][do_handlePageFault] Frame(18) is dirty, do swap-out Thread(76:6/W0)
[PageFaultHandler][SwapOut] page Page(45:11/18) frame Frame(18)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 45
PageTableEntry][do_lock] iorb IORB(Id(1088),Device(0),Page(45:11/18),Diskblock(45),FileWrite,Openfile(60:6/0),Thread(76:6/W1)) this Page(45:11/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(18:9/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(18:9/20) swap-in finish Thread(94:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 33118 offset = 350 page no = 32 Thread(98:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(98:6/RU) 21 Page(32:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(98:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(98:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(32:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(45:9/10)
[PageFaultHandler][do_handlePageFault] set Page(32:6/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(32:6/10) do swap-in Thread(98:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1089),Device(0),Page(32:6/10),Diskblock(32),FileRead,Openfile(60:6/0),Thread(98:6/W1)) this Page(32:6/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 3680 offset = 608 page no = 3 Thread(95:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(95:9/RU) 21 Page(3:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(95:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(95:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(3:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(60:11/3)
[PageFaultHandler][do_handlePageFault] set Page(3:9/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(3:9/3) do swap-in Thread(95:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1090),Device(0),Page(3:9/3),Diskblock(195),FileRead,Openfile(112:9/0),Thread(95:9/W1)) this Page(3:9/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(21:6/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(21:6/5) swap-in finish Thread(93:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(43:6/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(43:6/9) swap-in finish Thread(99:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 161092/250000[MMU][do_refer] address = 10609 offset = 369 page no = 10 Thread(93:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(93:6/RU) 22 Page(10:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(93:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(93:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(10:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(21:6/5)
[PageFaultHandler][do_handlePageFault] set Page(10:6/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(10:6/5) do swap-in Thread(93:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1091),Device(0),Page(10:6/5),Diskblock(10),FileRead,Openfile(60:6/0),Thread(93:6/W1)) this Page(10:6/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(37:9/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(37:9/23) swap-in finish Thread(90:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 5073 offset = 977 page no = 4 Thread(96:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(96:11/RU) 22 Page(4:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(96:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(96:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(4:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(26:6/16)
[PageFaultHandler][do_handlePageFault] set Page(4:11/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(4:11/16) do swap-in Thread(96:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1092),Device(0),Page(4:11/16),Diskblock(324),FileRead,Openfile(122:11/0),Thread(96:11/W1)) this Page(4:11/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(18:6/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(18:6/15) swap-in finish Thread(91:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 26904 offset = 280 page no = 26 Thread(90:9/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 22342 offset = 838 page no = 21 Thread(91:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(91:6/RU) 21 Page(21:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(91:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(91:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(21:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(18:6/15)
[PageFaultHandler][do_handlePageFault] set Page(21:6/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(21:6/15) do swap-in Thread(91:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1093),Device(0),Page(21:6/15),Diskblock(21),FileRead,Openfile(60:6/0),Thread(91:6/W1)) this Page(21:6/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(9:9/0)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(0) Page(9:9/0) Thread(86:10/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(15:10/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(15:10/0) do swap-in Thread(86:10/W0)
PageTableEntry][do_lock] iorb IORB(Id(1094),Device(0),Page(15:10/0),Diskblock(271),FileRead,Openfile(116:10/0),Thread(86:10/W1)) this Page(15:10/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 17743 offset = 335 page no = 17 Thread(90:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(90:9/RU) 21 Page(17:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(90:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(90:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(17:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(26:9/6)
[PageFaultHandler][do_handlePageFault] Frame(6) is dirty, do swap-out Thread(90:9/W0)
[PageFaultHandler][SwapOut] page Page(26:9/6) frame Frame(6)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 26
PageTableEntry][do_lock] iorb IORB(Id(1095),Device(0),Page(26:9/6),Diskblock(218),FileWrite,Openfile(112:9/0),Thread(90:9/W1)) this Page(26:9/6)
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(29:6/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(29:6/27) swap-in finish Thread(97:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 162024/250000[MMU][do_refer] address = 60252 offset = 860 page no = 58 Thread(94:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(94:9/RU) 21 Page(58:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(94:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(94:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(58:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(50:11/4)
[PageFaultHandler][do_handlePageFault] set Page(58:9/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(58:9/4) do swap-in Thread(94:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1096),Device(0),Page(58:9/4),Diskblock(250),FileRead,Openfile(112:9/0),Thread(94:9/W1)) this Page(58:9/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(2:9/19)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(19) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(21)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(21) Page(15:6/21) isDirty true
[PageFaultHandler][SwapOut] file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 15
PageTableEntry][do_lock] iorb IORB(Id(1097),Device(0),Page(15:6/21),Diskblock(15),FileWrite,Openfile(60:6/0),Thread(100:0/W1)) this Page(15:6/21)
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 32006 offset = 262 page no = 31 Thread(97:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(97:6/RU) 21 Page(31:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(97:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(97:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(31:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] set Page(31:6/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(31:6/29) do swap-in Thread(97:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1098),Device(0),Page(31:6/29),Diskblock(31),FileRead,Openfile(60:6/0),Thread(97:6/W1)) this Page(31:6/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(55:6/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(55:6/8) swap-in finish Thread(92:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(45:11/18)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(18) Page(45:11/18) Thread(76:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(47:6/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(47:6/18) do swap-in Thread(76:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1099),Device(0),Page(47:6/18),Diskblock(47),FileRead,Openfile(60:6/0),Thread(76:6/W1)) this Page(47:6/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(1100),Device(2),Page(8:6/26),Diskblock(1),FileRead,Openfile(128:6/2),Thread(99:6/W0)) this Page(8:6/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(32:6/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(32:6/10) swap-in finish Thread(98:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 48928 offset = 800 page no = 47 Thread(98:6/RU)
[MMU][do_refer] address = 9776 offset = 560 page no = 9 Thread(92:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(92:6/RU) 21 Page(9:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(92:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(92:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(9:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(32:6/10)
[PageFaultHandler][do_handlePageFault] set Page(9:6/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(9:6/10) do swap-in Thread(92:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1101),Device(0),Page(9:6/10),Diskblock(9),FileRead,Openfile(60:6/0),Thread(92:6/W1)) this Page(9:6/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(3:9/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(3:9/3) swap-in finish Thread(95:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 18496 offset = 64 page no = 18 Thread(95:9/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(10:6/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(10:6/5) swap-in finish Thread(93:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 163071/250000[MMU][do_refer] address = 1126 offset = 102 page no = 1 Thread(101:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(101:6/RU) 22 Page(1:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(101:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(101:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(1:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(43:6/9)
[PageFaultHandler][do_handlePageFault] Frame(9) is dirty, do swap-out Thread(101:6/W0)
[PageFaultHandler][SwapOut] page Page(43:6/9) frame Frame(9)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 43
PageTableEntry][do_lock] iorb IORB(Id(1102),Device(0),Page(43:6/9),Diskblock(43),FileWrite,Openfile(60:6/0),Thread(101:6/W1)) this Page(43:6/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(4:11/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(4:11/16) swap-in finish Thread(96:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(8:6/26)
[MMU][do_refer] address = 50207 offset = 31 page no = 49 Thread(84:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(84:9/RU) 21 Page(49:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(84:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(84:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(49:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(4:11/16)
[PageFaultHandler][do_handlePageFault] Frame(16) is dirty, do swap-out Thread(84:9/W0)
[PageFaultHandler][SwapOut] page Page(4:11/16) frame Frame(16)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 4
PageTableEntry][do_lock] iorb IORB(Id(1103),Device(0),Page(4:11/16),Diskblock(196),FileWrite,Openfile(112:9/0),Thread(84:9/W1)) this Page(4:11/16)
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(21:6/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(21:6/15) swap-in finish Thread(91:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 40244 offset = 308 page no = 39 Thread(96:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(96:11/RU) 21 Page(39:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(96:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(96:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(39:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(18:10/1)
[PageFaultHandler][do_handlePageFault] set Page(39:11/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(39:11/1) do swap-in Thread(96:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1104),Device(0),Page(39:11/1),Diskblock(359),FileRead,Openfile(122:11/0),Thread(96:11/W1)) this Page(39:11/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(15:10/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(15:10/0) swap-in finish Thread(86:10/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 15738 offset = 378 page no = 15 Thread(93:6/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 57705 offset = 361 page no = 56 Thread(99:6/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(26:9/6)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(6) Page(26:9/6) Thread(90:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(17:9/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(17:9/6) do swap-in Thread(90:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1105),Device(0),Page(17:9/6),Diskblock(209),FileRead,Openfile(112:9/0),Thread(90:9/W1)) this Page(17:9/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 164075/250000[PageTableEntry][do_unlock] this Page(58:9/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(58:9/4) swap-in finish Thread(94:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 27474 offset = 850 page no = 26 Thread(86:10/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(86:10/RU) 22 Page(26:10/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(86:10/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(86:10/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(26:10/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(10/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(15:10/0)
[PageFaultHandler][do_handlePageFault] set Page(26:10/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(26:10/0) do swap-in Thread(86:10/W0)
PageTableEntry][do_lock] iorb IORB(Id(1106),Device(0),Page(26:10/0),Diskblock(282),FileRead,Openfile(116:10/0),Thread(86:10/W1)) this Page(26:10/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 24702 offset = 126 page no = 24 Thread(91:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(91:6/RU) 22 Page(24:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(91:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(91:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(24:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(0:9/24)
[PageFaultHandler][do_handlePageFault] set Page(24:6/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(24:6/24) do swap-in Thread(91:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1107),Device(0),Page(24:6/24),Diskblock(24),FileRead,Openfile(60:6/0),Thread(91:6/W1)) this Page(24:6/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(15:6/21)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(21) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(12)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(12) Page(59:6/12) isDirty true
[PageFaultHandler][SwapOut] file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 59
PageTableEntry][do_lock] iorb IORB(Id(1108),Device(0),Page(59:6/12),Diskblock(59),FileWrite,Openfile(60:6/0),Thread(100:0/W1)) this Page(59:6/12)
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 54603 offset = 331 page no = 53 Thread(88:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(88:11/RU) 22 Page(53:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(88:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(88:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(53:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(15:6/21)
[PageFaultHandler][do_handlePageFault] set Page(53:11/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(53:11/21) do swap-in Thread(88:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1109),Device(0),Page(53:11/21),Diskblock(373),FileRead,Openfile(122:11/0),Thread(88:11/W1)) this Page(53:11/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(31:6/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(31:6/29) swap-in finish Thread(97:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(47:6/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(47:6/18) swap-in finish Thread(76:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(9:6/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(9:6/10) swap-in finish Thread(92:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(43:6/9)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(9) Page(43:6/9) Thread(101:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(1:6/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(1:6/9) do swap-in Thread(101:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1110),Device(0),Page(1:6/9),Diskblock(1),FileRead,Openfile(60:6/0),Thread(101:6/W1)) this Page(1:6/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 52479 offset = 255 page no = 51 Thread(98:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(98:6/RU) 22 Page(51:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(98:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(98:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(51:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(37:6/11)
[PageFaultHandler][do_handlePageFault] Frame(11) is dirty, do swap-out Thread(98:6/W0)
[PageFaultHandler][SwapOut] page Page(37:6/11) frame Frame(11)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 37
PageTableEntry][do_lock] iorb IORB(Id(1111),Device(0),Page(37:6/11),Diskblock(37),FileWrite,Openfile(60:6/0),Thread(98:6/W1)) this Page(37:6/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(4:11/16)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(16) Page(4:11/16) Thread(84:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(49:9/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(49:9/16) do swap-in Thread(84:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1112),Device(0),Page(49:9/16),Diskblock(241),FileRead,Openfile(112:9/0),Thread(84:9/W1)) this Page(49:9/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 29332 offset = 660 page no = 28 Thread(92:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(92:6/RU) 22 Page(28:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(92:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(92:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(28:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(8:6/26)
[PageFaultHandler][do_handlePageFault] Frame(26) is dirty, do swap-out Thread(92:6/W0)
[PageFaultHandler][SwapOut] page Page(8:6/26) frame Frame(26)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 8
PageTableEntry][do_lock] iorb IORB(Id(1113),Device(0),Page(8:6/26),Diskblock(8),FileWrite,Openfile(60:6/0),Thread(92:6/W1)) this Page(8:6/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 9688 offset = 472 page no = 9 Thread(99:6/RU)
[MMU][do_refer] Do memory write.
Simulation progress: 165001/250000[MMU][do_refer] address = 44338 offset = 306 page no = 43 Thread(99:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(99:6/RU) 21 Page(43:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(99:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(99:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(43:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(18:9/20)
[PageFaultHandler][do_handlePageFault] Frame(20) is dirty, do swap-out Thread(99:6/W0)
[PageFaultHandler][SwapOut] page Page(18:9/20) frame Frame(20)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 18
PageTableEntry][do_lock] iorb IORB(Id(1114),Device(0),Page(18:9/20),Diskblock(18),FileWrite,Openfile(60:6/0),Thread(99:6/W1)) this Page(18:9/20)
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 47904 offset = 800 page no = 46 Thread(97:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(97:6/RU) 22 Page(46:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(97:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(97:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(46:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(52:6/17)
[PageFaultHandler][do_handlePageFault] Frame(17) is dirty, do swap-out Thread(97:6/W0)
[PageFaultHandler][SwapOut] page Page(52:6/17) frame Frame(17)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 52
PageTableEntry][do_lock] iorb IORB(Id(1115),Device(0),Page(52:6/17),Diskblock(52),FileWrite,Openfile(60:6/0),Thread(97:6/W1)) this Page(52:6/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(39:11/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(39:11/1) swap-in finish Thread(96:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 33079 offset = 311 page no = 32 Thread(95:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(95:9/RU) 21 Page(32:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(95:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(95:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(32:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(39:11/1)
[PageFaultHandler][do_handlePageFault] set Page(32:9/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(32:9/1) do swap-in Thread(95:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1116),Device(0),Page(32:9/1),Diskblock(224),FileRead,Openfile(112:9/0),Thread(95:9/W1)) this Page(32:9/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 41467 offset = 507 page no = 40 Thread(96:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(96:11/RU) 21 Page(40:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(96:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(96:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(40:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(56:6/22)
[PageFaultHandler][do_handlePageFault] set Page(40:11/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(40:11/22) do swap-in Thread(96:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1117),Device(0),Page(40:11/22),Diskblock(360),FileRead,Openfile(122:11/0),Thread(96:11/W1)) this Page(40:11/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(17:9/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(17:9/6) swap-in finish Thread(90:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 32753 offset = 1009 page no = 31 Thread(90:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(90:9/RU) 22 Page(31:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(90:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(90:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(31:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(55:6/8)
[PageFaultHandler][do_handlePageFault] Frame(8) is dirty, do swap-out Thread(90:9/W0)
[PageFaultHandler][SwapOut] page Page(55:6/8) frame Frame(8)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 55
PageTableEntry][do_lock] iorb IORB(Id(1118),Device(0),Page(55:6/8),Diskblock(247),FileWrite,Openfile(112:9/0),Thread(90:9/W1)) this Page(55:6/8)
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 50251 offset = 75 page no = 49 Thread(76:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(76:6/RU) 21 Page(49:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(76:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(76:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(49:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(33:6/28)
[PageFaultHandler][do_handlePageFault] set Page(49:6/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(49:6/28) do swap-in Thread(76:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1119),Device(0),Page(49:6/28),Diskblock(49),FileRead,Openfile(60:6/0),Thread(76:6/W1)) this Page(49:6/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(26:10/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(26:10/0) swap-in finish Thread(86:10/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 29280 offset = 608 page no = 28 Thread(86:10/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(86:10/RU) 22 Page(28:10/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(86:10/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(86:10/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(28:10/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(10/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(29:6/27)
[PageFaultHandler][do_handlePageFault] Frame(27) is dirty, do swap-out Thread(86:10/W0)
[PageFaultHandler][SwapOut] page Page(29:6/27) frame Frame(27)file Openfile(116:10/0)
[PageFaultHandler][SwapOut] block no 29
PageTableEntry][do_lock] iorb IORB(Id(1120),Device(0),Page(29:6/27),Diskblock(285),FileWrite,Openfile(116:10/0),Thread(86:10/W1)) this Page(29:6/27)
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(24:6/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(24:6/24) swap-in finish Thread(91:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(59:6/12)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(12) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(14)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(14) Page(0:6/14) isDirty true
[PageFaultHandler][SwapOut] file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 0
PageTableEntry][do_lock] iorb IORB(Id(1121),Device(0),Page(0:6/14),Diskblock(0),FileWrite,Openfile(60:6/0),Thread(100:0/W1)) this Page(0:6/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 16489 offset = 105 page no = 16 Thread(91:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(91:6/RU) 22 Page(16:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(91:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(91:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(16:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(24:6/24)
[PageFaultHandler][do_handlePageFault] Frame(24) is dirty, do swap-out Thread(91:6/W0)
[PageFaultHandler][SwapOut] page Page(24:6/24) frame Frame(24)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 24
PageTableEntry][do_lock] iorb IORB(Id(1122),Device(0),Page(24:6/24),Diskblock(24),FileWrite,Openfile(60:6/0),Thread(91:6/W1)) this Page(24:6/24)
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 166025/250000[MMU][do_refer] address = 54227 offset = 979 page no = 52 Thread(102:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(102:12/RU) 22 Page(52:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(102:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(52:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(3:9/3)
[PageFaultHandler][do_handlePageFault] set Page(52:12/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(52:12/3) do swap-in Thread(102:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1123),Device(0),Page(52:12/3),Diskblock(116),FileRead,Openfile(132:12/0),Thread(102:12/W1)) this Page(52:12/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(53:11/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(53:11/21) swap-in finish Thread(88:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 31024 offset = 304 page no = 30 Thread(88:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(88:11/RU) 22 Page(30:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(88:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(88:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(30:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(47:6/18)
[PageFaultHandler][do_handlePageFault] Frame(18) is dirty, do swap-out Thread(88:11/W0)
[PageFaultHandler][SwapOut] page Page(47:6/18) frame Frame(18)file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 47
PageTableEntry][do_lock] iorb IORB(Id(1124),Device(0),Page(47:6/18),Diskblock(367),FileWrite,Openfile(122:11/0),Thread(88:11/W1)) this Page(47:6/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:6/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(1:6/9) swap-in finish Thread(101:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 29015 offset = 343 page no = 28 Thread(101:6/RU)
[PageTableEntry][do_unlock] this Page(37:6/11)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(11) Page(37:6/11) Thread(98:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(51:6/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(51:6/11) do swap-in Thread(98:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1125),Device(0),Page(51:6/11),Diskblock(51),FileRead,Openfile(60:6/0),Thread(98:6/W1)) this Page(51:6/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(49:9/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(49:9/16) swap-in finish Thread(84:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 13619 offset = 307 page no = 13 Thread(84:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(84:9/RU) 22 Page(13:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(84:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(84:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(13:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(49:9/16)
[PageFaultHandler][do_handlePageFault] set Page(13:9/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(13:9/16) do swap-in Thread(84:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1126),Device(0),Page(13:9/16),Diskblock(205),FileRead,Openfile(112:9/0),Thread(84:9/W1)) this Page(13:9/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(8:6/26)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(26) Page(8:6/26) Thread(92:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(28:6/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(28:6/26) do swap-in Thread(92:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1127),Device(0),Page(28:6/26),Diskblock(28),FileRead,Openfile(60:6/0),Thread(92:6/W1)) this Page(28:6/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 167020/250000[PageTableEntry][do_unlock] this Page(18:9/20)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(20) Page(18:9/20) Thread(99:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(43:6/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(43:6/20) do swap-in Thread(99:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1128),Device(0),Page(43:6/20),Diskblock(43),FileRead,Openfile(60:6/0),Thread(99:6/W1)) this Page(43:6/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(52:6/17)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(17) Page(52:6/17) Thread(97:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(46:6/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(46:6/17) do swap-in Thread(97:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1129),Device(0),Page(46:6/17),Diskblock(46),FileRead,Openfile(60:6/0),Thread(97:6/W1)) this Page(46:6/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(32:9/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(32:9/1) swap-in finish Thread(95:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 25448 offset = 872 page no = 24 Thread(95:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(95:9/RU) 22 Page(24:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(95:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(95:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(24:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(1:6/9)
[PageFaultHandler][do_handlePageFault] Frame(9) is dirty, do swap-out Thread(95:9/W0)
[PageFaultHandler][SwapOut] page Page(1:6/9) frame Frame(9)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 1
PageTableEntry][do_lock] iorb IORB(Id(1130),Device(0),Page(1:6/9),Diskblock(193),FileWrite,Openfile(112:9/0),Thread(95:9/W1)) this Page(1:6/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(40:11/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(40:11/22) swap-in finish Thread(96:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 45356 offset = 300 page no = 44 Thread(96:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(96:11/RU) 21 Page(44:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(96:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(96:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(44:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(40:11/22)
[PageFaultHandler][do_handlePageFault] set Page(44:11/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(44:11/22) do swap-in Thread(96:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1131),Device(0),Page(44:11/22),Diskblock(364),FileRead,Openfile(122:11/0),Thread(96:11/W1)) this Page(44:11/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(55:6/8)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(8) Page(55:6/8) Thread(90:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(31:9/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(31:9/8) do swap-in Thread(90:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1132),Device(0),Page(31:9/8),Diskblock(223),FileRead,Openfile(112:9/0),Thread(90:9/W1)) this Page(31:9/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(49:6/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(49:6/28) swap-in finish Thread(76:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 168078/250000[MMU][do_refer] address = 45593 offset = 537 page no = 44 Thread(76:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(76:6/RU) 22 Page(44:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(76:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(76:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(44:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(49:6/28)
[PageFaultHandler][do_handlePageFault] set Page(44:6/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(44:6/28) do swap-in Thread(76:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1133),Device(0),Page(44:6/28),Diskblock(44),FileRead,Openfile(60:6/0),Thread(76:6/W1)) this Page(44:6/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(29:6/27)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(27) Page(29:6/27) Thread(86:10/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(28:10/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(28:10/27) do swap-in Thread(86:10/W0)
PageTableEntry][do_lock] iorb IORB(Id(1134),Device(0),Page(28:10/27),Diskblock(284),FileRead,Openfile(116:10/0),Thread(86:10/W1)) this Page(28:10/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:6/14)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(14) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(25)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(25) Page(56:11/25) isDirty true
[PageFaultHandler][SwapOut] file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 56
PageTableEntry][do_lock] iorb IORB(Id(1135),Device(0),Page(56:11/25),Diskblock(376),FileWrite,Openfile(122:11/0),Thread(100:0/W1)) this Page(56:11/25)
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(24:6/24)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(24) Page(24:6/24) Thread(91:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(16:6/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(16:6/24) do swap-in Thread(91:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1136),Device(0),Page(16:6/24),Diskblock(16),FileRead,Openfile(60:6/0),Thread(91:6/W1)) this Page(16:6/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(52:12/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(52:12/3) swap-in finish Thread(102:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 169010/250000[MMU][do_refer] address = 51136 offset = 960 page no = 49 Thread(102:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(102:12/RU) 21 Page(49:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(102:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(49:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(52:12/3)
[PageFaultHandler][do_handlePageFault] Frame(3) is dirty, do swap-out Thread(102:12/W0)
[PageFaultHandler][SwapOut] page Page(52:12/3) frame Frame(3)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 52
PageTableEntry][do_lock] iorb IORB(Id(1137),Device(0),Page(52:12/3),Diskblock(116),FileWrite,Openfile(132:12/0),Thread(102:12/W1)) this Page(52:12/3)
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(47:6/18)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(18) Page(47:6/18) Thread(88:11/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(30:11/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(30:11/18) do swap-in Thread(88:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1138),Device(0),Page(30:11/18),Diskblock(350),FileRead,Openfile(122:11/0),Thread(88:11/W1)) this Page(30:11/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(51:6/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(51:6/11) swap-in finish Thread(98:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 37935 offset = 47 page no = 37 Thread(98:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(98:6/RU) 22 Page(37:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(98:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(98:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(37:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(2:9/19)
[PageFaultHandler][do_handlePageFault] set Page(37:6/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(37:6/19) do swap-in Thread(98:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1139),Device(0),Page(37:6/19),Diskblock(37),FileRead,Openfile(60:6/0),Thread(98:6/W1)) this Page(37:6/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(13:9/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(13:9/16) swap-in finish Thread(84:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(28:6/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(28:6/26) swap-in finish Thread(92:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(43:6/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(43:6/20) swap-in finish Thread(99:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(46:6/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(46:6/17) swap-in finish Thread(97:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 170009/250000[MMU][do_refer] address = 51267 offset = 67 page no = 50 Thread(99:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(99:6/RU) 21 Page(50:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(99:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(99:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(50:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(10:6/5)
[PageFaultHandler][do_handlePageFault] Frame(5) is dirty, do swap-out Thread(99:6/W0)
[PageFaultHandler][SwapOut] page Page(10:6/5) frame Frame(5)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 10
PageTableEntry][do_lock] iorb IORB(Id(1140),Device(0),Page(10:6/5),Diskblock(10),FileWrite,Openfile(60:6/0),Thread(99:6/W1)) this Page(10:6/5)
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:6/9)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(9) Page(1:6/9) Thread(95:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(24:9/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(24:9/9) do swap-in Thread(95:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1141),Device(0),Page(24:9/9),Diskblock(216),FileRead,Openfile(112:9/0),Thread(95:9/W1)) this Page(24:9/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 63840 offset = 352 page no = 62 Thread(97:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(97:6/RU) 21 Page(62:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(97:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(97:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(62:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(9:6/10)
[PageFaultHandler][do_handlePageFault] Frame(10) is dirty, do swap-out Thread(97:6/W0)
[PageFaultHandler][SwapOut] page Page(9:6/10) frame Frame(10)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 9
PageTableEntry][do_lock] iorb IORB(Id(1142),Device(0),Page(9:6/10),Diskblock(9),FileWrite,Openfile(60:6/0),Thread(97:6/W1)) this Page(9:6/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 27321 offset = 697 page no = 26 Thread(103:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(103:6/RU) 22 Page(26:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(103:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(103:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(26:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(37:9/23)
[PageFaultHandler][do_handlePageFault] set Page(26:6/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(26:6/23) do swap-in Thread(103:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1143),Device(0),Page(26:6/23),Diskblock(26),FileRead,Openfile(60:6/0),Thread(103:6/W1)) this Page(26:6/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 12847 offset = 559 page no = 12 Thread(101:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(101:6/RU) 22 Page(12:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(101:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(101:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(12:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] set Page(12:6/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(12:6/2) do swap-in Thread(101:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1144),Device(0),Page(12:6/2),Diskblock(12),FileRead,Openfile(60:6/0),Thread(101:6/W1)) this Page(12:6/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 4360 offset = 264 page no = 4 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 22 Page(4:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(4:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(53:11/21)
[PageFaultHandler][do_handlePageFault] Frame(21) is dirty, do swap-out Thread(104:13/W0)
[PageFaultHandler][SwapOut] page Page(53:11/21) frame Frame(21)file Openfile(134:13/0)
[PageFaultHandler][SwapOut] block no 53
PageTableEntry][do_lock] iorb IORB(Id(1145),Device(0),Page(53:11/21),Diskblock(181),FileWrite,Openfile(134:13/0),Thread(104:13/W1)) this Page(53:11/21)
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(44:11/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(44:11/22) swap-in finish Thread(96:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 51614 offset = 414 page no = 50 Thread(96:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(96:11/RU) 21 Page(50:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(96:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(96:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(50:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(44:11/22)
[PageFaultHandler][do_handlePageFault] set Page(50:11/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(50:11/22) do swap-in Thread(96:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1146),Device(0),Page(50:11/22),Diskblock(370),FileRead,Openfile(122:11/0),Thread(96:11/W1)) this Page(50:11/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(31:9/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(31:9/8) swap-in finish Thread(90:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 63905 offset = 417 page no = 62 Thread(90:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(90:9/RU) 21 Page(62:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(90:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(90:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(62:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(31:6/29)
[PageFaultHandler][do_handlePageFault] set Page(62:9/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(62:9/29) do swap-in Thread(90:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1147),Device(0),Page(62:9/29),Diskblock(254),FileRead,Openfile(112:9/0),Thread(90:9/W1)) this Page(62:9/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(44:6/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(44:6/28) swap-in finish Thread(76:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 11670 offset = 406 page no = 11 Thread(76:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(76:6/RU) 21 Page(11:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(76:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(76:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(11:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(51:6/11)
[PageFaultHandler][do_handlePageFault] Frame(11) is dirty, do swap-out Thread(76:6/W0)
[PageFaultHandler][SwapOut] page Page(51:6/11) frame Frame(11)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 51
PageTableEntry][do_lock] iorb IORB(Id(1148),Device(0),Page(51:6/11),Diskblock(51),FileWrite,Openfile(60:6/0),Thread(76:6/W1)) this Page(51:6/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(28:10/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(28:10/27) swap-in finish Thread(86:10/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 171080/250000[MMU][do_refer] address = 36244 offset = 404 page no = 35 Thread(86:10/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(86:10/RU) 21 Page(35:10/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(86:10/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(86:10/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(35:10/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(10/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(28:6/26)
[PageFaultHandler][do_handlePageFault] Frame(26) is dirty, do swap-out Thread(86:10/W0)
[PageFaultHandler][SwapOut] page Page(28:6/26) frame Frame(26)file Openfile(116:10/0)
[PageFaultHandler][SwapOut] block no 28
PageTableEntry][do_lock] iorb IORB(Id(1149),Device(0),Page(28:6/26),Diskblock(284),FileWrite,Openfile(116:10/0),Thread(86:10/W1)) this Page(28:6/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(56:11/25)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(25) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(13)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(13) Page(63:6/13) isDirty true
[PageFaultHandler][SwapOut] file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 63
PageTableEntry][do_lock] iorb IORB(Id(1150),Device(0),Page(63:6/13),Diskblock(63),FileWrite,Openfile(60:6/0),Thread(100:0/W1)) this Page(63:6/13)
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:6/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(16:6/24) swap-in finish Thread(91:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 60070 offset = 678 page no = 58 Thread(91:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(91:6/RU) 22 Page(58:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(91:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(91:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(58:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(26:10/0)
[PageFaultHandler][do_handlePageFault] Frame(0) is dirty, do swap-out Thread(91:6/W0)
[PageFaultHandler][SwapOut] page Page(26:10/0) frame Frame(0)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 26
PageTableEntry][do_lock] iorb IORB(Id(1151),Device(0),Page(26:10/0),Diskblock(26),FileWrite,Openfile(60:6/0),Thread(91:6/W1)) this Page(26:10/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(52:12/3)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(3) Page(52:12/3) Thread(102:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(49:12/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(49:12/3) do swap-in Thread(102:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1152),Device(0),Page(49:12/3),Diskblock(113),FileRead,Openfile(132:12/0),Thread(102:12/W1)) this Page(49:12/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 172060/250000[PageTableEntry][do_unlock] this Page(30:11/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(30:11/18) swap-in finish Thread(88:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 4683 offset = 587 page no = 4 Thread(88:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(88:11/RU) 21 Page(4:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(88:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(88:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(4:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(46:6/17)
[PageFaultHandler][do_handlePageFault] Frame(17) is dirty, do swap-out Thread(88:11/W0)
[PageFaultHandler][SwapOut] page Page(46:6/17) frame Frame(17)file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 46
PageTableEntry][do_lock] iorb IORB(Id(1153),Device(0),Page(46:6/17),Diskblock(366),FileWrite,Openfile(122:11/0),Thread(88:11/W1)) this Page(46:6/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(37:6/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(37:6/19) swap-in finish Thread(98:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 27369 offset = 745 page no = 26 Thread(98:6/RU)
[PageTableEntry][do_unlock] this Page(10:6/5)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(5) Page(10:6/5) Thread(99:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(50:6/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(50:6/5) do swap-in Thread(99:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1154),Device(0),Page(50:6/5),Diskblock(50),FileRead,Openfile(60:6/0),Thread(99:6/W1)) this Page(50:6/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(24:9/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(24:9/9) swap-in finish Thread(95:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 36924 offset = 60 page no = 36 Thread(95:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(95:9/RU) 22 Page(36:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(95:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(95:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(36:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(24:9/9)
[PageFaultHandler][do_handlePageFault] Frame(9) is dirty, do swap-out Thread(95:9/W0)
[PageFaultHandler][SwapOut] page Page(24:9/9) frame Frame(9)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 24
PageTableEntry][do_lock] iorb IORB(Id(1155),Device(0),Page(24:9/9),Diskblock(216),FileWrite,Openfile(112:9/0),Thread(95:9/W1)) this Page(24:9/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(9:6/10)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(10) Page(9:6/10) Thread(97:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(62:6/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(62:6/10) do swap-in Thread(97:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1156),Device(0),Page(62:6/10),Diskblock(62),FileRead,Openfile(60:6/0),Thread(97:6/W1)) this Page(62:6/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(26:6/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(26:6/23) swap-in finish Thread(103:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(12:6/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(12:6/2) swap-in finish Thread(101:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 173002/250000[MMU][do_refer] address = 11448 offset = 184 page no = 11 Thread(98:6/RU)
[MMU][do_refer] address = 25436 offset = 860 page no = 24 Thread(94:9/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 40905 offset = 969 page no = 39 Thread(94:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(94:9/RU) 22 Page(39:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(94:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(94:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(39:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(37:6/19)
[PageFaultHandler][do_handlePageFault] Frame(19) is dirty, do swap-out Thread(94:9/W0)
[PageFaultHandler][SwapOut] page Page(37:6/19) frame Frame(19)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 37
PageTableEntry][do_lock] iorb IORB(Id(1157),Device(0),Page(37:6/19),Diskblock(229),FileWrite,Openfile(112:9/0),Thread(94:9/W1)) this Page(37:6/19)
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 41765 offset = 805 page no = 40 Thread(101:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(101:6/RU) 22 Page(40:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(101:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(101:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(40:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(26:6/23)
[PageFaultHandler][do_handlePageFault] Frame(23) is dirty, do swap-out Thread(101:6/W0)
[PageFaultHandler][SwapOut] page Page(26:6/23) frame Frame(23)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 26
PageTableEntry][do_lock] iorb IORB(Id(1158),Device(0),Page(26:6/23),Diskblock(26),FileWrite,Openfile(60:6/0),Thread(101:6/W1)) this Page(26:6/23)
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(53:11/21)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(21) Page(53:11/21) Thread(104:13/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(4:13/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(4:13/21) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1159),Device(0),Page(4:13/21),Diskblock(132),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(4:13/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(1160),Device(1),Page(0:6/14),Diskblock(2),FileWrite,Openfile(136:6/1),Thread(103:6/W0)) this Page(0:6/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:6/14)
[MMU][do_refer] address = 12877 offset = 589 page no = 12 Thread(103:6/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(50:11/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(50:11/22) swap-in finish Thread(96:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 19115 offset = 683 page no = 18 Thread(96:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(96:11/RU) 21 Page(18:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(96:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(96:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(18:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(50:11/22)
[PageFaultHandler][do_handlePageFault] set Page(18:11/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(18:11/22) do swap-in Thread(96:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1161),Device(0),Page(18:11/22),Diskblock(338),FileRead,Openfile(122:11/0),Thread(96:11/W1)) this Page(18:11/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(62:9/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(62:9/29) swap-in finish Thread(90:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 41155 offset = 195 page no = 40 Thread(103:6/RU)
[PageTableEntry][do_unlock] this Page(51:6/11)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(11) Page(51:6/11) Thread(76:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(11:6/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(11:6/11) do swap-in Thread(76:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1162),Device(0),Page(11:6/11),Diskblock(11),FileRead,Openfile(60:6/0),Thread(76:6/W1)) this Page(11:6/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 174020/250000[PageTableEntry][do_unlock] this Page(28:6/26)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(26) Page(28:6/26) Thread(86:10/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(35:10/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(35:10/26) do swap-in Thread(86:10/W0)
PageTableEntry][do_lock] iorb IORB(Id(1163),Device(0),Page(35:10/26),Diskblock(291),FileRead,Openfile(116:10/0),Thread(86:10/W1)) this Page(35:10/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(63:6/13)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(13) finish
[PageTableEntry][do_unlock] this Page(26:10/0)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(0) Page(26:10/0) Thread(91:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(58:6/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(58:6/0) do swap-in Thread(91:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1164),Device(0),Page(58:6/0),Diskblock(58),FileRead,Openfile(60:6/0),Thread(91:6/W1)) this Page(58:6/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(49:12/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(49:12/3) swap-in finish Thread(102:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 64215 offset = 727 page no = 62 Thread(102:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(102:12/RU) 21 Page(62:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(102:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(62:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(62:9/29)
[PageFaultHandler][do_handlePageFault] set Page(62:12/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(62:12/29) do swap-in Thread(102:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1165),Device(0),Page(62:12/29),Diskblock(126),FileRead,Openfile(132:12/0),Thread(102:12/W1)) this Page(62:12/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(46:6/17)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(17) Page(46:6/17) Thread(88:11/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(4:11/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(4:11/17) do swap-in Thread(88:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1166),Device(0),Page(4:11/17),Diskblock(324),FileRead,Openfile(122:11/0),Thread(88:11/W1)) this Page(4:11/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 175055/250000[PageTableEntry][do_unlock] this Page(50:6/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(50:6/5) swap-in finish Thread(99:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 61786 offset = 346 page no = 60 Thread(99:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(99:6/RU) 21 Page(60:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(99:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(99:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(60:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(50:6/5)
[PageFaultHandler][do_handlePageFault] set Page(60:6/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(60:6/5) do swap-in Thread(99:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1167),Device(0),Page(60:6/5),Diskblock(60),FileRead,Openfile(60:6/0),Thread(99:6/W1)) this Page(60:6/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(24:9/9)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(9) Page(24:9/9) Thread(95:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(36:9/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(36:9/9) do swap-in Thread(95:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1168),Device(0),Page(36:9/9),Diskblock(228),FileRead,Openfile(112:9/0),Thread(95:9/W1)) this Page(36:9/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(62:6/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(62:6/10) swap-in finish Thread(97:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 42003 offset = 19 page no = 41 Thread(97:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(97:6/RU) 22 Page(41:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(97:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(97:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(41:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(62:6/10)
[PageFaultHandler][do_handlePageFault] set Page(41:6/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(41:6/10) do swap-in Thread(97:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1169),Device(0),Page(41:6/10),Diskblock(41),FileRead,Openfile(60:6/0),Thread(97:6/W1)) this Page(41:6/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(37:6/19)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(19) Page(37:6/19) Thread(94:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(39:9/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(39:9/19) do swap-in Thread(94:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1170),Device(0),Page(39:9/19),Diskblock(231),FileRead,Openfile(112:9/0),Thread(94:9/W1)) this Page(39:9/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(26:6/23)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(23) Page(26:6/23) Thread(101:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(40:6/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(40:6/23) do swap-in Thread(101:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1171),Device(0),Page(40:6/23),Diskblock(40),FileRead,Openfile(60:6/0),Thread(101:6/W1)) this Page(40:6/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 176009/250000[PageTableEntry][do_unlock] this Page(4:13/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(4:13/21) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 42462 offset = 478 page no = 41 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 22 Page(41:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(41:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(43:6/20)
[PageFaultHandler][do_handlePageFault] set Page(41:13/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(41:13/20) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1172),Device(0),Page(41:13/20),Diskblock(169),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(41:13/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(18:11/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(18:11/22) swap-in finish Thread(96:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(11:6/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(11:6/11) swap-in finish Thread(76:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 16423 offset = 39 page no = 16 Thread(96:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(96:11/RU) 22 Page(16:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(96:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(96:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(16:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(0:6/14)
[PageFaultHandler][do_handlePageFault] set Page(16:11/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(16:11/14) do swap-in Thread(96:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1173),Device(0),Page(16:11/14),Diskblock(336),FileRead,Openfile(122:11/0),Thread(96:11/W1)) this Page(16:11/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 48891 offset = 763 page no = 47 Thread(98:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(98:6/RU) 21 Page(47:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(98:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(98:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(47:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(28:10/27)
[PageFaultHandler][do_handlePageFault] Frame(27) is dirty, do swap-out Thread(98:6/W0)
[PageFaultHandler][SwapOut] page Page(28:10/27) frame Frame(27)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 28
PageTableEntry][do_lock] iorb IORB(Id(1174),Device(0),Page(28:10/27),Diskblock(28),FileWrite,Openfile(60:6/0),Thread(98:6/W1)) this Page(28:10/27)
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 177020/250000[PageTableEntry][do_unlock] this Page(35:10/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(35:10/26) swap-in finish Thread(86:10/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(1175),Device(2),Page(35:10/26),Diskblock(1),FileRead,Openfile(138:10/2),Thread(86:10/W0)) this Page(35:10/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(58:6/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(58:6/0) swap-in finish Thread(91:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 16226 offset = 866 page no = 15 Thread(84:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(84:9/RU) 22 Page(15:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(84:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(84:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(15:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(13:9/16)
[PageFaultHandler][do_handlePageFault] Frame(16) is dirty, do swap-out Thread(84:9/W0)
[PageFaultHandler][SwapOut] page Page(13:9/16) frame Frame(16)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 13
PageTableEntry][do_lock] iorb IORB(Id(1176),Device(0),Page(13:9/16),Diskblock(205),FileWrite,Openfile(112:9/0),Thread(84:9/W1)) this Page(13:9/16)
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(1177),Device(2),Page(11:6/11),Diskblock(1),FileRead,Openfile(138:10/2),Thread(91:6/W0)) this Page(11:6/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 4231 offset = 135 page no = 4 Thread(76:6/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 21103 offset = 623 page no = 20 Thread(76:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(76:6/RU) 21 Page(20:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(76:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(76:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(20:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(12:6/2)
[PageFaultHandler][do_handlePageFault] Frame(2) is dirty, do swap-out Thread(76:6/W0)
[PageFaultHandler][SwapOut] page Page(12:6/2) frame Frame(2)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 12
PageTableEntry][do_lock] iorb IORB(Id(1178),Device(0),Page(12:6/2),Diskblock(12),FileWrite,Openfile(60:6/0),Thread(76:6/W1)) this Page(12:6/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 57144 offset = 824 page no = 55 Thread(90:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(90:9/RU) 22 Page(55:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(90:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(90:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(55:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(30:11/18)
[PageFaultHandler][do_handlePageFault] Frame(18) is dirty, do swap-out Thread(90:9/W0)
[PageFaultHandler][SwapOut] page Page(30:11/18) frame Frame(18)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 30
PageTableEntry][do_lock] iorb IORB(Id(1179),Device(0),Page(30:11/18),Diskblock(222),FileWrite,Openfile(112:9/0),Thread(90:9/W1)) this Page(30:11/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(62:12/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(62:12/29) swap-in finish Thread(102:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(35:10/26)
[PageTableEntry][do_unlock] this Page(11:6/11)
[MMU][do_refer] address = 39451 offset = 539 page no = 38 Thread(91:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(91:6/RU) 21 Page(38:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(91:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(91:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(38:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(62:12/29)
[PageFaultHandler][do_handlePageFault] set Page(38:6/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(38:6/29) do swap-in Thread(91:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1180),Device(0),Page(38:6/29),Diskblock(38),FileRead,Openfile(60:6/0),Thread(91:6/W1)) this Page(38:6/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(4:11/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(4:11/17) swap-in finish Thread(88:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 55789 offset = 493 page no = 54 Thread(88:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(88:11/RU) 22 Page(54:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(88:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(88:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(54:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(11:6/11)
[PageFaultHandler][do_handlePageFault] Frame(11) is dirty, do swap-out Thread(88:11/W0)
[PageFaultHandler][SwapOut] page Page(11:6/11) frame Frame(11)file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 11
PageTableEntry][do_lock] iorb IORB(Id(1181),Device(0),Page(11:6/11),Diskblock(331),FileWrite,Openfile(122:11/0),Thread(88:11/W1)) this Page(11:6/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(60:6/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(60:6/5) swap-in finish Thread(99:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 178029/250000[PageTableEntry][do_unlock] this Page(36:9/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(36:9/9) swap-in finish Thread(95:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 19613 offset = 157 page no = 19 Thread(95:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(95:9/RU) 22 Page(19:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(95:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(95:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(19:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(60:6/5)
[PageFaultHandler][do_handlePageFault] set Page(19:9/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(19:9/5) do swap-in Thread(95:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1182),Device(0),Page(19:9/5),Diskblock(211),FileRead,Openfile(112:9/0),Thread(95:9/W1)) this Page(19:9/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 24922 offset = 346 page no = 24 Thread(86:10/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(86:10/RU) 21 Page(24:10/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(86:10/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(86:10/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(24:10/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(10/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(49:12/3)
[PageFaultHandler][do_handlePageFault] set Page(24:10/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(24:10/3) do swap-in Thread(86:10/W0)
PageTableEntry][do_lock] iorb IORB(Id(1183),Device(0),Page(24:10/3),Diskblock(280),FileRead,Openfile(116:10/0),Thread(86:10/W1)) this Page(24:10/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(41:6/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(41:6/10) swap-in finish Thread(97:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 32149 offset = 405 page no = 31 Thread(97:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(97:6/RU) 21 Page(31:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(97:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(97:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(31:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(58:6/0)
[PageFaultHandler][do_handlePageFault] Frame(0) is dirty, do swap-out Thread(97:6/W0)
[PageFaultHandler][SwapOut] page Page(58:6/0) frame Frame(0)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 58
PageTableEntry][do_lock] iorb IORB(Id(1184),Device(0),Page(58:6/0),Diskblock(58),FileWrite,Openfile(60:6/0),Thread(97:6/W1)) this Page(58:6/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(39:9/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(39:9/19) swap-in finish Thread(94:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(40:6/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(40:6/23) swap-in finish Thread(101:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 27110 offset = 486 page no = 26 Thread(103:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(103:6/RU) 22 Page(26:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(103:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(103:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(26:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(40:6/23)
[PageFaultHandler][do_handlePageFault] Frame(23) is dirty, do swap-out Thread(103:6/W0)
[PageFaultHandler][SwapOut] page Page(40:6/23) frame Frame(23)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 40
PageTableEntry][do_lock] iorb IORB(Id(1185),Device(0),Page(40:6/23),Diskblock(40),FileWrite,Openfile(60:6/0),Thread(103:6/W1)) this Page(40:6/23)
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(41:13/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(41:13/20) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 21258 offset = 778 page no = 20 Thread(101:6/RU)
[MMU][do_refer] address = 12810 offset = 522 page no = 12 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 21 Page(12:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(12:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(4:13/21)
[PageFaultHandler][do_handlePageFault] Frame(21) is dirty, do swap-out Thread(104:13/W0)
[PageFaultHandler][SwapOut] page Page(4:13/21) frame Frame(21)file Openfile(134:13/0)
[PageFaultHandler][SwapOut] block no 4
PageTableEntry][do_lock] iorb IORB(Id(1186),Device(0),Page(4:13/21),Diskblock(132),FileWrite,Openfile(134:13/0),Thread(104:13/W1)) this Page(4:13/21)
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 179055/250000[MMU][do_refer] address = 41942 offset = 982 page no = 40 Thread(94:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(94:9/RU) 22 Page(40:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(94:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(94:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(40:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(63:6/13)
[PageFaultHandler][do_handlePageFault] set Page(40:9/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(40:9/13) do swap-in Thread(94:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1187),Device(0),Page(40:9/13),Diskblock(232),FileRead,Openfile(112:9/0),Thread(94:9/W1)) this Page(40:9/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:11/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(16:11/14) swap-in finish Thread(96:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 9506 offset = 290 page no = 9 Thread(96:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(96:11/RU) 22 Page(9:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(96:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(96:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(9:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(16:11/14)
[PageFaultHandler][do_handlePageFault] Frame(14) is dirty, do swap-out Thread(96:11/W0)
[PageFaultHandler][SwapOut] page Page(16:11/14) frame Frame(14)file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 16
PageTableEntry][do_lock] iorb IORB(Id(1188),Device(0),Page(16:11/14),Diskblock(336),FileWrite,Openfile(122:11/0),Thread(96:11/W1)) this Page(16:11/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(28:10/27)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(27) Page(28:10/27) Thread(98:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(47:6/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(47:6/27) do swap-in Thread(98:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1189),Device(0),Page(47:6/27),Diskblock(47),FileRead,Openfile(60:6/0),Thread(98:6/W1)) this Page(47:6/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(13:9/16)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(16) Page(13:9/16) Thread(84:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(15:9/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(15:9/16) do swap-in Thread(84:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1190),Device(0),Page(15:9/16),Diskblock(207),FileRead,Openfile(112:9/0),Thread(84:9/W1)) this Page(15:9/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(12:6/2)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(2) Page(12:6/2) Thread(76:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(20:6/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(20:6/2) do swap-in Thread(76:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1191),Device(0),Page(20:6/2),Diskblock(20),FileRead,Openfile(60:6/0),Thread(76:6/W1)) this Page(20:6/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageCleanDaemon][unleash] osp.Memory.PageCleanDaemon@1bf99cf5 execute time 180000
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(24)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(19)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(26)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(8)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(28)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(10)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(24)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(24) Page(16:6/24) isDirty true
[PageFaultHandler][SwapOut] file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 16
PageTableEntry][do_lock] iorb IORB(Id(1192),Device(0),Page(16:6/24),Diskblock(16),FileWrite,Openfile(60:6/0),Thread(105:0/W1)) this Page(16:6/24)
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 180040/250000[PageTableEntry][do_unlock] this Page(30:11/18)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(18) Page(30:11/18) Thread(90:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(55:9/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(55:9/18) do swap-in Thread(90:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1193),Device(0),Page(55:9/18),Diskblock(247),FileRead,Openfile(112:9/0),Thread(90:9/W1)) this Page(55:9/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(38:6/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(38:6/29) swap-in finish Thread(91:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 23332 offset = 804 page no = 22 Thread(91:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(91:6/RU) 21 Page(22:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(91:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(91:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(22:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(32:9/1)
[PageFaultHandler][do_handlePageFault] set Page(22:6/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(22:6/1) do swap-in Thread(91:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1194),Device(0),Page(22:6/1),Diskblock(22),FileRead,Openfile(60:6/0),Thread(91:6/W1)) this Page(22:6/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(11:6/11)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(11) Page(11:6/11) Thread(88:11/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(54:11/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(54:11/11) do swap-in Thread(88:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1195),Device(0),Page(54:11/11),Diskblock(374),FileRead,Openfile(122:11/0),Thread(88:11/W1)) this Page(54:11/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(19:9/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(19:9/5) swap-in finish Thread(95:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 16689 offset = 305 page no = 16 Thread(95:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(95:9/RU) 21 Page(16:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(95:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(95:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(16:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(21:6/15)
[PageFaultHandler][do_handlePageFault] set Page(16:9/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(16:9/15) do swap-in Thread(95:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1196),Device(0),Page(16:9/15),Diskblock(208),FileRead,Openfile(112:9/0),Thread(95:9/W1)) this Page(16:9/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 181013/250000[PageTableEntry][do_unlock] this Page(24:10/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(24:10/3) swap-in finish Thread(86:10/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(58:6/0)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(0) Page(58:6/0) Thread(97:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(31:6/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(31:6/0) do swap-in Thread(97:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1197),Device(0),Page(31:6/0),Diskblock(31),FileRead,Openfile(60:6/0),Thread(97:6/W1)) this Page(31:6/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(40:6/23)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(23) Page(40:6/23) Thread(103:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(26:6/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(26:6/23) do swap-in Thread(103:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1198),Device(0),Page(26:6/23),Diskblock(26),FileRead,Openfile(60:6/0),Thread(103:6/W1)) this Page(26:6/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(4:13/21)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(21) Page(4:13/21) Thread(104:13/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(12:13/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(12:13/21) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1199),Device(0),Page(12:13/21),Diskblock(140),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(12:13/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(40:9/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(40:9/13) swap-in finish Thread(94:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 49518 offset = 366 page no = 48 Thread(94:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(94:9/RU) 22 Page(48:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(94:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(94:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(48:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(24:10/3)
[PageFaultHandler][do_handlePageFault] set Page(48:9/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(48:9/3) do swap-in Thread(94:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1200),Device(0),Page(48:9/3),Diskblock(240),FileRead,Openfile(112:9/0),Thread(94:9/W1)) this Page(48:9/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:11/14)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(14) Page(16:11/14) Thread(96:11/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(9:11/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(9:11/14) do swap-in Thread(96:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1201),Device(0),Page(9:11/14),Diskblock(329),FileRead,Openfile(122:11/0),Thread(96:11/W1)) this Page(9:11/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 182007/250000[PageTableEntry][do_unlock] this Page(47:6/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(47:6/27) swap-in finish Thread(98:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(1202),Device(2),Page(38:6/29),Diskblock(1),FileRead,Openfile(138:10/2),Thread(98:6/W0)) this Page(38:6/29)
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(15:9/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(15:9/16) swap-in finish Thread(84:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 43811 offset = 803 page no = 42 Thread(84:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(84:9/RU) 21 Page(42:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(84:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(84:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(42:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(47:6/27)
[PageFaultHandler][do_handlePageFault] set Page(42:9/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(42:9/27) do swap-in Thread(84:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1203),Device(0),Page(42:9/27),Diskblock(234),FileRead,Openfile(112:9/0),Thread(84:9/W1)) this Page(42:9/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(38:6/29)
[MMU][do_refer] address = 22229 offset = 725 page no = 21 Thread(98:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(98:6/RU) 21 Page(21:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(98:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(98:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(21:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(40:9/13)
[PageFaultHandler][do_handlePageFault] Frame(13) is dirty, do swap-out Thread(98:6/W0)
[PageFaultHandler][SwapOut] page Page(40:9/13) frame Frame(13)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 40
PageTableEntry][do_lock] iorb IORB(Id(1204),Device(0),Page(40:9/13),Diskblock(40),FileWrite,Openfile(60:6/0),Thread(98:6/W1)) this Page(40:9/13)
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(20:6/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(20:6/2) swap-in finish Thread(76:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(16:6/24)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(24) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(19)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(19) Page(39:9/19) isDirty true
[PageFaultHandler][SwapOut] file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 39
PageTableEntry][do_lock] iorb IORB(Id(1205),Device(0),Page(39:9/19),Diskblock(231),FileWrite,Openfile(112:9/0),Thread(105:0/W1)) this Page(39:9/19)
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 40297 offset = 361 page no = 39 Thread(76:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(76:6/RU) 22 Page(39:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(76:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(76:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(39:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(16:6/24)
[PageFaultHandler][do_handlePageFault] set Page(39:6/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(39:6/24) do swap-in Thread(76:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1206),Device(0),Page(39:6/24),Diskblock(39),FileRead,Openfile(60:6/0),Thread(76:6/W1)) this Page(39:6/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 41138 offset = 178 page no = 40 Thread(99:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(99:6/RU) 21 Page(40:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(99:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(99:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(40:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(17:9/6)
[PageFaultHandler][do_handlePageFault] set Page(40:6/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(40:6/6) do swap-in Thread(99:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1207),Device(0),Page(40:6/6),Diskblock(40),FileRead,Openfile(60:6/0),Thread(99:6/W1)) this Page(40:6/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 14095 offset = 783 page no = 13 Thread(101:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(101:6/RU) 21 Page(13:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(101:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(101:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(13:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(58:9/4)
[PageFaultHandler][do_handlePageFault] set Page(13:6/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(13:6/4) do swap-in Thread(101:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1208),Device(0),Page(13:6/4),Diskblock(13),FileRead,Openfile(60:6/0),Thread(101:6/W1)) this Page(13:6/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(55:9/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(55:9/18) swap-in finish Thread(90:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 183057/250000[MMU][do_refer] address = 39715 offset = 803 page no = 38 Thread(90:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(90:9/RU) 21 Page(38:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(90:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(90:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(38:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(4:11/17)
[PageFaultHandler][do_handlePageFault] set Page(38:9/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(38:9/17) do swap-in Thread(90:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1209),Device(0),Page(38:9/17),Diskblock(230),FileRead,Openfile(112:9/0),Thread(90:9/W1)) this Page(38:9/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(22:6/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(22:6/1) swap-in finish Thread(91:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 8774 offset = 582 page no = 8 Thread(91:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(91:6/RU) 21 Page(8:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(91:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(91:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(8:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(22:6/1)
[PageFaultHandler][do_handlePageFault] set Page(8:6/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(8:6/1) do swap-in Thread(91:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1210),Device(0),Page(8:6/1),Diskblock(8),FileRead,Openfile(60:6/0),Thread(91:6/W1)) this Page(8:6/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(54:11/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(54:11/11) swap-in finish Thread(88:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(16:9/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(16:9/15) swap-in finish Thread(95:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 27290 offset = 666 page no = 26 Thread(95:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(95:9/RU) 21 Page(26:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(95:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(95:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(26:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(54:11/11)
[PageFaultHandler][do_handlePageFault] Frame(11) is dirty, do swap-out Thread(95:9/W0)
[PageFaultHandler][SwapOut] page Page(54:11/11) frame Frame(11)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 54
PageTableEntry][do_lock] iorb IORB(Id(1211),Device(0),Page(54:11/11),Diskblock(246),FileWrite,Openfile(112:9/0),Thread(95:9/W1)) this Page(54:11/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(31:6/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(31:6/0) swap-in finish Thread(97:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(26:6/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(26:6/23) swap-in finish Thread(103:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 6823 offset = 679 page no = 6 Thread(103:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(103:6/RU) 22 Page(6:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(103:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(103:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(6:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(26:6/23)
[PageFaultHandler][do_handlePageFault] Frame(23) is dirty, do swap-out Thread(103:6/W0)
[PageFaultHandler][SwapOut] page Page(26:6/23) frame Frame(23)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 26
PageTableEntry][do_lock] iorb IORB(Id(1212),Device(0),Page(26:6/23),Diskblock(26),FileWrite,Openfile(60:6/0),Thread(103:6/W1)) this Page(26:6/23)
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 17146 offset = 762 page no = 16 Thread(97:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(97:6/RU) 22 Page(16:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(97:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(97:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(16:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(55:9/18)
[PageFaultHandler][do_handlePageFault] Frame(18) is dirty, do swap-out Thread(97:6/W0)
[PageFaultHandler][SwapOut] page Page(55:9/18) frame Frame(18)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 55
PageTableEntry][do_lock] iorb IORB(Id(1213),Device(0),Page(55:9/18),Diskblock(55),FileWrite,Openfile(60:6/0),Thread(97:6/W1)) this Page(55:9/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 55483 offset = 187 page no = 54 Thread(88:11/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(12:13/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(12:13/21) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 184067/250000[MMU][do_refer] address = 50882 offset = 706 page no = 49 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 21 Page(49:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(49:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(36:9/9)
[PageFaultHandler][do_handlePageFault] Frame(9) is dirty, do swap-out Thread(104:13/W0)
[PageFaultHandler][SwapOut] page Page(36:9/9) frame Frame(9)file Openfile(134:13/0)
[PageFaultHandler][SwapOut] block no 36
PageTableEntry][do_lock] iorb IORB(Id(1214),Device(0),Page(36:9/9),Diskblock(164),FileWrite,Openfile(134:13/0),Thread(104:13/W1)) this Page(36:9/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 62043 offset = 603 page no = 60 Thread(88:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(88:11/RU) 22 Page(60:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(88:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(88:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(60:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(41:13/20)
[PageFaultHandler][do_handlePageFault] Frame(20) is dirty, do swap-out Thread(88:11/W0)
[PageFaultHandler][SwapOut] page Page(41:13/20) frame Frame(20)file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 41
PageTableEntry][do_lock] iorb IORB(Id(1215),Device(0),Page(41:13/20),Diskblock(361),FileWrite,Openfile(122:11/0),Thread(88:11/W1)) this Page(41:13/20)
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(48:9/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(48:9/3) swap-in finish Thread(94:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(1216),Device(2),Page(0:9/null),Diskblock(1),FileWrite,Openfile(138:10/2),Thread(94:9/W0)) this Page(0:9/null)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] validating_thread is null, handlePageFault
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(94:9/W0) 23 Page(0:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(94:9/W0) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(94:9/W1) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(0:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(48:9/3)
[PageFaultHandler][do_handlePageFault] Frame(3) is dirty, do swap-out Thread(94:9/W1)
[PageFaultHandler][SwapOut] page Page(48:9/3) frame Frame(3)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 48
PageTableEntry][do_lock] iorb IORB(Id(1217),Device(0),Page(48:9/3),Diskblock(240),FileWrite,Openfile(112:9/0),Thread(94:9/W2)) this Page(48:9/3)
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(9:11/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(9:11/14) swap-in finish Thread(96:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(42:9/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(42:9/27) swap-in finish Thread(84:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(1218),Device(2),Page(0:12/null),Diskblock(1),FileWrite,Openfile(138:10/2),Thread(102:12/W0)) this Page(0:12/null)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] validating_thread is null, handlePageFault
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(102:12/W0) 23 Page(0:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W0) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W1) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(0:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(42:9/27)
[PageFaultHandler][do_handlePageFault] set Page(0:12/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(0:12/27) do swap-in Thread(102:12/W1)
PageTableEntry][do_lock] iorb IORB(Id(1219),Device(0),Page(0:12/27),Diskblock(64),FileRead,Openfile(132:12/0),Thread(102:12/W2)) this Page(0:12/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 10167 offset = 951 page no = 9 Thread(84:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(84:9/RU) 21 Page(9:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(84:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(84:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(9:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(38:6/29)
[PageFaultHandler][do_handlePageFault] Frame(29) is dirty, do swap-out Thread(84:9/W0)
[PageFaultHandler][SwapOut] page Page(38:6/29) frame Frame(29)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 38
PageTableEntry][do_lock] iorb IORB(Id(1220),Device(0),Page(38:6/29),Diskblock(230),FileWrite,Openfile(112:9/0),Thread(84:9/W1)) this Page(38:6/29)
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(40:9/13)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(13) Page(40:9/13) Thread(98:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(21:6/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(21:6/13) do swap-in Thread(98:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1221),Device(0),Page(21:6/13),Diskblock(21),FileRead,Openfile(60:6/0),Thread(98:6/W1)) this Page(21:6/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 40312 offset = 376 page no = 39 Thread(96:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(96:11/RU) 22 Page(39:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(96:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(96:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(39:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(20:6/2)
[PageFaultHandler][do_handlePageFault] Frame(2) is dirty, do swap-out Thread(96:11/W0)
[PageFaultHandler][SwapOut] page Page(20:6/2) frame Frame(2)file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 20
PageTableEntry][do_lock] iorb IORB(Id(1222),Device(0),Page(20:6/2),Diskblock(340),FileWrite,Openfile(122:11/0),Thread(96:11/W1)) this Page(20:6/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 185016/250000[PageTableEntry][do_unlock] this Page(39:9/19)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(19) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(26)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(26) Page(35:10/26) isDirty true
[PageFaultHandler][SwapOut] file Openfile(116:10/0)
[PageFaultHandler][SwapOut] block no 35
PageTableEntry][do_lock] iorb IORB(Id(1223),Device(0),Page(35:10/26),Diskblock(291),FileWrite,Openfile(116:10/0),Thread(105:0/W1)) this Page(35:10/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(39:6/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(39:6/24) swap-in finish Thread(76:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(40:6/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(40:6/6) swap-in finish Thread(99:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(13:6/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(13:6/4) swap-in finish Thread(101:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 8751 offset = 559 page no = 8 Thread(76:6/RU)
[MMU][do_refer] address = 27132 offset = 508 page no = 26 Thread(101:6/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 95 offset = 95 page no = 0 Thread(99:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(99:6/RU) 22 Page(0:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(99:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(99:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(0:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(12:13/21)
[PageFaultHandler][do_handlePageFault] set Page(0:6/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(0:6/21) do swap-in Thread(99:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1224),Device(0),Page(0:6/21),Diskblock(0),FileRead,Openfile(60:6/0),Thread(99:6/W1)) this Page(0:6/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(38:9/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(38:9/17) swap-in finish Thread(90:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 33414 offset = 646 page no = 32 Thread(90:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(90:9/RU) 22 Page(32:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(90:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(90:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(32:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(19:9/5)
[PageFaultHandler][do_handlePageFault] Frame(5) is dirty, do swap-out Thread(90:9/W0)
[PageFaultHandler][SwapOut] page Page(19:9/5) frame Frame(5)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 19
PageTableEntry][do_lock] iorb IORB(Id(1225),Device(0),Page(19:9/5),Diskblock(211),FileWrite,Openfile(112:9/0),Thread(90:9/W1)) this Page(19:9/5)
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(8:6/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(8:6/1) swap-in finish Thread(91:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] Do memory write.
Simulation progress: 186003/250000[PageTableEntry][do_unlock] this Page(54:11/11)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(11) Page(54:11/11) Thread(95:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(26:9/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(26:9/11) do swap-in Thread(95:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1226),Device(0),Page(26:9/11),Diskblock(218),FileRead,Openfile(112:9/0),Thread(95:9/W1)) this Page(26:9/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(26:6/23)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(23) Page(26:6/23) Thread(103:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(6:6/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(6:6/23) do swap-in Thread(103:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1227),Device(0),Page(6:6/23),Diskblock(6),FileRead,Openfile(60:6/0),Thread(103:6/W1)) this Page(6:6/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(55:9/18)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(18) Page(55:9/18) Thread(97:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(16:6/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(16:6/18) do swap-in Thread(97:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1228),Device(0),Page(16:6/18),Diskblock(16),FileRead,Openfile(60:6/0),Thread(97:6/W1)) this Page(16:6/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(36:9/9)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(9) Page(36:9/9) Thread(104:13/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(49:13/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(49:13/9) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1229),Device(0),Page(49:13/9),Diskblock(177),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(49:13/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(41:13/20)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(20) Page(41:13/20) Thread(88:11/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(60:11/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(60:11/20) do swap-in Thread(88:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1230),Device(0),Page(60:11/20),Diskblock(380),FileRead,Openfile(122:11/0),Thread(88:11/W1)) this Page(60:11/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(48:9/3)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(3) Page(48:9/3) Thread(94:9/W1) finish
[PageFaultHandler][do_handlePageFault] set Page(0:9/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(0:9/3) do swap-in Thread(94:9/W1)
PageTableEntry][do_lock] iorb IORB(Id(1231),Device(0),Page(0:9/3),Diskblock(192),FileRead,Openfile(112:9/0),Thread(94:9/W2)) this Page(0:9/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 187040/250000[PageTableEntry][do_unlock] this Page(0:12/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(0:12/27) swap-in finish Thread(102:12/W1)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(38:6/29)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(29) Page(38:6/29) Thread(84:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(9:9/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(9:9/29) do swap-in Thread(84:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1232),Device(0),Page(9:9/29),Diskblock(201),FileRead,Openfile(112:9/0),Thread(84:9/W1)) this Page(9:9/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:12/27)
[PageTableEntry][do_unlock] this Page(21:6/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(21:6/13) swap-in finish Thread(98:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 32809 offset = 41 page no = 32 Thread(98:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(98:6/RU) 21 Page(32:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(98:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(98:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(32:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(8:6/1)
[PageFaultHandler][do_handlePageFault] Frame(1) is dirty, do swap-out Thread(98:6/W0)
[PageFaultHandler][SwapOut] page Page(8:6/1) frame Frame(1)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 8
PageTableEntry][do_lock] iorb IORB(Id(1233),Device(0),Page(8:6/1),Diskblock(8),FileWrite,Openfile(60:6/0),Thread(98:6/W1)) this Page(8:6/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 52367 offset = 143 page no = 51 Thread(102:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(102:12/RU) 21 Page(51:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(102:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(51:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(16:9/15)
[PageFaultHandler][do_handlePageFault] set Page(51:12/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(51:12/15) do swap-in Thread(102:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1234),Device(0),Page(51:12/15),Diskblock(115),FileRead,Openfile(132:12/0),Thread(102:12/W1)) this Page(51:12/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(20:6/2)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(2) Page(20:6/2) Thread(96:11/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(39:11/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(39:11/2) do swap-in Thread(96:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1235),Device(0),Page(39:11/2),Diskblock(359),FileRead,Openfile(122:11/0),Thread(96:11/W1)) this Page(39:11/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 188020/250000[PageTableEntry][do_unlock] this Page(35:10/26)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(26) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(8)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(8) Page(31:9/8) isDirty true
[PageFaultHandler][SwapOut] file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 31
PageTableEntry][do_lock] iorb IORB(Id(1236),Device(0),Page(31:9/8),Diskblock(223),FileWrite,Openfile(112:9/0),Thread(105:0/W1)) this Page(31:9/8)
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:6/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(0:6/21) swap-in finish Thread(99:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(1237),Device(2),Page(0:6/21),Diskblock(1),FileRead,Openfile(138:10/2),Thread(99:6/W0)) this Page(0:6/21)
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(19:9/5)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(5) Page(19:9/5) Thread(90:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(32:9/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(32:9/5) do swap-in Thread(90:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1238),Device(0),Page(32:9/5),Diskblock(224),FileRead,Openfile(112:9/0),Thread(90:9/W1)) this Page(32:9/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:6/21)
[MMU][do_refer] address = 21691 offset = 187 page no = 21 Thread(99:6/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(26:9/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(26:9/11) swap-in finish Thread(95:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 28453 offset = 805 page no = 27 Thread(95:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(95:9/RU) 21 Page(27:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(95:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(95:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(27:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(0:6/21)
[PageFaultHandler][do_handlePageFault] Frame(21) is dirty, do swap-out Thread(95:9/W0)
[PageFaultHandler][SwapOut] page Page(0:6/21) frame Frame(21)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 0
PageTableEntry][do_lock] iorb IORB(Id(1239),Device(0),Page(0:6/21),Diskblock(192),FileWrite,Openfile(112:9/0),Thread(95:9/W1)) this Page(0:6/21)
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 24227 offset = 675 page no = 23 Thread(99:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(99:6/RU) 22 Page(23:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(99:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(99:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(23:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(59:6/12)
[PageFaultHandler][do_handlePageFault] set Page(23:6/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(23:6/12) do swap-in Thread(99:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1240),Device(0),Page(23:6/12),Diskblock(23),FileRead,Openfile(60:6/0),Thread(99:6/W1)) this Page(23:6/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 189005/250000[PageTableEntry][do_unlock] this Page(6:6/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(6:6/23) swap-in finish Thread(103:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(16:6/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(16:6/18) swap-in finish Thread(97:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(49:13/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(49:13/9) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 6258 offset = 114 page no = 6 Thread(97:6/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(60:11/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(60:11/20) swap-in finish Thread(88:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 56027 offset = 731 page no = 54 Thread(97:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(97:6/RU) 22 Page(54:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(97:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(97:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(54:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(56:11/25)
[PageFaultHandler][do_handlePageFault] set Page(54:6/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(54:6/25) do swap-in Thread(97:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1241),Device(0),Page(54:6/25),Diskblock(54),FileRead,Openfile(60:6/0),Thread(97:6/W1)) this Page(54:6/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:9/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(0:9/3) swap-in finish Thread(94:9/W1)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 65527 offset = 1015 page no = 63 Thread(88:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(88:11/RU) 22 Page(63:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(88:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(88:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(63:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(38:9/17)
[PageFaultHandler][do_handlePageFault] set Page(63:11/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(63:11/17) do swap-in Thread(88:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1242),Device(0),Page(63:11/17),Diskblock(383),FileRead,Openfile(122:11/0),Thread(88:11/W1)) this Page(63:11/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(9:9/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(9:9/29) swap-in finish Thread(84:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(1243),Device(2),Page(49:13/9),Diskblock(1),FileWrite,Openfile(138:10/2),Thread(104:13/W0)) this Page(49:13/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 190014/250000[MMU][do_refer] address = 41156 offset = 196 page no = 40 Thread(103:6/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(8:6/1)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(1) Page(8:6/1) Thread(98:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(32:6/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(32:6/1) do swap-in Thread(98:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1244),Device(0),Page(32:6/1),Diskblock(32),FileRead,Openfile(60:6/0),Thread(98:6/W1)) this Page(32:6/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:9/3)
[MMU][do_refer] address = 35407 offset = 591 page no = 34 Thread(94:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(94:9/RU) 22 Page(34:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(94:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(94:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(34:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(9:11/14)
[PageFaultHandler][do_handlePageFault] Frame(14) is dirty, do swap-out Thread(94:9/W0)
[PageFaultHandler][SwapOut] page Page(9:11/14) frame Frame(14)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 9
PageTableEntry][do_lock] iorb IORB(Id(1245),Device(0),Page(9:11/14),Diskblock(201),FileWrite,Openfile(112:9/0),Thread(94:9/W1)) this Page(9:11/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 65019 offset = 507 page no = 63 Thread(103:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(103:6/RU) 22 Page(63:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(103:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(103:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(63:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(40:6/6)
[PageFaultHandler][do_handlePageFault] Frame(6) is dirty, do swap-out Thread(103:6/W0)
[PageFaultHandler][SwapOut] page Page(40:6/6) frame Frame(6)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 40
PageTableEntry][do_lock] iorb IORB(Id(1246),Device(0),Page(40:6/6),Diskblock(40),FileWrite,Openfile(60:6/0),Thread(103:6/W1)) this Page(40:6/6)
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(51:12/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(51:12/15) swap-in finish Thread(102:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 5904 offset = 784 page no = 5 Thread(102:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(102:12/RU) 21 Page(5:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(102:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(5:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(51:12/15)
[PageFaultHandler][do_handlePageFault] set Page(5:12/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(5:12/15) do swap-in Thread(102:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1247),Device(0),Page(5:12/15),Diskblock(69),FileRead,Openfile(132:12/0),Thread(102:12/W1)) this Page(5:12/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(49:13/9)
[MMU][do_refer] address = 29421 offset = 749 page no = 28 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 22 Page(28:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(28:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(21:6/13)
[PageFaultHandler][do_handlePageFault] set Page(28:13/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(28:13/13) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1248),Device(0),Page(28:13/13),Diskblock(156),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(28:13/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(39:11/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(39:11/2) swap-in finish Thread(96:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(31:9/8)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(8) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(28)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(28) Page(44:6/28) isDirty true
[PageFaultHandler][SwapOut] file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 44
PageTableEntry][do_lock] iorb IORB(Id(1249),Device(0),Page(44:6/28),Diskblock(44),FileWrite,Openfile(60:6/0),Thread(105:0/W1)) this Page(44:6/28)
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(32:9/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(32:9/5) swap-in finish Thread(90:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(0:6/21)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(21) Page(0:6/21) Thread(95:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(27:9/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(27:9/21) do swap-in Thread(95:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1250),Device(0),Page(27:9/21),Diskblock(219),FileRead,Openfile(112:9/0),Thread(95:9/W1)) this Page(27:9/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 191061/250000[MMU][do_refer] address = 70 offset = 70 page no = 0 Thread(96:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(96:11/RU) 21 Page(0:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(96:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(96:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(0:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(31:9/8)
[PageFaultHandler][do_handlePageFault] set Page(0:11/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(0:11/8) do swap-in Thread(96:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1251),Device(0),Page(0:11/8),Diskblock(320),FileRead,Openfile(122:11/0),Thread(96:11/W1)) this Page(0:11/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(23:6/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(23:6/12) swap-in finish Thread(99:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(54:6/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(54:6/25) swap-in finish Thread(97:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTable][do_deallocateMemory] this Pagetable(Task(10/T))
[PageTable][do_deallocateMemory]  page_table_entry Page(35:10/26) frame_table_entry Frame(26)
[MMU][do_refer] address = 6738 offset = 594 page no = 6 Thread(90:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(90:9/RU) 22 Page(6:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(90:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(90:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(6:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(32:9/5)
[PageFaultHandler][do_handlePageFault] Frame(5) is dirty, do swap-out Thread(90:9/W0)
[PageFaultHandler][SwapOut] page Page(32:9/5) frame Frame(5)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 32
PageTableEntry][do_lock] iorb IORB(Id(1252),Device(0),Page(32:9/5),Diskblock(224),FileWrite,Openfile(112:9/0),Thread(90:9/W1)) this Page(32:9/5)
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 39181 offset = 269 page no = 38 Thread(97:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(97:6/RU) 22 Page(38:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(97:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(97:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(38:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(23:6/12)
[PageFaultHandler][do_handlePageFault] Frame(12) is dirty, do swap-out Thread(97:6/W0)
[PageFaultHandler][SwapOut] page Page(23:6/12) frame Frame(12)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 23
PageTableEntry][do_lock] iorb IORB(Id(1253),Device(0),Page(23:6/12),Diskblock(23),FileWrite,Openfile(60:6/0),Thread(97:6/W1)) this Page(23:6/12)
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(63:11/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(63:11/17) swap-in finish Thread(88:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 55622 offset = 326 page no = 54 Thread(88:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(88:11/RU) 22 Page(54:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(88:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(88:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(54:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(54:6/25)
[PageFaultHandler][do_handlePageFault] Frame(25) is dirty, do swap-out Thread(88:11/W0)
[PageFaultHandler][SwapOut] page Page(54:6/25) frame Frame(25)file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 54
PageTableEntry][do_lock] iorb IORB(Id(1254),Device(0),Page(54:6/25),Diskblock(374),FileWrite,Openfile(122:11/0),Thread(88:11/W1)) this Page(54:6/25)
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(32:6/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(32:6/1) swap-in finish Thread(98:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 11246 offset = 1006 page no = 10 Thread(98:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(98:6/RU) 21 Page(10:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(98:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(98:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(10:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(32:6/1)
[PageFaultHandler][do_handlePageFault] set Page(10:6/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(10:6/1) do swap-in Thread(98:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1255),Device(0),Page(10:6/1),Diskblock(10),FileRead,Openfile(60:6/0),Thread(98:6/W1)) this Page(10:6/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 192009/250000[PageTableEntry][do_unlock] this Page(9:11/14)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(14) Page(9:11/14) Thread(94:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(34:9/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(34:9/14) do swap-in Thread(94:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1256),Device(0),Page(34:9/14),Diskblock(226),FileRead,Openfile(112:9/0),Thread(94:9/W1)) this Page(34:9/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(40:6/6)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(6) Page(40:6/6) Thread(103:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(63:6/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(63:6/6) do swap-in Thread(103:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1257),Device(0),Page(63:6/6),Diskblock(63),FileRead,Openfile(60:6/0),Thread(103:6/W1)) this Page(63:6/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(5:12/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(5:12/15) swap-in finish Thread(102:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 26997 offset = 373 page no = 26 Thread(102:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(102:12/RU) 22 Page(26:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(102:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(26:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(5:12/15)
[PageFaultHandler][do_handlePageFault] set Page(26:12/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(26:12/15) do swap-in Thread(102:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1258),Device(0),Page(26:12/15),Diskblock(90),FileRead,Openfile(132:12/0),Thread(102:12/W1)) this Page(26:12/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(28:13/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(28:13/13) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 21229 offset = 749 page no = 20 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 22 Page(20:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(20:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(0:9/3)
[PageFaultHandler][do_handlePageFault] set Page(20:13/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(20:13/3) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1259),Device(0),Page(20:13/3),Diskblock(148),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(20:13/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(44:6/28)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(28) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(10)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(10) Page(41:6/10) isDirty true
[PageFaultHandler][SwapOut] file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 41
PageTableEntry][do_lock] iorb IORB(Id(1260),Device(0),Page(41:6/10),Diskblock(41),FileWrite,Openfile(60:6/0),Thread(105:0/W1)) this Page(41:6/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(27:9/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(27:9/21) swap-in finish Thread(95:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 193055/250000[MMU][do_refer] address = 32391 offset = 647 page no = 31 Thread(95:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(95:9/RU) 22 Page(31:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(95:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(95:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(31:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(27:9/21)
[PageFaultHandler][do_handlePageFault] set Page(31:9/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(31:9/21) do swap-in Thread(95:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1261),Device(0),Page(31:9/21),Diskblock(223),FileRead,Openfile(112:9/0),Thread(95:9/W1)) this Page(31:9/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:11/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(0:11/8) swap-in finish Thread(96:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 41362 offset = 402 page no = 40 Thread(96:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(96:11/RU) 21 Page(40:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(96:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(96:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(40:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(31:6/0)
[PageFaultHandler][do_handlePageFault] set Page(40:11/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(40:11/0) do swap-in Thread(96:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1262),Device(0),Page(40:11/0),Diskblock(360),FileRead,Openfile(122:11/0),Thread(96:11/W1)) this Page(40:11/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(32:9/5)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(5) Page(32:9/5) Thread(90:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(6:9/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(6:9/5) do swap-in Thread(90:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1263),Device(0),Page(6:9/5),Diskblock(198),FileRead,Openfile(112:9/0),Thread(90:9/W1)) this Page(6:9/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(23:6/12)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(12) Page(23:6/12) Thread(97:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(38:6/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(38:6/12) do swap-in Thread(97:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1264),Device(0),Page(38:6/12),Diskblock(38),FileRead,Openfile(60:6/0),Thread(97:6/W1)) this Page(38:6/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(54:6/25)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(25) Page(54:6/25) Thread(88:11/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(54:11/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(54:11/25) do swap-in Thread(88:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1265),Device(0),Page(54:11/25),Diskblock(374),FileRead,Openfile(122:11/0),Thread(88:11/W1)) this Page(54:11/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 194013/250000[PageTableEntry][do_unlock] this Page(10:6/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(10:6/1) swap-in finish Thread(98:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 50050 offset = 898 page no = 48 Thread(98:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(98:6/RU) 22 Page(48:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(98:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(98:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(48:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(15:9/16)
[PageFaultHandler][do_handlePageFault] Frame(16) is dirty, do swap-out Thread(98:6/W0)
[PageFaultHandler][SwapOut] page Page(15:9/16) frame Frame(16)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 15
PageTableEntry][do_lock] iorb IORB(Id(1266),Device(0),Page(15:9/16),Diskblock(15),FileWrite,Openfile(60:6/0),Thread(98:6/W1)) this Page(15:9/16)
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(34:9/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(34:9/14) swap-in finish Thread(94:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(63:6/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(63:6/6) swap-in finish Thread(103:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(26:12/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(26:12/15) swap-in finish Thread(102:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 40361 offset = 425 page no = 39 Thread(103:6/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(20:13/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(20:13/3) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(41:6/10)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(10) finish
Simulation progress: 195020/250000[MMU][do_refer] address = 6761 offset = 617 page no = 6 Thread(103:6/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(31:9/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(31:9/21) swap-in finish Thread(95:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(1267),Device(1),Page(1:12/null),Diskblock(27),FileRead,Openfile(140:12/1),Thread(102:12/W0)) this Page(1:12/null)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] validating_thread is null, handlePageFault
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(102:12/W0) 23 Page(1:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W0) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W1) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(1:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(31:9/21)
[PageFaultHandler][do_handlePageFault] Frame(21) is dirty, do swap-out Thread(102:12/W1)
[PageFaultHandler][SwapOut] page Page(31:9/21) frame Frame(21)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 31
PageTableEntry][do_lock] iorb IORB(Id(1268),Device(0),Page(31:9/21),Diskblock(95),FileWrite,Openfile(132:12/0),Thread(102:12/W2)) this Page(31:9/21)
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(40:11/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(40:11/0) swap-in finish Thread(96:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(6:9/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(6:9/5) swap-in finish Thread(90:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(38:6/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(38:6/12) swap-in finish Thread(97:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 772 offset = 772 page no = 0 Thread(95:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(95:9/RU) 21 Page(0:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(95:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(95:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(0:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(6:9/5)
[PageFaultHandler][do_handlePageFault] Frame(5) is dirty, do swap-out Thread(95:9/W0)
[PageFaultHandler][SwapOut] page Page(6:9/5) frame Frame(5)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 6
PageTableEntry][do_lock] iorb IORB(Id(1269),Device(0),Page(6:9/5),Diskblock(198),FileWrite,Openfile(112:9/0),Thread(95:9/W1)) this Page(6:9/5)
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(1270),Device(1),Page(9:9/29),Diskblock(28),FileWrite,Openfile(140:12/1),Thread(90:9/W0)) this Page(9:9/29)
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(9:9/29)
Simulation progress: 196039/250000[MMU][do_refer] address = 10623 offset = 383 page no = 10 Thread(94:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(94:9/RU) 22 Page(10:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(94:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(94:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(10:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(20:13/3)
[PageFaultHandler][do_handlePageFault] Frame(3) is dirty, do swap-out Thread(94:9/W0)
[PageFaultHandler][SwapOut] page Page(20:13/3) frame Frame(3)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 20
PageTableEntry][do_lock] iorb IORB(Id(1271),Device(0),Page(20:13/3),Diskblock(212),FileWrite,Openfile(112:9/0),Thread(94:9/W1)) this Page(20:13/3)
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(54:11/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(54:11/25) swap-in finish Thread(88:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(15:9/16)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(16) Page(15:9/16) Thread(98:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(48:6/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(48:6/16) do swap-in Thread(98:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1272),Device(0),Page(48:6/16),Diskblock(48),FileRead,Openfile(60:6/0),Thread(98:6/W1)) this Page(48:6/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(31:9/21)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(21) Page(31:9/21) Thread(102:12/W1) finish
[PageFaultHandler][do_handlePageFault] set Page(1:12/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(1:12/21) do swap-in Thread(102:12/W1)
PageTableEntry][do_lock] iorb IORB(Id(1273),Device(0),Page(1:12/21),Diskblock(65),FileRead,Openfile(132:12/0),Thread(102:12/W2)) this Page(1:12/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(6:9/5)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(5) Page(6:9/5) Thread(95:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(0:9/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(0:9/5) do swap-in Thread(95:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1274),Device(0),Page(0:9/5),Diskblock(192),FileRead,Openfile(112:9/0),Thread(95:9/W1)) this Page(0:9/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 62919 offset = 455 page no = 61 Thread(97:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(97:6/RU) 21 Page(61:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(97:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(97:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(61:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(16:6/18)
[PageFaultHandler][do_handlePageFault] Frame(18) is dirty, do swap-out Thread(97:6/W0)
[PageFaultHandler][SwapOut] page Page(16:6/18) frame Frame(18)file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 16
PageTableEntry][do_lock] iorb IORB(Id(1275),Device(0),Page(16:6/18),Diskblock(16),FileWrite,Openfile(60:6/0),Thread(97:6/W1)) this Page(16:6/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(20:13/3)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(3) Page(20:13/3) Thread(94:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(10:9/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(10:9/3) do swap-in Thread(94:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1276),Device(0),Page(10:9/3),Diskblock(202),FileRead,Openfile(112:9/0),Thread(94:9/W1)) this Page(10:9/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 37722 offset = 858 page no = 36 Thread(90:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(90:9/RU) 22 Page(36:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(90:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(90:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(36:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(18:11/22)
[PageFaultHandler][do_handlePageFault] set Page(36:9/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(36:9/22) do swap-in Thread(90:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1277),Device(0),Page(36:9/22),Diskblock(228),FileRead,Openfile(112:9/0),Thread(90:9/W1)) this Page(36:9/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 197045/250000[PageTableEntry][do_unlock] this Page(48:6/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(48:6/16) swap-in finish Thread(98:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 50741 offset = 565 page no = 49 Thread(106:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(106:9/RU) 22 Page(49:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(106:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(106:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(49:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(48:6/16)
[PageFaultHandler][do_handlePageFault] Frame(16) is dirty, do swap-out Thread(106:9/W0)
[PageFaultHandler][SwapOut] page Page(48:6/16) frame Frame(16)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 48
PageTableEntry][do_lock] iorb IORB(Id(1278),Device(0),Page(48:6/16),Diskblock(240),FileWrite,Openfile(112:9/0),Thread(106:9/W1)) this Page(48:6/16)
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:12/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(1:12/21) swap-in finish Thread(102:12/W1)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 10393 offset = 153 page no = 10 Thread(96:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(96:11/RU) 22 Page(10:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(96:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(96:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(10:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(13:6/4)
[PageFaultHandler][do_handlePageFault] set Page(10:11/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(10:11/4) do swap-in Thread(96:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1279),Device(0),Page(10:11/4),Diskblock(330),FileRead,Openfile(122:11/0),Thread(96:11/W1)) this Page(10:11/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(1:12/21)
[MMU][do_refer] address = 51917 offset = 717 page no = 50 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 21 Page(50:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(50:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(44:6/28)
[PageFaultHandler][do_handlePageFault] set Page(50:13/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(50:13/28) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1280),Device(0),Page(50:13/28),Diskblock(178),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(50:13/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:9/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(0:9/5) swap-in finish Thread(95:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 25040 offset = 464 page no = 24 Thread(98:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(98:6/RU) 22 Page(24:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(98:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(98:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(24:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(0:9/5)
[PageFaultHandler][do_handlePageFault] set Page(24:6/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(24:6/5) do swap-in Thread(98:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1281),Device(0),Page(24:6/5),Diskblock(24),FileRead,Openfile(60:6/0),Thread(98:6/W1)) this Page(24:6/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:6/18)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(18) Page(16:6/18) Thread(97:6/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(61:6/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(61:6/18) do swap-in Thread(97:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1282),Device(0),Page(61:6/18),Diskblock(61),FileRead,Openfile(60:6/0),Thread(97:6/W1)) this Page(61:6/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 46892 offset = 812 page no = 45 Thread(102:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(102:12/RU) 21 Page(45:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(102:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(45:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(63:11/17)
[PageFaultHandler][do_handlePageFault] Frame(17) is dirty, do swap-out Thread(102:12/W0)
[PageFaultHandler][SwapOut] page Page(63:11/17) frame Frame(17)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 63
PageTableEntry][do_lock] iorb IORB(Id(1283),Device(0),Page(63:11/17),Diskblock(127),FileWrite,Openfile(132:12/0),Thread(102:12/W1)) this Page(63:11/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 11090 offset = 850 page no = 10 Thread(88:11/RU)
[PageTableEntry][do_unlock] this Page(10:9/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(10:9/3) swap-in finish Thread(94:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 55962 offset = 666 page no = 54 Thread(94:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(94:9/RU) 21 Page(54:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(94:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(94:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(54:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(63:6/6)
[PageFaultHandler][do_handlePageFault] Frame(6) is dirty, do swap-out Thread(94:9/W0)
[PageFaultHandler][SwapOut] page Page(63:6/6) frame Frame(6)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 63
PageTableEntry][do_lock] iorb IORB(Id(1284),Device(0),Page(63:6/6),Diskblock(255),FileWrite,Openfile(112:9/0),Thread(94:9/W1)) this Page(63:6/6)
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 21857 offset = 353 page no = 21 Thread(95:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(95:9/RU) 22 Page(21:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(95:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(95:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(21:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(26:9/11)
[PageFaultHandler][do_handlePageFault] set Page(21:9/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(21:9/11) do swap-in Thread(95:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1285),Device(0),Page(21:9/11),Diskblock(213),FileRead,Openfile(112:9/0),Thread(95:9/W1)) this Page(21:9/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(36:9/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(36:9/22) swap-in finish Thread(90:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 198009/250000[MMU][do_refer] address = 8795 offset = 603 page no = 8 Thread(90:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(90:9/RU) 22 Page(8:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(90:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(90:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(8:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(34:9/14)
[PageFaultHandler][do_handlePageFault] Frame(14) is dirty, do swap-out Thread(90:9/W0)
[PageFaultHandler][SwapOut] page Page(34:9/14) frame Frame(14)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 34
PageTableEntry][do_lock] iorb IORB(Id(1286),Device(0),Page(34:9/14),Diskblock(226),FileWrite,Openfile(112:9/0),Thread(90:9/W1)) this Page(34:9/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(48:6/16)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(16) Page(48:6/16) Thread(106:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(49:9/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(49:9/16) do swap-in Thread(106:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1287),Device(0),Page(49:9/16),Diskblock(241),FileRead,Openfile(112:9/0),Thread(106:9/W1)) this Page(49:9/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(10:11/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(10:11/4) swap-in finish Thread(96:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(50:13/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(50:13/28) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 54640 offset = 368 page no = 53 Thread(96:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(96:11/RU) 21 Page(53:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(96:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(96:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(53:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(10:11/4)
[PageFaultHandler][do_handlePageFault] Frame(4) is dirty, do swap-out Thread(96:11/W0)
[PageFaultHandler][SwapOut] page Page(10:11/4) frame Frame(4)file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 10
PageTableEntry][do_lock] iorb IORB(Id(1288),Device(0),Page(10:11/4),Diskblock(330),FileWrite,Openfile(122:11/0),Thread(96:11/W1)) this Page(10:11/4)
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(24:6/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(24:6/5) swap-in finish Thread(98:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(61:6/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(61:6/18) swap-in finish Thread(97:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(63:11/17)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(17) Page(63:11/17) Thread(102:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(45:12/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(45:12/17) do swap-in Thread(102:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1289),Device(0),Page(45:12/17),Diskblock(109),FileRead,Openfile(132:12/0),Thread(102:12/W1)) this Page(45:12/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 28611 offset = 963 page no = 27 Thread(97:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(97:6/RU) 22 Page(27:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(97:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(97:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(27:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(50:13/28)
[PageFaultHandler][do_handlePageFault] set Page(27:6/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(27:6/28) do swap-in Thread(97:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1290),Device(0),Page(27:6/28),Diskblock(27),FileRead,Openfile(60:6/0),Thread(97:6/W1)) this Page(27:6/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 13907 offset = 595 page no = 13 Thread(88:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(88:11/RU) 21 Page(13:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(88:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(88:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(13:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(60:11/20)
[PageFaultHandler][do_handlePageFault] Frame(20) is dirty, do swap-out Thread(88:11/W0)
[PageFaultHandler][SwapOut] page Page(60:11/20) frame Frame(20)file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 60
PageTableEntry][do_lock] iorb IORB(Id(1291),Device(0),Page(60:11/20),Diskblock(380),FileWrite,Openfile(122:11/0),Thread(88:11/W1)) this Page(60:11/20)
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 199005/250000[PageTableEntry][do_unlock] this Page(63:6/6)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(6) Page(63:6/6) Thread(94:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(54:9/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(54:9/6) do swap-in Thread(94:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1292),Device(0),Page(54:9/6),Diskblock(246),FileRead,Openfile(112:9/0),Thread(94:9/W1)) this Page(54:9/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 31111 offset = 391 page no = 30 Thread(98:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(98:6/RU) 22 Page(30:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(98:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(98:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(30:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(0:11/8)
[PageFaultHandler][do_handlePageFault] set Page(30:6/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(30:6/8) do swap-in Thread(98:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1293),Device(0),Page(30:6/8),Diskblock(30),FileRead,Openfile(60:6/0),Thread(98:6/W1)) this Page(30:6/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(21:9/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(21:9/11) swap-in finish Thread(95:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(34:9/14)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(14) Page(34:9/14) Thread(90:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(8:9/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(8:9/14) do swap-in Thread(90:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1294),Device(0),Page(8:9/14),Diskblock(200),FileRead,Openfile(112:9/0),Thread(90:9/W1)) this Page(8:9/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(49:9/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(49:9/16) swap-in finish Thread(106:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 62019 offset = 579 page no = 60 Thread(95:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(95:9/RU) 21 Page(60:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(95:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(95:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(60:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(49:9/16)
[PageFaultHandler][do_handlePageFault] Frame(16) is dirty, do swap-out Thread(95:9/W0)
[PageFaultHandler][SwapOut] page Page(49:9/16) frame Frame(16)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 49
PageTableEntry][do_lock] iorb IORB(Id(1295),Device(0),Page(49:9/16),Diskblock(241),FileWrite,Openfile(112:9/0),Thread(95:9/W1)) this Page(49:9/16)
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 19381 offset = 949 page no = 18 Thread(106:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(106:9/RU) 21 Page(18:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(106:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(106:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(18:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(49:13/9)
[PageFaultHandler][do_handlePageFault] set Page(18:9/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(18:9/9) do swap-in Thread(106:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1296),Device(0),Page(18:9/9),Diskblock(210),FileRead,Openfile(112:9/0),Thread(106:9/W1)) this Page(18:9/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 23172 offset = 644 page no = 22 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 22 Page(22:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(22:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(54:11/25)
[PageFaultHandler][do_handlePageFault] Frame(25) is dirty, do swap-out Thread(104:13/W0)
[PageFaultHandler][SwapOut] page Page(54:11/25) frame Frame(25)file Openfile(134:13/0)
[PageFaultHandler][SwapOut] block no 54
PageTableEntry][do_lock] iorb IORB(Id(1297),Device(0),Page(54:11/25),Diskblock(182),FileWrite,Openfile(134:13/0),Thread(104:13/W1)) this Page(54:11/25)
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(10:11/4)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(4) Page(10:11/4) Thread(96:11/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(53:11/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(53:11/4) do swap-in Thread(96:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1298),Device(0),Page(53:11/4),Diskblock(373),FileRead,Openfile(122:11/0),Thread(96:11/W1)) this Page(53:11/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(45:12/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(45:12/17) swap-in finish Thread(102:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageCleanDaemon][unleash] osp.Memory.PageCleanDaemon@1bf99cf5 execute time 200000
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(23)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(15)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(24)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(2)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(22)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(21)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(23)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(23) Page(6:6/23) isDirty true
[PageFaultHandler][SwapOut] file Openfile(60:6/0)
[PageFaultHandler][SwapOut] block no 6
PageTableEntry][do_lock] iorb IORB(Id(1299),Device(0),Page(6:6/23),Diskblock(6),FileWrite,Openfile(60:6/0),Thread(107:0/W1)) this Page(6:6/23)
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 200020/250000[PageTableEntry][do_unlock] this Page(27:6/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(27:6/28) swap-in finish Thread(97:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 33426 offset = 658 page no = 32 Thread(97:6/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(97:6/RU) 21 Page(32:6/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(97:6/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(97:6/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(32:6/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(6/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(41:6/10)
[PageFaultHandler][do_handlePageFault] set Page(32:6/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(32:6/10) do swap-in Thread(97:6/W0)
PageTableEntry][do_lock] iorb IORB(Id(1300),Device(0),Page(32:6/10),Diskblock(32),FileRead,Openfile(60:6/0),Thread(97:6/W1)) this Page(32:6/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(60:11/20)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(20) Page(60:11/20) Thread(88:11/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(13:11/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(13:11/20) do swap-in Thread(88:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1301),Device(0),Page(13:11/20),Diskblock(333),FileRead,Openfile(122:11/0),Thread(88:11/W1)) this Page(13:11/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(54:9/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(54:9/6) swap-in finish Thread(94:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 2784 offset = 736 page no = 2 Thread(94:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(94:9/RU) 22 Page(2:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(94:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(94:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(2:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(10:6/1)
[PageFaultHandler][do_handlePageFault] set Page(2:9/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(2:9/1) do swap-in Thread(94:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1302),Device(0),Page(2:9/1),Diskblock(194),FileRead,Openfile(112:9/0),Thread(94:9/W1)) this Page(2:9/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(30:6/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(30:6/8) swap-in finish Thread(98:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 201013/250000[PageTableEntry][do_unlock] this Page(8:9/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(8:9/14) swap-in finish Thread(90:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 36841 offset = 1001 page no = 35 Thread(90:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(90:9/RU) 21 Page(35:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(90:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(90:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(35:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(30:6/8)
[PageFaultHandler][do_handlePageFault] Frame(8) is dirty, do swap-out Thread(90:9/W0)
[PageFaultHandler][SwapOut] page Page(30:6/8) frame Frame(8)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 30
PageTableEntry][do_lock] iorb IORB(Id(1303),Device(0),Page(30:6/8),Diskblock(222),FileWrite,Openfile(112:9/0),Thread(90:9/W1)) this Page(30:6/8)
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(49:9/16)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(16) Page(49:9/16) Thread(95:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(60:9/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(60:9/16) do swap-in Thread(95:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1304),Device(0),Page(60:9/16),Diskblock(252),FileRead,Openfile(112:9/0),Thread(95:9/W1)) this Page(60:9/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(18:9/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(18:9/9) swap-in finish Thread(106:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(54:11/25)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(25) Page(54:11/25) Thread(104:13/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(22:13/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(22:13/25) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1305),Device(0),Page(22:13/25),Diskblock(150),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(22:13/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(53:11/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(53:11/4) swap-in finish Thread(96:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 62856 offset = 392 page no = 61 Thread(96:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(96:11/RU) 21 Page(61:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(96:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(96:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(61:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(53:11/4)
[PageFaultHandler][do_handlePageFault] set Page(61:11/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(61:11/4) do swap-in Thread(96:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1306),Device(0),Page(61:11/4),Diskblock(381),FileRead,Openfile(122:11/0),Thread(96:11/W1)) this Page(61:11/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 202020/250000[MMU][do_refer] address = 38289 offset = 401 page no = 37 Thread(106:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(106:9/RU) 21 Page(37:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(106:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(106:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(37:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(40:11/0)
[PageFaultHandler][do_handlePageFault] set Page(37:9/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(37:9/0) do swap-in Thread(106:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1307),Device(0),Page(37:9/0),Diskblock(229),FileRead,Openfile(112:9/0),Thread(106:9/W1)) this Page(37:9/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(6:6/23)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(23) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(15)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(15) Page(26:12/15) isDirty true
[PageFaultHandler][SwapOut] file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 26
PageTableEntry][do_lock] iorb IORB(Id(1308),Device(0),Page(26:12/15),Diskblock(90),FileWrite,Openfile(132:12/0),Thread(107:0/W1)) this Page(26:12/15)
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(32:6/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(32:6/10) swap-in finish Thread(97:6/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTable][do_deallocateMemory] this Pagetable(Task(6/T))
[PageTable][do_deallocateMemory]  page_table_entry Page(4:6/7) frame_table_entry Frame(7)
[PageTable][do_deallocateMemory] owner_task Task(3/T)
[PageTable][do_deallocateMemory]  page_table_entry Page(6:6/23) frame_table_entry Frame(23)
[PageTable][do_deallocateMemory]  page_table_entry Page(24:6/5) frame_table_entry Frame(5)
[PageTable][do_deallocateMemory]  page_table_entry Page(27:6/28) frame_table_entry Frame(28)
[PageTable][do_deallocateMemory]  page_table_entry Page(30:6/8) frame_table_entry Frame(8)
[PageTable][do_deallocateMemory] owner_task Task(9/L)
[PageTable][do_deallocateMemory]  page_table_entry Page(32:6/10) frame_table_entry Frame(10)
[PageTable][do_deallocateMemory]  page_table_entry Page(38:6/12) frame_table_entry Frame(12)
[PageTable][do_deallocateMemory]  page_table_entry Page(39:6/24) frame_table_entry Frame(24)
[PageTable][do_deallocateMemory] owner_task Task(0/L)
[PageTable][do_deallocateMemory]  page_table_entry Page(61:6/18) frame_table_entry Frame(18)
[PageTableEntry][do_unlock] this Page(13:11/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(13:11/20) swap-in finish Thread(88:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(2:9/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(2:9/1) swap-in finish Thread(94:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(1309),Device(2),Page(2:9/1),Diskblock(8),FileRead,Openfile(142:9/2),Thread(94:9/W0)) this Page(2:9/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 9890 offset = 674 page no = 9 Thread(88:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(88:11/RU) 22 Page(9:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(88:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(88:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(7) for Page(9:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(7) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] set Page(9:11/null) and Frame(7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(9:11/7) do swap-in Thread(88:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1310),Device(0),Page(9:11/7),Diskblock(329),FileRead,Openfile(122:11/0),Thread(88:11/W1)) this Page(9:11/7)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(30:6/8)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(8) Page(30:6/8) Thread(90:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(35:9/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(35:9/8) do swap-in Thread(90:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1311),Device(0),Page(35:9/8),Diskblock(227),FileRead,Openfile(112:9/0),Thread(90:9/W1)) this Page(35:9/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 203105/250000[PageTableEntry][do_unlock] this Page(60:9/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(60:9/16) swap-in finish Thread(95:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(22:13/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(22:13/25) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 7289 offset = 121 page no = 7 Thread(109:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(109:9/RU) 22 Page(7:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(109:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(109:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(7:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(22:13/25)
[PageFaultHandler][do_handlePageFault] Frame(25) is dirty, do swap-out Thread(109:9/W0)
[PageFaultHandler][SwapOut] page Page(22:13/25) frame Frame(25)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 22
PageTableEntry][do_lock] iorb IORB(Id(1312),Device(0),Page(22:13/25),Diskblock(214),FileWrite,Openfile(112:9/0),Thread(109:9/W1)) this Page(22:13/25)
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(61:11/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(61:11/4) swap-in finish Thread(96:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 14325 offset = 1013 page no = 13 Thread(110:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(110:13/RU) 22 Page(13:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(110:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(110:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(13:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(61:11/4)
[PageFaultHandler][do_handlePageFault] set Page(13:13/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(13:13/4) do swap-in Thread(110:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1313),Device(0),Page(13:13/4),Diskblock(141),FileRead,Openfile(134:13/0),Thread(110:13/W1)) this Page(13:13/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(2:9/1)
[PageTableEntry][do_unlock] this Page(37:9/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(37:9/0) swap-in finish Thread(106:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(26:12/15)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(15) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(24)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame page is null Frame(24) isDirty false
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(2)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(2) Page(39:11/2) isDirty true
[PageFaultHandler][SwapOut] file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 39
PageTableEntry][do_lock] iorb IORB(Id(1314),Device(0),Page(39:11/2),Diskblock(359),FileWrite,Openfile(122:11/0),Thread(107:0/W1)) this Page(39:11/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 10578 offset = 338 page no = 10 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 21 Page(10:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(10:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(26:12/15)
[PageFaultHandler][do_handlePageFault] set Page(10:13/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(10:13/15) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1315),Device(0),Page(10:13/15),Diskblock(138),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(10:13/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 64493 offset = 1005 page no = 62 Thread(106:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(106:9/RU) 22 Page(62:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(106:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(106:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(62:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(39:9/19)
[PageFaultHandler][do_handlePageFault] set Page(62:9/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(62:9/19) do swap-in Thread(106:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1316),Device(0),Page(62:9/19),Diskblock(254),FileRead,Openfile(112:9/0),Thread(106:9/W1)) this Page(62:9/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 55977 offset = 681 page no = 54 Thread(96:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(96:11/RU) 22 Page(54:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(96:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(96:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(54:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(10:9/3)
[PageFaultHandler][do_handlePageFault] Frame(3) is dirty, do swap-out Thread(96:11/W0)
[PageFaultHandler][SwapOut] page Page(10:9/3) frame Frame(3)file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 10
PageTableEntry][do_lock] iorb IORB(Id(1317),Device(0),Page(10:9/3),Diskblock(330),FileWrite,Openfile(122:11/0),Thread(96:11/W1)) this Page(10:9/3)
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 204040/250000[MMU][do_refer] address = 54255 offset = 1007 page no = 52 Thread(111:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(111:9/RU) 22 Page(52:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(111:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(111:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(52:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] set Page(52:9/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(52:9/18) do swap-in Thread(111:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1318),Device(0),Page(52:9/18),Diskblock(244),FileRead,Openfile(112:9/0),Thread(111:9/W1)) this Page(52:9/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 15147 offset = 811 page no = 14 Thread(94:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(94:9/RU) 21 Page(14:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(94:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(94:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(14:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(54:9/6)
[PageFaultHandler][do_handlePageFault] set Page(14:9/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(14:9/6) do swap-in Thread(94:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1319),Device(0),Page(14:9/6),Diskblock(206),FileRead,Openfile(112:9/0),Thread(94:9/W1)) this Page(14:9/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(9:11/7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(9:11/7) swap-in finish Thread(88:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 25379 offset = 803 page no = 24 Thread(95:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(95:9/RU) 22 Page(24:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(95:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(95:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(24:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(45:12/17)
[PageFaultHandler][do_handlePageFault] set Page(24:9/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(24:9/17) do swap-in Thread(95:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1320),Device(0),Page(24:9/17),Diskblock(216),FileRead,Openfile(112:9/0),Thread(95:9/W1)) this Page(24:9/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(35:9/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(35:9/8) swap-in finish Thread(90:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 34373 offset = 581 page no = 33 Thread(112:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(112:9/RU) 22 Page(33:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(112:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(112:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(33:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(8:9/14)
[PageFaultHandler][do_handlePageFault] Frame(14) is dirty, do swap-out Thread(112:9/W0)
[PageFaultHandler][SwapOut] page Page(8:9/14) frame Frame(14)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 8
PageTableEntry][do_lock] iorb IORB(Id(1321),Device(0),Page(8:9/14),Diskblock(200),FileWrite,Openfile(112:9/0),Thread(112:9/W1)) this Page(8:9/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 26377 offset = 777 page no = 25 Thread(90:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(90:9/RU) 21 Page(25:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(90:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(90:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(25:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] set Page(25:9/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(25:9/5) do swap-in Thread(90:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1322),Device(0),Page(25:9/5),Diskblock(217),FileRead,Openfile(112:9/0),Thread(90:9/W1)) this Page(25:9/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(22:13/25)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(25) Page(22:13/25) Thread(109:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(7:9/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(7:9/25) do swap-in Thread(109:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1323),Device(0),Page(7:9/25),Diskblock(199),FileRead,Openfile(112:9/0),Thread(109:9/W1)) this Page(7:9/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(13:13/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(13:13/4) swap-in finish Thread(110:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(1324),Device(2),Page(9:11/7),Diskblock(8),FileRead,Openfile(142:9/2),Thread(113:11/W0)) this Page(9:11/7)
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 34993 offset = 177 page no = 34 Thread(88:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(88:11/RU) 21 Page(34:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(88:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(88:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(34:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(13:13/4)
[PageFaultHandler][do_handlePageFault] Frame(4) is dirty, do swap-out Thread(88:11/W0)
[PageFaultHandler][SwapOut] page Page(13:13/4) frame Frame(4)file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 13
PageTableEntry][do_lock] iorb IORB(Id(1325),Device(0),Page(13:13/4),Diskblock(333),FileWrite,Openfile(122:11/0),Thread(88:11/W1)) this Page(13:13/4)
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(39:11/2)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(2) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(22)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(22) Page(36:9/22) isDirty true
[PageFaultHandler][SwapOut] file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 36
PageTableEntry][do_lock] iorb IORB(Id(1326),Device(0),Page(36:9/22),Diskblock(228),FileWrite,Openfile(112:9/0),Thread(107:0/W1)) this Page(36:9/22)
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(9:11/7)
[PageTableEntry][do_unlock] this Page(10:13/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(10:13/15) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 205055/250000[PageTableEntry][do_unlock] this Page(62:9/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(62:9/19) swap-in finish Thread(106:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 38223 offset = 335 page no = 37 Thread(113:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(113:11/RU) 21 Page(37:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(113:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(113:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(37:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(10:13/15)
[PageFaultHandler][do_handlePageFault] set Page(37:11/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(37:11/15) do swap-in Thread(113:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1327),Device(0),Page(37:11/15),Diskblock(357),FileRead,Openfile(122:11/0),Thread(113:11/W1)) this Page(37:11/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(10:9/3)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(3) Page(10:9/3) Thread(96:11/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(54:11/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(54:11/3) do swap-in Thread(96:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1328),Device(0),Page(54:11/3),Diskblock(374),FileRead,Openfile(122:11/0),Thread(96:11/W1)) this Page(54:11/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 7165 offset = 1021 page no = 6 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 21 Page(6:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(6:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(62:9/19)
[PageFaultHandler][do_handlePageFault] Frame(19) is dirty, do swap-out Thread(104:13/W0)
[PageFaultHandler][SwapOut] page Page(62:9/19) frame Frame(19)file Openfile(134:13/0)
[PageFaultHandler][SwapOut] block no 62
PageTableEntry][do_lock] iorb IORB(Id(1329),Device(0),Page(62:9/19),Diskblock(190),FileWrite,Openfile(134:13/0),Thread(104:13/W1)) this Page(62:9/19)
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(52:9/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(52:9/18) swap-in finish Thread(111:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(14:9/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(14:9/6) swap-in finish Thread(94:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 3263 offset = 191 page no = 3 Thread(111:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(111:9/RU) 21 Page(3:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(111:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(111:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(3:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(14:9/6)
[PageFaultHandler][do_handlePageFault] set Page(3:9/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(3:9/6) do swap-in Thread(111:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1330),Device(0),Page(3:9/6),Diskblock(195),FileRead,Openfile(112:9/0),Thread(111:9/W1)) this Page(3:9/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(24:9/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(24:9/17) swap-in finish Thread(95:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 206045/250000[PageTableEntry][do_unlock] this Page(8:9/14)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(14) Page(8:9/14) Thread(112:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(33:9/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(33:9/14) do swap-in Thread(112:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1331),Device(0),Page(33:9/14),Diskblock(225),FileRead,Openfile(112:9/0),Thread(112:9/W1)) this Page(33:9/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 29121 offset = 449 page no = 28 Thread(95:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(95:9/RU) 21 Page(28:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(95:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(95:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(28:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(24:9/17)
[PageFaultHandler][do_handlePageFault] Frame(17) is dirty, do swap-out Thread(95:9/W0)
[PageFaultHandler][SwapOut] page Page(24:9/17) frame Frame(17)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 24
PageTableEntry][do_lock] iorb IORB(Id(1332),Device(0),Page(24:9/17),Diskblock(216),FileWrite,Openfile(112:9/0),Thread(95:9/W1)) this Page(24:9/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(25:9/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(25:9/5) swap-in finish Thread(90:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(7:9/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(7:9/25) swap-in finish Thread(109:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(1333),Device(2),Page(2:9/1),Diskblock(11),FileRead,Openfile(142:9/2),Thread(90:9/W0)) this Page(2:9/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(13:13/4)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(4) Page(13:13/4) Thread(88:11/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(34:11/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(34:11/4) do swap-in Thread(88:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1334),Device(0),Page(34:11/4),Diskblock(354),FileRead,Openfile(122:11/0),Thread(88:11/W1)) this Page(34:11/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 12118 offset = 854 page no = 11 Thread(106:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(106:9/RU) 21 Page(11:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(106:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(106:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(11:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(25:9/5)
[PageFaultHandler][do_handlePageFault] set Page(11:9/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(11:9/5) do swap-in Thread(106:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1335),Device(0),Page(11:9/5),Diskblock(203),FileRead,Openfile(112:9/0),Thread(106:9/W1)) this Page(11:9/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 57844 offset = 500 page no = 56 Thread(110:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(110:13/RU) 21 Page(56:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(110:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(110:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(56:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] set Page(56:13/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(56:13/12) do swap-in Thread(110:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1336),Device(0),Page(56:13/12),Diskblock(184),FileRead,Openfile(134:13/0),Thread(110:13/W1)) this Page(56:13/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(36:9/22)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(22) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(21)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(21) Page(1:12/21) isDirty true
[PageFaultHandler][SwapOut] file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 1
PageTableEntry][do_lock] iorb IORB(Id(1337),Device(0),Page(1:12/21),Diskblock(65),FileWrite,Openfile(132:12/0),Thread(107:0/W1)) this Page(1:12/21)
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(2:9/1)
Simulation progress: 207060/250000[MMU][do_refer] address = 64153 offset = 665 page no = 62 Thread(90:9/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(37:11/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(37:11/15) swap-in finish Thread(113:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(54:11/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(54:11/3) swap-in finish Thread(96:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(62:9/19)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(19) Page(62:9/19) Thread(104:13/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(6:13/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(6:13/19) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1338),Device(0),Page(6:13/19),Diskblock(134),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(6:13/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 39803 offset = 891 page no = 38 Thread(90:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(90:9/RU) 21 Page(38:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(90:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(90:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(38:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(2:9/1)
[PageFaultHandler][do_handlePageFault] Frame(1) is dirty, do swap-out Thread(90:9/W0)
[PageFaultHandler][SwapOut] page Page(2:9/1) frame Frame(1)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 2
PageTableEntry][do_lock] iorb IORB(Id(1339),Device(0),Page(2:9/1),Diskblock(194),FileWrite,Openfile(112:9/0),Thread(90:9/W1)) this Page(2:9/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(1340),Device(2),Page(9:11/7),Diskblock(12),FileRead,Openfile(142:9/2),Thread(113:11/W0)) this Page(9:11/7)
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 2605 offset = 557 page no = 2 Thread(109:9/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(3:9/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(3:9/6) swap-in finish Thread(111:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 1674 offset = 650 page no = 1 Thread(102:12/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(33:9/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(33:9/14) swap-in finish Thread(112:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(24:9/17)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(17) Page(24:9/17) Thread(95:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(28:9/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(28:9/17) do swap-in Thread(95:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1341),Device(0),Page(28:9/17),Diskblock(220),FileRead,Openfile(112:9/0),Thread(95:9/W1)) this Page(28:9/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 208034/250000[PageTableEntry][do_unlock] this Page(9:11/7)
[MMU][do_refer] address = 32698 offset = 954 page no = 31 Thread(102:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(102:12/RU) 21 Page(31:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(102:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(31:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(3:9/6)
[PageFaultHandler][do_handlePageFault] set Page(31:12/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(31:12/6) do swap-in Thread(102:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1342),Device(0),Page(31:12/6),Diskblock(95),FileRead,Openfile(132:12/0),Thread(102:12/W1)) this Page(31:12/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(34:11/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(34:11/4) swap-in finish Thread(88:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 61110 offset = 694 page no = 59 Thread(109:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(109:9/RU) 21 Page(59:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(109:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(109:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(59:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] set Page(59:9/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(59:9/23) do swap-in Thread(109:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1343),Device(0),Page(59:9/23),Diskblock(251),FileRead,Openfile(112:9/0),Thread(109:9/W1)) this Page(59:9/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(11:9/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(11:9/5) swap-in finish Thread(106:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 41687 offset = 727 page no = 40 Thread(96:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(96:11/RU) 22 Page(40:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(96:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(96:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(40:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(11:9/5)
[PageFaultHandler][do_handlePageFault] set Page(40:11/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(40:11/5) do swap-in Thread(96:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1344),Device(0),Page(40:11/5),Diskblock(360),FileRead,Openfile(122:11/0),Thread(96:11/W1)) this Page(40:11/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(1345),Device(2),Page(7:9/25),Diskblock(13),FileWrite,Openfile(142:9/2),Thread(112:9/W0)) this Page(7:9/25)
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(56:13/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(56:13/12) swap-in finish Thread(110:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(1:12/21)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(21) finish
[MMU][do_refer] address = 26233 offset = 633 page no = 25 Thread(111:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(111:9/RU) 22 Page(25:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(111:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(111:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(25:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(56:13/12)
[PageFaultHandler][do_handlePageFault] set Page(25:9/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(25:9/12) do swap-in Thread(111:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1346),Device(0),Page(25:9/12),Diskblock(217),FileRead,Openfile(112:9/0),Thread(111:9/W1)) this Page(25:9/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(6:13/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(6:13/19) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(7:9/25)
PageTableEntry][do_lock] iorb IORB(Id(1347),Device(2),Page(0:12/27),Diskblock(8),FileRead,Openfile(142:9/2),Thread(108:12/W0)) this Page(0:12/27)
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(2:9/1)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(1) Page(2:9/1) Thread(90:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(38:9/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(38:9/1) do swap-in Thread(90:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1348),Device(0),Page(38:9/1),Diskblock(230),FileRead,Openfile(112:9/0),Thread(90:9/W1)) this Page(38:9/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 14656 offset = 320 page no = 14 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 21 Page(14:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(14:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(6:13/19)
[PageFaultHandler][do_handlePageFault] set Page(14:13/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(14:13/19) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1349),Device(0),Page(14:13/19),Diskblock(142),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(14:13/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 209020/250000[PageTableEntry][do_unlock] this Page(28:9/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(28:9/17) swap-in finish Thread(95:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(31:12/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(31:12/6) swap-in finish Thread(102:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 13566 offset = 254 page no = 13 Thread(110:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(110:13/RU) 21 Page(13:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(110:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(110:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(13:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(31:12/6)
[PageFaultHandler][do_handlePageFault] set Page(13:13/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(13:13/6) do swap-in Thread(110:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1350),Device(0),Page(13:13/6),Diskblock(141),FileRead,Openfile(134:13/0),Thread(110:13/W1)) this Page(13:13/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 41760 offset = 800 page no = 40 Thread(88:11/RU)
[MMU][do_refer] address = 63677 offset = 189 page no = 62 Thread(112:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(112:9/RU) 22 Page(62:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(112:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(112:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(62:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(37:9/0)
[PageFaultHandler][do_handlePageFault] set Page(62:9/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(62:9/0) do swap-in Thread(112:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1351),Device(0),Page(62:9/0),Diskblock(254),FileRead,Openfile(112:9/0),Thread(112:9/W1)) this Page(62:9/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 54130 offset = 882 page no = 52 Thread(102:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(102:12/RU) 22 Page(52:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(102:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(52:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(9:9/29)
[PageFaultHandler][do_handlePageFault] set Page(52:12/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(52:12/29) do swap-in Thread(102:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1352),Device(0),Page(52:12/29),Diskblock(116),FileRead,Openfile(132:12/0),Thread(102:12/W1)) this Page(52:12/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(59:9/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(59:9/23) swap-in finish Thread(109:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(0:12/27)
PageTableEntry][do_lock] iorb IORB(Id(1353),Device(2),Page(0:12/27),Diskblock(6),FileWrite,Openfile(142:9/2),Thread(108:12/W0)) this Page(0:12/27)
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 50996 offset = 820 page no = 49 Thread(109:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(109:9/RU) 21 Page(49:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(109:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(109:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(49:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(39:11/2)
[PageFaultHandler][do_handlePageFault] set Page(49:9/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(49:9/2) do swap-in Thread(109:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1354),Device(0),Page(49:9/2),Diskblock(241),FileRead,Openfile(112:9/0),Thread(109:9/W1)) this Page(49:9/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(40:11/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(40:11/5) swap-in finish Thread(96:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(25:9/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(25:9/12) swap-in finish Thread(111:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 210005/250000[PageTableEntry][do_unlock] this Page(38:9/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(38:9/1) swap-in finish Thread(90:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(0:12/27)
[PageTableEntry][do_unlock] this Page(14:13/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(14:13/19) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(13:13/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(13:13/6) swap-in finish Thread(110:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 52704 offset = 480 page no = 51 Thread(108:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(108:12/RU) 22 Page(51:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(108:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(108:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(51:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(13:13/6)
[PageFaultHandler][do_handlePageFault] set Page(51:12/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(51:12/6) do swap-in Thread(108:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1355),Device(0),Page(51:12/6),Diskblock(115),FileRead,Openfile(132:12/0),Thread(108:12/W1)) this Page(51:12/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 44052 offset = 20 page no = 43 Thread(111:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(111:9/RU) 22 Page(43:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(111:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(111:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(43:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(35:9/8)
[PageFaultHandler][do_handlePageFault] set Page(43:9/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(43:9/8) do swap-in Thread(111:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1356),Device(0),Page(43:9/8),Diskblock(235),FileRead,Openfile(112:9/0),Thread(111:9/W1)) this Page(43:9/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(62:9/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(62:9/0) swap-in finish Thread(112:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 27882 offset = 234 page no = 27 Thread(88:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(88:11/RU) 22 Page(27:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(88:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(88:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(27:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(62:9/0)
[PageFaultHandler][do_handlePageFault] Frame(0) is dirty, do swap-out Thread(88:11/W0)
[PageFaultHandler][SwapOut] page Page(62:9/0) frame Frame(0)file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 62
PageTableEntry][do_lock] iorb IORB(Id(1357),Device(0),Page(62:9/0),Diskblock(382),FileWrite,Openfile(122:11/0),Thread(88:11/W1)) this Page(62:9/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(52:12/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(52:12/29) swap-in finish Thread(102:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(49:9/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(49:9/2) swap-in finish Thread(109:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(51:12/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(51:12/6) swap-in finish Thread(108:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 16357 offset = 997 page no = 15 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 22 Page(15:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(15:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(49:9/2)
[PageFaultHandler][do_handlePageFault] set Page(15:13/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(15:13/2) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1358),Device(0),Page(15:13/2),Diskblock(143),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(15:13/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 211005/250000[MMU][do_refer] address = 16593 offset = 209 page no = 16 Thread(102:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(102:12/RU) 21 Page(16:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(102:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(16:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(36:9/22)
[PageFaultHandler][do_handlePageFault] set Page(16:12/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(16:12/22) do swap-in Thread(102:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1359),Device(0),Page(16:12/22),Diskblock(80),FileRead,Openfile(132:12/0),Thread(102:12/W1)) this Page(16:12/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(43:9/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(43:9/8) swap-in finish Thread(111:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 13904 offset = 592 page no = 13 Thread(109:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(109:9/RU) 22 Page(13:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(109:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(109:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(13:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(43:9/8)
[PageFaultHandler][do_handlePageFault] Frame(8) is dirty, do swap-out Thread(109:9/W0)
[PageFaultHandler][SwapOut] page Page(43:9/8) frame Frame(8)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 43
PageTableEntry][do_lock] iorb IORB(Id(1360),Device(0),Page(43:9/8),Diskblock(235),FileWrite,Openfile(112:9/0),Thread(109:9/W1)) this Page(43:9/8)
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 14869 offset = 533 page no = 14 Thread(113:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(113:11/RU) 21 Page(14:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(113:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(113:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(14:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(1:12/21)
[PageFaultHandler][do_handlePageFault] set Page(14:11/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(14:11/21) do swap-in Thread(113:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1361),Device(0),Page(14:11/21),Diskblock(334),FileRead,Openfile(122:11/0),Thread(113:11/W1)) this Page(14:11/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(62:9/0)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(0) Page(62:9/0) Thread(88:11/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(27:11/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(27:11/0) do swap-in Thread(88:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1362),Device(0),Page(27:11/0),Diskblock(347),FileRead,Openfile(122:11/0),Thread(88:11/W1)) this Page(27:11/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(15:13/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(15:13/2) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(16:12/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(16:12/22) swap-in finish Thread(102:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(43:9/8)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(8) Page(43:9/8) Thread(109:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(13:9/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(13:9/8) do swap-in Thread(109:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1363),Device(0),Page(13:9/8),Diskblock(205),FileRead,Openfile(112:9/0),Thread(109:9/W1)) this Page(13:9/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(1364),Device(1),Page(0:12/27),Diskblock(37),FileRead,Openfile(146:12/1),Thread(108:12/W0)) this Page(0:12/27)
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 212081/250000[PageTableEntry][do_unlock] this Page(0:12/27)
[MMU][do_refer] address = 30593 offset = 897 page no = 29 Thread(112:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(112:9/RU) 22 Page(29:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(112:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(112:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(29:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(21:9/11)
[PageFaultHandler][do_handlePageFault] Frame(11) is dirty, do swap-out Thread(112:9/W0)
[PageFaultHandler][SwapOut] page Page(21:9/11) frame Frame(11)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 21
PageTableEntry][do_lock] iorb IORB(Id(1365),Device(0),Page(21:9/11),Diskblock(213),FileWrite,Openfile(112:9/0),Thread(112:9/W1)) this Page(21:9/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(14:11/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(14:11/21) swap-in finish Thread(113:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(27:11/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(27:11/0) swap-in finish Thread(88:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(13:9/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(13:9/8) swap-in finish Thread(109:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 28646 offset = 998 page no = 27 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 21 Page(27:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(27:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(27:11/0)
[PageFaultHandler][do_handlePageFault] Frame(0) is dirty, do swap-out Thread(104:13/W0)
[PageFaultHandler][SwapOut] page Page(27:11/0) frame Frame(0)file Openfile(134:13/0)
[PageFaultHandler][SwapOut] block no 27
PageTableEntry][do_lock] iorb IORB(Id(1366),Device(0),Page(27:11/0),Diskblock(155),FileWrite,Openfile(134:13/0),Thread(104:13/W1)) this Page(27:11/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(21:9/11)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(11) Page(21:9/11) Thread(112:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(29:9/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(29:9/11) do swap-in Thread(112:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1367),Device(0),Page(29:9/11),Diskblock(221),FileRead,Openfile(112:9/0),Thread(112:9/W1)) this Page(29:9/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(27:11/0)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(0) Page(27:11/0) Thread(104:13/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(27:13/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(27:13/0) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1368),Device(0),Page(27:13/0),Diskblock(155),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(27:13/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(29:9/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(29:9/11) swap-in finish Thread(112:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 213005/250000[PageTableEntry][do_unlock] this Page(27:13/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(27:13/0) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 38799 offset = 911 page no = 37 Thread(108:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(108:12/RU) 21 Page(37:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(108:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(108:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(37:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(14:11/21)
[PageFaultHandler][do_handlePageFault] set Page(37:12/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(37:12/21) do swap-in Thread(108:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1369),Device(0),Page(37:12/21),Diskblock(101),FileRead,Openfile(132:12/0),Thread(108:12/W1)) this Page(37:12/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(37:12/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(37:12/21) swap-in finish Thread(108:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 10240 offset = 0 page no = 10 Thread(102:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(102:12/RU) 22 Page(10:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(102:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(10:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] set Page(10:12/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(10:12/10) do swap-in Thread(102:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1370),Device(0),Page(10:12/10),Diskblock(74),FileRead,Openfile(132:12/0),Thread(102:12/W1)) this Page(10:12/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(10:12/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(10:12/10) swap-in finish Thread(102:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 21820 offset = 316 page no = 21 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 21 Page(21:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(21:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(37:11/15)
[PageFaultHandler][do_handlePageFault] set Page(21:13/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(21:13/15) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1371),Device(0),Page(21:13/15),Diskblock(149),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(21:13/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 53433 offset = 185 page no = 52 Thread(108:12/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(21:13/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(21:13/15) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 45366 offset = 310 page no = 44 Thread(113:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(113:11/RU) 22 Page(44:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(113:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(113:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(44:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] set Page(44:11/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(44:11/28) do swap-in Thread(113:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1372),Device(0),Page(44:11/28),Diskblock(364),FileRead,Openfile(122:11/0),Thread(113:11/W1)) this Page(44:11/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 214060/250000[MMU][do_refer] address = 59546 offset = 154 page no = 58 Thread(111:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(111:9/RU) 22 Page(58:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(111:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(111:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(58:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(33:9/14)
[PageFaultHandler][do_handlePageFault] Frame(14) is dirty, do swap-out Thread(111:9/W0)
[PageFaultHandler][SwapOut] page Page(33:9/14) frame Frame(14)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 33
PageTableEntry][do_lock] iorb IORB(Id(1373),Device(0),Page(33:9/14),Diskblock(225),FileWrite,Openfile(112:9/0),Thread(111:9/W1)) this Page(33:9/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 4406 offset = 310 page no = 4 Thread(88:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(88:11/RU) 22 Page(4:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(88:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(88:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(4:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(13:11/20)
[PageFaultHandler][do_handlePageFault] set Page(4:11/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(4:11/20) do swap-in Thread(88:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1374),Device(0),Page(4:11/20),Diskblock(324),FileRead,Openfile(122:11/0),Thread(88:11/W1)) this Page(4:11/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(44:11/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(44:11/28) swap-in finish Thread(113:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(33:9/14)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(14) Page(33:9/14) Thread(111:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(58:9/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(58:9/14) do swap-in Thread(111:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1375),Device(0),Page(58:9/14),Diskblock(250),FileRead,Openfile(112:9/0),Thread(111:9/W1)) this Page(58:9/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 37614 offset = 750 page no = 36 Thread(108:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(108:12/RU) 22 Page(36:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(108:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(108:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(36:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(34:11/4)
[PageFaultHandler][do_handlePageFault] set Page(36:12/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(36:12/4) do swap-in Thread(108:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1376),Device(0),Page(36:12/4),Diskblock(100),FileRead,Openfile(132:12/0),Thread(108:12/W1)) this Page(36:12/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 11033 offset = 793 page no = 10 Thread(113:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(113:11/RU) 21 Page(10:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(113:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(113:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(10:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(59:9/23)
[PageFaultHandler][do_handlePageFault] set Page(10:11/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(10:11/23) do swap-in Thread(113:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1377),Device(0),Page(10:11/23),Diskblock(330),FileRead,Openfile(122:11/0),Thread(113:11/W1)) this Page(10:11/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 49902 offset = 750 page no = 48 Thread(90:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(90:9/RU) 21 Page(48:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(90:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(90:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(48:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(0:12/27)
[PageFaultHandler][do_handlePageFault] Frame(27) is dirty, do swap-out Thread(90:9/W0)
[PageFaultHandler][SwapOut] page Page(0:12/27) frame Frame(27)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 0
PageTableEntry][do_lock] iorb IORB(Id(1378),Device(0),Page(0:12/27),Diskblock(192),FileWrite,Openfile(112:9/0),Thread(90:9/W1)) this Page(0:12/27)
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(4:11/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(4:11/20) swap-in finish Thread(88:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(58:9/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(58:9/14) swap-in finish Thread(111:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(36:12/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(36:12/4) swap-in finish Thread(108:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 24344 offset = 792 page no = 23 Thread(108:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(108:12/RU) 21 Page(23:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(108:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(108:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(23:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(58:9/14)
[PageFaultHandler][do_handlePageFault] Frame(14) is dirty, do swap-out Thread(108:12/W0)
[PageFaultHandler][SwapOut] page Page(58:9/14) frame Frame(14)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 58
PageTableEntry][do_lock] iorb IORB(Id(1379),Device(0),Page(58:9/14),Diskblock(122),FileWrite,Openfile(132:12/0),Thread(108:12/W1)) this Page(58:9/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 215038/250000[PageTableEntry][do_unlock] this Page(10:11/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(10:11/23) swap-in finish Thread(113:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(0:12/27)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(27) Page(0:12/27) Thread(90:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(48:9/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(48:9/27) do swap-in Thread(90:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1380),Device(0),Page(48:9/27),Diskblock(240),FileRead,Openfile(112:9/0),Thread(90:9/W1)) this Page(48:9/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(58:9/14)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(14) Page(58:9/14) Thread(108:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(23:12/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(23:12/14) do swap-in Thread(108:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1381),Device(0),Page(23:12/14),Diskblock(87),FileRead,Openfile(132:12/0),Thread(108:12/W1)) this Page(23:12/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 28133 offset = 485 page no = 27 Thread(113:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(113:11/RU) 22 Page(27:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(113:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(113:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(27:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(10:11/23)
[PageFaultHandler][do_handlePageFault] set Page(27:11/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(27:11/23) do swap-in Thread(113:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1382),Device(0),Page(27:11/23),Diskblock(347),FileRead,Openfile(122:11/0),Thread(113:11/W1)) this Page(27:11/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(48:9/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(48:9/27) swap-in finish Thread(90:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(23:12/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(23:12/14) swap-in finish Thread(108:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(1383),Device(1),Page(10:12/10),Diskblock(31),FileWrite,Openfile(148:12/1),Thread(108:12/W0)) this Page(10:12/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(10:12/10)
Simulation progress: 216020/250000[MMU][do_refer] address = 27093 offset = 469 page no = 26 Thread(108:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(108:12/RU) 21 Page(26:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(108:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(108:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(26:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(28:9/17)
[PageFaultHandler][do_handlePageFault] set Page(26:12/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(26:12/17) do swap-in Thread(108:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1384),Device(0),Page(26:12/17),Diskblock(90),FileRead,Openfile(132:12/0),Thread(108:12/W1)) this Page(26:12/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 47110 offset = 6 page no = 46 Thread(90:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(90:9/RU) 21 Page(46:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(90:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(90:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(46:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(40:11/5)
[PageFaultHandler][do_handlePageFault] Frame(5) is dirty, do swap-out Thread(90:9/W0)
[PageFaultHandler][SwapOut] page Page(40:11/5) frame Frame(5)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 40
PageTableEntry][do_lock] iorb IORB(Id(1385),Device(0),Page(40:11/5),Diskblock(232),FileWrite,Openfile(112:9/0),Thread(90:9/W1)) this Page(40:11/5)
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(27:11/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(27:11/23) swap-in finish Thread(113:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 48983 offset = 855 page no = 47 Thread(113:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(113:11/RU) 21 Page(47:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(113:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(113:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(23) for Page(47:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(23) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(27:11/23)
[PageFaultHandler][do_handlePageFault] Frame(23) is dirty, do swap-out Thread(113:11/W0)
[PageFaultHandler][SwapOut] page Page(27:11/23) frame Frame(23)file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 27
PageTableEntry][do_lock] iorb IORB(Id(1386),Device(0),Page(27:11/23),Diskblock(347),FileWrite,Openfile(122:11/0),Thread(113:11/W1)) this Page(27:11/23)
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(26:12/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(26:12/17) swap-in finish Thread(108:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 5932 offset = 812 page no = 5 Thread(108:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(108:12/RU) 22 Page(5:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(108:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(108:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(5:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(38:9/1)
[PageFaultHandler][do_handlePageFault] set Page(5:12/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(5:12/1) do swap-in Thread(108:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1387),Device(0),Page(5:12/1),Diskblock(69),FileRead,Openfile(132:12/0),Thread(108:12/W1)) this Page(5:12/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(40:11/5)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(5) Page(40:11/5) Thread(90:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(46:9/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(46:9/5) do swap-in Thread(90:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1388),Device(0),Page(46:9/5),Diskblock(238),FileRead,Openfile(112:9/0),Thread(90:9/W1)) this Page(46:9/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(27:11/23)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(23) Page(27:11/23) Thread(113:11/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(47:11/null) and Frame(23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(47:11/23) do swap-in Thread(113:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1389),Device(0),Page(47:11/23),Diskblock(367),FileRead,Openfile(122:11/0),Thread(113:11/W1)) this Page(47:11/23)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 217030/250000[PageTableEntry][do_unlock] this Page(5:12/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(5:12/1) swap-in finish Thread(108:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 55164 offset = 892 page no = 53 Thread(114:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(114:12/RU) 22 Page(53:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(114:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(114:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(53:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(52:12/29)
[PageFaultHandler][do_handlePageFault] Frame(29) is dirty, do swap-out Thread(114:12/W0)
[PageFaultHandler][SwapOut] page Page(52:12/29) frame Frame(29)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 52
PageTableEntry][do_lock] iorb IORB(Id(1390),Device(0),Page(52:12/29),Diskblock(116),FileWrite,Openfile(132:12/0),Thread(114:12/W1)) this Page(52:12/29)
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 51747 offset = 547 page no = 50 Thread(108:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(108:12/RU) 22 Page(50:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(108:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(108:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(7) for Page(50:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(7) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(9:11/7)
[PageFaultHandler][do_handlePageFault] Frame(7) is dirty, do swap-out Thread(108:12/W0)
[PageFaultHandler][SwapOut] page Page(9:11/7) frame Frame(7)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 9
PageTableEntry][do_lock] iorb IORB(Id(1391),Device(0),Page(9:11/7),Diskblock(73),FileWrite,Openfile(132:12/0),Thread(108:12/W1)) this Page(9:11/7)
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(46:9/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(46:9/5) swap-in finish Thread(90:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 48500 offset = 372 page no = 47 Thread(90:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(90:9/RU) 21 Page(47:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(90:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(90:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(47:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(14:13/19)
[PageFaultHandler][do_handlePageFault] set Page(47:9/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(47:9/19) do swap-in Thread(90:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1392),Device(0),Page(47:9/19),Diskblock(239),FileRead,Openfile(112:9/0),Thread(90:9/W1)) this Page(47:9/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 57140 offset = 820 page no = 55 Thread(115:14/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(115:14/RU) 21 Page(55:14/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(115:14/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(115:14/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(55:14/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(14/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(25:9/12)
[PageFaultHandler][do_handlePageFault] Frame(12) is dirty, do swap-out Thread(115:14/W0)
[PageFaultHandler][SwapOut] page Page(25:9/12) frame Frame(12)file Openfile(150:14/0)
[PageFaultHandler][SwapOut] block no 25
PageTableEntry][do_lock] iorb IORB(Id(1393),Device(0),Page(25:9/12),Diskblock(25),FileWrite,Openfile(150:14/0),Thread(115:14/W1)) this Page(25:9/12)
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(47:11/23)
[PageFaultHandler][do_handlePageFault] Frame(23) Page(47:11/23) swap-in finish Thread(113:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 48688 offset = 560 page no = 47 Thread(113:11/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(52:12/29)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(29) Page(52:12/29) Thread(114:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(53:12/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(53:12/29) do swap-in Thread(114:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1394),Device(0),Page(53:12/29),Diskblock(117),FileRead,Openfile(132:12/0),Thread(114:12/W1)) this Page(53:12/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(9:11/7)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(7) Page(9:11/7) Thread(108:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(50:12/null) and Frame(7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(50:12/7) do swap-in Thread(108:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1395),Device(0),Page(50:12/7),Diskblock(114),FileRead,Openfile(132:12/0),Thread(108:12/W1)) this Page(50:12/7)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 218013/250000[MMU][do_refer] address = 20070 offset = 614 page no = 19 Thread(113:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(113:11/RU) 22 Page(19:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(113:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(113:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(19:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] set Page(19:11/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(19:11/24) do swap-in Thread(113:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1396),Device(0),Page(19:11/24),Diskblock(339),FileRead,Openfile(122:11/0),Thread(113:11/W1)) this Page(19:11/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(47:9/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(47:9/19) swap-in finish Thread(90:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 10523 offset = 283 page no = 10 Thread(112:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(112:9/RU) 21 Page(10:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(112:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(112:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(10:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(47:9/19)
[PageFaultHandler][do_handlePageFault] set Page(10:9/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(10:9/19) do swap-in Thread(112:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1397),Device(0),Page(10:9/19),Diskblock(202),FileRead,Openfile(112:9/0),Thread(112:9/W1)) this Page(10:9/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(25:9/12)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(12) Page(25:9/12) Thread(115:14/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(55:14/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(55:14/12) do swap-in Thread(115:14/W0)
PageTableEntry][do_lock] iorb IORB(Id(1398),Device(0),Page(55:14/12),Diskblock(55),FileRead,Openfile(150:14/0),Thread(115:14/W1)) this Page(55:14/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 11014 offset = 774 page no = 10 Thread(106:9/RU)
[PageTableEntry][do_unlock] this Page(53:12/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(53:12/29) swap-in finish Thread(114:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 22847 offset = 319 page no = 22 Thread(114:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(114:12/RU) 22 Page(22:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(114:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(114:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(22:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(53:12/29)
[PageFaultHandler][do_handlePageFault] Frame(29) is dirty, do swap-out Thread(114:12/W0)
[PageFaultHandler][SwapOut] page Page(53:12/29) frame Frame(29)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 53
PageTableEntry][do_lock] iorb IORB(Id(1399),Device(0),Page(53:12/29),Diskblock(117),FileWrite,Openfile(132:12/0),Thread(114:12/W1)) this Page(53:12/29)
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(50:12/7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(50:12/7) swap-in finish Thread(108:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 53872 offset = 624 page no = 52 Thread(108:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(108:12/RU) 21 Page(52:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(108:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(108:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(52:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(52:9/18)
[PageFaultHandler][do_handlePageFault] Frame(18) is dirty, do swap-out Thread(108:12/W0)
[PageFaultHandler][SwapOut] page Page(52:9/18) frame Frame(18)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 52
PageTableEntry][do_lock] iorb IORB(Id(1400),Device(0),Page(52:9/18),Diskblock(116),FileWrite,Openfile(132:12/0),Thread(108:12/W1)) this Page(52:9/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(19:11/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(19:11/24) swap-in finish Thread(113:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 45176 offset = 120 page no = 44 Thread(113:11/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(10:9/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(10:9/19) swap-in finish Thread(112:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] Do memory write.
Simulation progress: 219058/250000[PageTableEntry][do_unlock] this Page(55:14/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(55:14/12) swap-in finish Thread(115:14/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(53:12/29)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(29) Page(53:12/29) Thread(114:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(22:12/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(22:12/29) do swap-in Thread(114:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1401),Device(0),Page(22:12/29),Diskblock(86),FileRead,Openfile(132:12/0),Thread(114:12/W1)) this Page(22:12/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(52:9/18)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(18) Page(52:9/18) Thread(108:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(52:12/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(52:12/18) do swap-in Thread(108:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1402),Device(0),Page(52:12/18),Diskblock(116),FileRead,Openfile(132:12/0),Thread(108:12/W1)) this Page(52:12/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 51716 offset = 516 page no = 50 Thread(115:14/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(115:14/RU) 22 Page(50:14/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(115:14/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(115:14/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(50:14/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(14/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(16:12/22)
[PageFaultHandler][do_handlePageFault] set Page(50:14/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(50:14/22) do swap-in Thread(115:14/W0)
PageTableEntry][do_lock] iorb IORB(Id(1403),Device(0),Page(50:14/22),Diskblock(50),FileRead,Openfile(150:14/0),Thread(115:14/W1)) this Page(50:14/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(22:12/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(22:12/29) swap-in finish Thread(114:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(52:12/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(52:12/18) swap-in finish Thread(108:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(50:14/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(50:14/22) swap-in finish Thread(115:14/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 63108 offset = 644 page no = 61 Thread(106:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(106:9/RU) 22 Page(61:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(106:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(106:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(61:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(52:12/18)
[PageFaultHandler][do_handlePageFault] set Page(61:9/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(61:9/18) do swap-in Thread(106:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1404),Device(0),Page(61:9/18),Diskblock(253),FileRead,Openfile(112:9/0),Thread(106:9/W1)) this Page(61:9/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 1373 offset = 349 page no = 1 Thread(102:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(102:12/RU) 21 Page(1:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(102:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(1:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(50:14/22)
[PageFaultHandler][do_handlePageFault] Frame(22) is dirty, do swap-out Thread(102:12/W0)
[PageFaultHandler][SwapOut] page Page(50:14/22) frame Frame(22)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 50
PageTableEntry][do_lock] iorb IORB(Id(1405),Device(0),Page(50:14/22),Diskblock(114),FileWrite,Openfile(132:12/0),Thread(102:12/W1)) this Page(50:14/22)
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 2602 offset = 554 page no = 2 Thread(116:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(116:13/RU) 21 Page(2:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(116:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(116:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(2:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(13:9/8)
[PageFaultHandler][do_handlePageFault] Frame(8) is dirty, do swap-out Thread(116:13/W0)
[PageFaultHandler][SwapOut] page Page(13:9/8) frame Frame(8)file Openfile(134:13/0)
[PageFaultHandler][SwapOut] block no 13
PageTableEntry][do_lock] iorb IORB(Id(1406),Device(0),Page(13:9/8),Diskblock(141),FileWrite,Openfile(134:13/0),Thread(116:13/W1)) this Page(13:9/8)
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 35090 offset = 274 page no = 34 Thread(110:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(110:13/RU) 21 Page(34:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(110:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(110:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(34:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(18:9/9)
[PageFaultHandler][do_handlePageFault] set Page(34:13/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(34:13/9) do swap-in Thread(110:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1407),Device(0),Page(34:13/9),Diskblock(162),FileRead,Openfile(134:13/0),Thread(110:13/W1)) this Page(34:13/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageCleanDaemon][unleash] osp.Memory.PageCleanDaemon@1bf99cf5 execute time 220000
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(3)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(10)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(28)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(4)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(20)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(1)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(3)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(3) Page(54:11/3) isDirty true
[PageFaultHandler][SwapOut] file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 54
PageTableEntry][do_lock] iorb IORB(Id(1408),Device(0),Page(54:11/3),Diskblock(374),FileWrite,Openfile(122:11/0),Thread(117:0/W1)) this Page(54:11/3)
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 220016/250000[MMU][do_refer] address = 11504 offset = 240 page no = 11 Thread(112:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(112:9/RU) 21 Page(11:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(112:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(112:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(11:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(27:13/0)
[PageFaultHandler][do_handlePageFault] set Page(11:9/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(11:9/0) do swap-in Thread(112:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1409),Device(0),Page(11:9/0),Diskblock(203),FileRead,Openfile(112:9/0),Thread(112:9/W1)) this Page(11:9/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(61:9/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(61:9/18) swap-in finish Thread(106:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(50:14/22)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(22) Page(50:14/22) Thread(102:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(1:12/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(1:12/22) do swap-in Thread(102:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1410),Device(0),Page(1:12/22),Diskblock(65),FileRead,Openfile(132:12/0),Thread(102:12/W1)) this Page(1:12/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(13:9/8)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(8) Page(13:9/8) Thread(116:13/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(2:13/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(2:13/8) do swap-in Thread(116:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1411),Device(0),Page(2:13/8),Diskblock(130),FileRead,Openfile(134:13/0),Thread(116:13/W1)) this Page(2:13/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 47571 offset = 467 page no = 46 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 21 Page(46:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(46:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(37:12/21)
[PageFaultHandler][do_handlePageFault] set Page(46:13/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(46:13/21) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1412),Device(0),Page(46:13/21),Diskblock(174),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(46:13/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(34:13/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(34:13/9) swap-in finish Thread(110:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 32212 offset = 468 page no = 31 Thread(115:14/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(115:14/RU) 21 Page(31:14/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(115:14/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(115:14/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(31:14/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(14/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(34:13/9)
[PageFaultHandler][do_handlePageFault] set Page(31:14/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(31:14/9) do swap-in Thread(115:14/W0)
PageTableEntry][do_lock] iorb IORB(Id(1413),Device(0),Page(31:14/9),Diskblock(31),FileRead,Openfile(150:14/0),Thread(115:14/W1)) this Page(31:14/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(54:11/3)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(3) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(10)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(10) Page(10:12/10) isDirty true
[PageFaultHandler][SwapOut] file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 10
PageTableEntry][do_lock] iorb IORB(Id(1414),Device(0),Page(10:12/10),Diskblock(74),FileWrite,Openfile(132:12/0),Thread(117:0/W1)) this Page(10:12/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(11:9/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(11:9/0) swap-in finish Thread(112:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(1:12/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(1:12/22) swap-in finish Thread(102:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 11056 offset = 816 page no = 10 Thread(113:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(113:11/RU) 21 Page(10:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(113:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(113:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(10:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(1:12/22)
[PageFaultHandler][do_handlePageFault] set Page(10:11/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(10:11/22) do swap-in Thread(113:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1415),Device(0),Page(10:11/22),Diskblock(330),FileRead,Openfile(122:11/0),Thread(113:11/W1)) this Page(10:11/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 221032/250000[PageTableEntry][do_unlock] this Page(2:13/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(2:13/8) swap-in finish Thread(116:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 37253 offset = 389 page no = 36 Thread(112:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(112:9/RU) 21 Page(36:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(112:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(112:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(36:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(21:13/15)
[PageFaultHandler][do_handlePageFault] set Page(36:9/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(36:9/15) do swap-in Thread(112:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1416),Device(0),Page(36:9/15),Diskblock(228),FileRead,Openfile(112:9/0),Thread(112:9/W1)) this Page(36:9/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(46:13/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(46:13/21) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(31:14/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(31:14/9) swap-in finish Thread(115:14/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(10:12/10)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(10) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(28)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(28) Page(44:11/28) isDirty true
[PageFaultHandler][SwapOut] file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 44
PageTableEntry][do_lock] iorb IORB(Id(1417),Device(0),Page(44:11/28),Diskblock(364),FileWrite,Openfile(122:11/0),Thread(117:0/W1)) this Page(44:11/28)
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 62657 offset = 193 page no = 61 Thread(106:9/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 46750 offset = 670 page no = 45 Thread(106:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(106:9/RU) 22 Page(45:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(106:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(106:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(45:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(31:14/9)
[PageFaultHandler][do_handlePageFault] set Page(45:9/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(45:9/9) do swap-in Thread(106:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1418),Device(0),Page(45:9/9),Diskblock(237),FileRead,Openfile(112:9/0),Thread(106:9/W1)) this Page(45:9/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(10:11/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(10:11/22) swap-in finish Thread(113:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 60835 offset = 419 page no = 59 Thread(114:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(114:12/RU) 21 Page(59:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(114:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(114:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(59:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(48:9/27)
[PageFaultHandler][do_handlePageFault] set Page(59:12/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(59:12/27) do swap-in Thread(114:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1419),Device(0),Page(59:12/27),Diskblock(123),FileRead,Openfile(132:12/0),Thread(114:12/W1)) this Page(59:12/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(36:9/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(36:9/15) swap-in finish Thread(112:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 36647 offset = 807 page no = 35 Thread(110:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(110:13/RU) 22 Page(35:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(110:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(110:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(35:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(36:9/15)
[PageFaultHandler][do_handlePageFault] set Page(35:13/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(35:13/15) do swap-in Thread(110:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1420),Device(0),Page(35:13/15),Diskblock(163),FileRead,Openfile(134:13/0),Thread(110:13/W1)) this Page(35:13/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 222040/250000[MMU][do_refer] address = 61003 offset = 587 page no = 59 Thread(109:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(109:9/RU) 22 Page(59:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(109:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(109:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(59:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] set Page(59:9/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(59:9/26) do swap-in Thread(109:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1421),Device(0),Page(59:9/26),Diskblock(251),FileRead,Openfile(112:9/0),Thread(109:9/W1)) this Page(59:9/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 63910 offset = 422 page no = 62 Thread(108:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(108:12/RU) 22 Page(62:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(108:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(108:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(62:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(60:9/16)
[PageFaultHandler][do_handlePageFault] set Page(62:12/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(62:12/16) do swap-in Thread(108:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1422),Device(0),Page(62:12/16),Diskblock(126),FileRead,Openfile(132:12/0),Thread(108:12/W1)) this Page(62:12/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(44:11/28)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(28) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(4)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(4) Page(36:12/4) isDirty true
[PageFaultHandler][SwapOut] file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 36
PageTableEntry][do_lock] iorb IORB(Id(1423),Device(0),Page(36:12/4),Diskblock(100),FileWrite,Openfile(132:12/0),Thread(117:0/W1)) this Page(36:12/4)
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(45:9/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(45:9/9) swap-in finish Thread(106:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(59:12/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(59:12/27) swap-in finish Thread(114:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(35:13/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(35:13/15) swap-in finish Thread(110:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 24375 offset = 823 page no = 23 Thread(102:12/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(59:9/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(59:9/26) swap-in finish Thread(109:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(62:12/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(62:12/16) swap-in finish Thread(108:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(36:12/4)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(4) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(20)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(20) Page(4:11/20) isDirty true
[PageFaultHandler][SwapOut] file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 4
PageTableEntry][do_lock] iorb IORB(Id(1424),Device(0),Page(4:11/20),Diskblock(324),FileWrite,Openfile(122:11/0),Thread(117:0/W1)) this Page(4:11/20)
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 17220 offset = 836 page no = 16 Thread(114:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(114:12/RU) 22 Page(16:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(114:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(114:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(16:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(45:9/9)
[PageFaultHandler][do_handlePageFault] Frame(9) is dirty, do swap-out Thread(114:12/W0)
[PageFaultHandler][SwapOut] page Page(45:9/9) frame Frame(9)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 45
PageTableEntry][do_lock] iorb IORB(Id(1425),Device(0),Page(45:9/9),Diskblock(109),FileWrite,Openfile(132:12/0),Thread(114:12/W1)) this Page(45:9/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 223020/250000[MMU][do_refer] address = 6639 offset = 495 page no = 6 Thread(115:14/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(115:14/RU) 22 Page(6:14/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(115:14/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(115:14/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(6:14/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(14/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(59:12/27)
[PageFaultHandler][do_handlePageFault] set Page(6:14/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(6:14/27) do swap-in Thread(115:14/W0)
PageTableEntry][do_lock] iorb IORB(Id(1426),Device(0),Page(6:14/27),Diskblock(6),FileRead,Openfile(150:14/0),Thread(115:14/W1)) this Page(6:14/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(4:11/20)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(20) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(1)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(1) Page(5:12/1) isDirty true
[PageFaultHandler][SwapOut] file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 5
PageTableEntry][do_lock] iorb IORB(Id(1427),Device(0),Page(5:12/1),Diskblock(69),FileWrite,Openfile(132:12/0),Thread(117:0/W1)) this Page(5:12/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(45:9/9)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(9) Page(45:9/9) Thread(114:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(16:12/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(16:12/9) do swap-in Thread(114:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1428),Device(0),Page(16:12/9),Diskblock(80),FileRead,Openfile(132:12/0),Thread(114:12/W1)) this Page(16:12/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 7983 offset = 815 page no = 7 Thread(108:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(108:12/RU) 22 Page(7:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(108:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(108:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(7:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(59:9/26)
[PageFaultHandler][do_handlePageFault] Frame(26) is dirty, do swap-out Thread(108:12/W0)
[PageFaultHandler][SwapOut] page Page(59:9/26) frame Frame(26)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 59
PageTableEntry][do_lock] iorb IORB(Id(1429),Device(0),Page(59:9/26),Diskblock(123),FileWrite,Openfile(132:12/0),Thread(108:12/W1)) this Page(59:9/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(6:14/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(6:14/27) swap-in finish Thread(115:14/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(5:12/1)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(1) finish
[MMU][do_refer] address = 7142 offset = 998 page no = 6 Thread(112:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(112:9/RU) 22 Page(6:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(112:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(112:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(6:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(23:12/14)
[PageFaultHandler][do_handlePageFault] Frame(14) is dirty, do swap-out Thread(112:9/W0)
[PageFaultHandler][SwapOut] page Page(23:12/14) frame Frame(14)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 23
PageTableEntry][do_lock] iorb IORB(Id(1430),Device(0),Page(23:12/14),Diskblock(215),FileWrite,Openfile(112:9/0),Thread(112:9/W1)) this Page(23:12/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 13299 offset = 1011 page no = 12 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 21 Page(12:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(12:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(46:9/5)
[PageFaultHandler][do_handlePageFault] set Page(12:13/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(12:13/5) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1431),Device(0),Page(12:13/5),Diskblock(140),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(12:13/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:12/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(16:12/9) swap-in finish Thread(114:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(59:9/26)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(26) Page(59:9/26) Thread(108:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(7:12/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(7:12/26) do swap-in Thread(108:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1432),Device(0),Page(7:12/26),Diskblock(71),FileRead,Openfile(132:12/0),Thread(108:12/W1)) this Page(7:12/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 39260 offset = 348 page no = 38 Thread(106:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(106:9/RU) 22 Page(38:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(106:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(106:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(7) for Page(38:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(7) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(50:12/7)
[PageFaultHandler][do_handlePageFault] Frame(7) is dirty, do swap-out Thread(106:9/W0)
[PageFaultHandler][SwapOut] page Page(50:12/7) frame Frame(7)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 50
PageTableEntry][do_lock] iorb IORB(Id(1433),Device(0),Page(50:12/7),Diskblock(242),FileWrite,Openfile(112:9/0),Thread(106:9/W1)) this Page(50:12/7)
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(23:12/14)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(14) Page(23:12/14) Thread(112:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(6:9/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(6:9/14) do swap-in Thread(112:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1434),Device(0),Page(6:9/14),Diskblock(198),FileRead,Openfile(112:9/0),Thread(112:9/W1)) this Page(6:9/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 224062/250000[PageTableEntry][do_unlock] this Page(12:13/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(12:13/5) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(7:12/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(7:12/26) swap-in finish Thread(108:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 52062 offset = 862 page no = 50 Thread(102:12/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 8882 offset = 690 page no = 8 Thread(102:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(102:12/RU) 21 Page(8:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(102:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(8:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(7:12/26)
[PageFaultHandler][do_handlePageFault] Frame(26) is dirty, do swap-out Thread(102:12/W0)
[PageFaultHandler][SwapOut] page Page(7:12/26) frame Frame(26)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 7
PageTableEntry][do_lock] iorb IORB(Id(1435),Device(0),Page(7:12/26),Diskblock(71),FileWrite,Openfile(132:12/0),Thread(102:12/W1)) this Page(7:12/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(1436),Device(1),Page(6:14/27),Diskblock(0),FileRead,Openfile(154:14/1),Thread(115:14/W0)) this Page(6:14/27)
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(6:14/27)
[PageTableEntry][do_unlock] this Page(50:12/7)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(7) Page(50:12/7) Thread(106:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(38:9/null) and Frame(7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(38:9/7) do swap-in Thread(106:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1437),Device(0),Page(38:9/7),Diskblock(230),FileRead,Openfile(112:9/0),Thread(106:9/W1)) this Page(38:9/7)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(6:9/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(6:9/14) swap-in finish Thread(112:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(7:12/26)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(26) Page(7:12/26) Thread(102:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(8:12/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(8:12/26) do swap-in Thread(102:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1438),Device(0),Page(8:12/26),Diskblock(72),FileRead,Openfile(132:12/0),Thread(102:12/W1)) this Page(8:12/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 63535 offset = 47 page no = 62 Thread(116:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(116:13/RU) 21 Page(62:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(116:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(116:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(62:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(6:9/14)
[PageFaultHandler][do_handlePageFault] Frame(14) is dirty, do swap-out Thread(116:13/W0)
[PageFaultHandler][SwapOut] page Page(6:9/14) frame Frame(14)file Openfile(134:13/0)
[PageFaultHandler][SwapOut] block no 6
PageTableEntry][do_lock] iorb IORB(Id(1439),Device(0),Page(6:9/14),Diskblock(134),FileWrite,Openfile(134:13/0),Thread(116:13/W1)) this Page(6:9/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 2542 offset = 494 page no = 2 Thread(104:13/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(38:9/7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(38:9/7) swap-in finish Thread(106:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(8:12/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(8:12/26) swap-in finish Thread(102:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 225082/250000[MMU][do_refer] address = 12845 offset = 557 page no = 12 Thread(108:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(108:12/RU) 21 Page(12:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(108:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(108:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(12:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(55:14/12)
[PageFaultHandler][do_handlePageFault] set Page(12:12/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(12:12/12) do swap-in Thread(108:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1440),Device(0),Page(12:12/12),Diskblock(76),FileRead,Openfile(132:12/0),Thread(108:12/W1)) this Page(12:12/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 50685 offset = 509 page no = 49 Thread(110:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(110:13/RU) 21 Page(49:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(110:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(110:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(49:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(7:9/25)
[PageFaultHandler][do_handlePageFault] Frame(25) is dirty, do swap-out Thread(110:13/W0)
[PageFaultHandler][SwapOut] page Page(7:9/25) frame Frame(25)file Openfile(134:13/0)
[PageFaultHandler][SwapOut] block no 7
PageTableEntry][do_lock] iorb IORB(Id(1441),Device(0),Page(7:9/25),Diskblock(135),FileWrite,Openfile(134:13/0),Thread(110:13/W1)) this Page(7:9/25)
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 11621 offset = 357 page no = 11 Thread(115:14/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(115:14/RU) 22 Page(11:14/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(115:14/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(115:14/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(11:14/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(14/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(51:12/6)
[PageFaultHandler][do_handlePageFault] Frame(6) is dirty, do swap-out Thread(115:14/W0)
[PageFaultHandler][SwapOut] page Page(51:12/6) frame Frame(6)file Openfile(150:14/0)
[PageFaultHandler][SwapOut] block no 51
PageTableEntry][do_lock] iorb IORB(Id(1442),Device(0),Page(51:12/6),Diskblock(51),FileWrite,Openfile(150:14/0),Thread(115:14/W1)) this Page(51:12/6)
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(6:9/14)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(14) Page(6:9/14) Thread(116:13/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(62:13/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(62:13/14) do swap-in Thread(116:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1443),Device(0),Page(62:13/14),Diskblock(190),FileRead,Openfile(134:13/0),Thread(116:13/W1)) this Page(62:13/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 28014 offset = 366 page no = 27 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 21 Page(27:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(27:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(19:11/24)
[PageFaultHandler][do_handlePageFault] Frame(24) is dirty, do swap-out Thread(104:13/W0)
[PageFaultHandler][SwapOut] page Page(19:11/24) frame Frame(24)file Openfile(134:13/0)
[PageFaultHandler][SwapOut] block no 19
PageTableEntry][do_lock] iorb IORB(Id(1444),Device(0),Page(19:11/24),Diskblock(147),FileWrite,Openfile(134:13/0),Thread(104:13/W1)) this Page(19:11/24)
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(12:12/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(12:12/12) swap-in finish Thread(108:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(7:9/25)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(25) Page(7:9/25) Thread(110:13/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(49:13/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(49:13/25) do swap-in Thread(110:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1445),Device(0),Page(49:13/25),Diskblock(177),FileRead,Openfile(134:13/0),Thread(110:13/W1)) this Page(49:13/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 58523 offset = 155 page no = 57 Thread(108:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(108:12/RU) 22 Page(57:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(108:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(108:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(57:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(15:13/2)
[PageFaultHandler][do_handlePageFault] Frame(2) is dirty, do swap-out Thread(108:12/W0)
[PageFaultHandler][SwapOut] page Page(15:13/2) frame Frame(2)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 15
PageTableEntry][do_lock] iorb IORB(Id(1446),Device(0),Page(15:13/2),Diskblock(79),FileWrite,Openfile(132:12/0),Thread(108:12/W1)) this Page(15:13/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(51:12/6)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(6) Page(51:12/6) Thread(115:14/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(11:14/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(11:14/6) do swap-in Thread(115:14/W0)
PageTableEntry][do_lock] iorb IORB(Id(1447),Device(0),Page(11:14/6),Diskblock(11),FileRead,Openfile(150:14/0),Thread(115:14/W1)) this Page(11:14/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 53587 offset = 339 page no = 52 Thread(114:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(114:12/RU) 21 Page(52:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(114:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(114:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(52:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(22:12/29)
[PageFaultHandler][do_handlePageFault] Frame(29) is dirty, do swap-out Thread(114:12/W0)
[PageFaultHandler][SwapOut] page Page(22:12/29) frame Frame(29)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 22
PageTableEntry][do_lock] iorb IORB(Id(1448),Device(0),Page(22:12/29),Diskblock(86),FileWrite,Openfile(132:12/0),Thread(114:12/W1)) this Page(22:12/29)
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 43364 offset = 356 page no = 42 Thread(106:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(106:9/RU) 21 Page(42:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(106:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(106:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(42:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(28:13/13)
[PageFaultHandler][do_handlePageFault] Frame(13) is dirty, do swap-out Thread(106:9/W0)
[PageFaultHandler][SwapOut] page Page(28:13/13) frame Frame(13)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 28
PageTableEntry][do_lock] iorb IORB(Id(1449),Device(0),Page(28:13/13),Diskblock(220),FileWrite,Openfile(112:9/0),Thread(106:9/W1)) this Page(28:13/13)
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(62:13/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(62:13/14) swap-in finish Thread(116:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(19:11/24)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(24) Page(19:11/24) Thread(104:13/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(27:13/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(27:13/24) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1450),Device(0),Page(27:13/24),Diskblock(155),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(27:13/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 18480 offset = 48 page no = 18 Thread(116:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(116:13/RU) 21 Page(18:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(116:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(116:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(18:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(62:13/14)
[PageFaultHandler][do_handlePageFault] set Page(18:13/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(18:13/14) do swap-in Thread(116:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1451),Device(0),Page(18:13/14),Diskblock(146),FileRead,Openfile(134:13/0),Thread(116:13/W1)) this Page(18:13/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(49:13/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(49:13/25) swap-in finish Thread(110:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(15:13/2)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(2) Page(15:13/2) Thread(108:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(57:12/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(57:12/2) do swap-in Thread(108:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1452),Device(0),Page(57:12/2),Diskblock(121),FileRead,Openfile(132:12/0),Thread(108:12/W1)) this Page(57:12/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(11:14/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(11:14/6) swap-in finish Thread(115:14/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 226049/250000[MMU][do_refer] address = 16907 offset = 523 page no = 16 Thread(102:12/RU)
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(1453),Device(1),Page(5:12/1),Diskblock(0),FileRead,Openfile(154:14/1),Thread(102:12/W0)) this Page(5:12/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(22:12/29)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(29) Page(22:12/29) Thread(114:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(52:12/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(52:12/29) do swap-in Thread(114:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1454),Device(0),Page(52:12/29),Diskblock(116),FileRead,Openfile(132:12/0),Thread(114:12/W1)) this Page(52:12/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(5:12/1)
[MMU][do_refer] address = 50462 offset = 286 page no = 49 Thread(102:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(102:12/RU) 21 Page(49:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(102:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(49:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(11:14/6)
[PageFaultHandler][do_handlePageFault] Frame(6) is dirty, do swap-out Thread(102:12/W0)
[PageFaultHandler][SwapOut] page Page(11:14/6) frame Frame(6)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 11
PageTableEntry][do_lock] iorb IORB(Id(1455),Device(0),Page(11:14/6),Diskblock(75),FileWrite,Openfile(132:12/0),Thread(102:12/W1)) this Page(11:14/6)
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 6017 offset = 897 page no = 5 Thread(115:14/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(115:14/RU) 22 Page(5:14/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(115:14/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(115:14/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(5:14/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(14/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(29:9/11)
[PageFaultHandler][do_handlePageFault] Frame(11) is dirty, do swap-out Thread(115:14/W0)
[PageFaultHandler][SwapOut] page Page(29:9/11) frame Frame(11)file Openfile(150:14/0)
[PageFaultHandler][SwapOut] block no 29
PageTableEntry][do_lock] iorb IORB(Id(1456),Device(0),Page(29:9/11),Diskblock(29),FileWrite,Openfile(150:14/0),Thread(115:14/W1)) this Page(29:9/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(28:13/13)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(13) Page(28:13/13) Thread(106:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(42:9/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(42:9/13) do swap-in Thread(106:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1457),Device(0),Page(42:9/13),Diskblock(234),FileRead,Openfile(112:9/0),Thread(106:9/W1)) this Page(42:9/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(27:13/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(27:13/24) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(18:13/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(18:13/14) swap-in finish Thread(116:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(1458),Device(1),Page(2:13/8),Diskblock(17),FileWrite,Openfile(154:14/1),Thread(116:13/W0)) this Page(2:13/8)
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(57:12/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(57:12/2) swap-in finish Thread(108:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(2:13/8)
[MMU][do_refer] address = 39869 offset = 957 page no = 38 Thread(116:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(116:13/RU) 22 Page(38:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(116:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(116:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(38:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(57:12/2)
[PageFaultHandler][do_handlePageFault] Frame(2) is dirty, do swap-out Thread(116:13/W0)
[PageFaultHandler][SwapOut] page Page(57:12/2) frame Frame(2)file Openfile(134:13/0)
[PageFaultHandler][SwapOut] block no 57
PageTableEntry][do_lock] iorb IORB(Id(1459),Device(0),Page(57:12/2),Diskblock(185),FileWrite,Openfile(134:13/0),Thread(116:13/W1)) this Page(57:12/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(52:12/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(52:12/29) swap-in finish Thread(114:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(11:14/6)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(6) Page(11:14/6) Thread(102:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(49:12/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(49:12/6) do swap-in Thread(102:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1460),Device(0),Page(49:12/6),Diskblock(113),FileRead,Openfile(132:12/0),Thread(102:12/W1)) this Page(49:12/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(29:9/11)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(11) Page(29:9/11) Thread(115:14/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(5:14/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(5:14/11) do swap-in Thread(115:14/W0)
PageTableEntry][do_lock] iorb IORB(Id(1461),Device(0),Page(5:14/11),Diskblock(5),FileRead,Openfile(150:14/0),Thread(115:14/W1)) this Page(5:14/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 227080/250000[PageTableEntry][do_unlock] this Page(42:9/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(42:9/13) swap-in finish Thread(106:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(57:12/2)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(2) Page(57:12/2) Thread(116:13/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(38:13/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(38:13/2) do swap-in Thread(116:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1462),Device(0),Page(38:13/2),Diskblock(166),FileRead,Openfile(134:13/0),Thread(116:13/W1)) this Page(38:13/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
PageTableEntry][do_lock] iorb IORB(Id(1463),Device(1),Page(10:9/19),Diskblock(17),FileRead,Openfile(154:14/1),Thread(106:9/W0)) this Page(10:9/19)
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 45582 offset = 526 page no = 44 Thread(114:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(114:12/RU) 21 Page(44:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(114:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(114:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(44:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(42:9/13)
[PageFaultHandler][do_handlePageFault] set Page(44:12/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(44:12/13) do swap-in Thread(114:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1464),Device(0),Page(44:12/13),Diskblock(108),FileRead,Openfile(132:12/0),Thread(114:12/W1)) this Page(44:12/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(49:12/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(49:12/6) swap-in finish Thread(102:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(10:9/19)
[MMU][do_refer] address = 65193 offset = 681 page no = 63 Thread(108:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(108:12/RU) 21 Page(63:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(108:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(108:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(63:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(49:12/6)
[PageFaultHandler][do_handlePageFault] set Page(63:12/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(63:12/6) do swap-in Thread(108:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1465),Device(0),Page(63:12/6),Diskblock(127),FileRead,Openfile(132:12/0),Thread(108:12/W1)) this Page(63:12/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(5:14/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(5:14/11) swap-in finish Thread(115:14/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 51924 offset = 724 page no = 50 Thread(102:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(102:12/RU) 21 Page(50:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(102:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(50:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(61:9/18)
[PageFaultHandler][do_handlePageFault] Frame(18) is dirty, do swap-out Thread(102:12/W0)
[PageFaultHandler][SwapOut] page Page(61:9/18) frame Frame(18)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 61
PageTableEntry][do_lock] iorb IORB(Id(1466),Device(0),Page(61:9/18),Diskblock(125),FileWrite,Openfile(132:12/0),Thread(102:12/W1)) this Page(61:9/18)
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 28120 offset = 472 page no = 27 Thread(115:14/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(115:14/RU) 22 Page(27:14/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(115:14/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(115:14/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(27:14/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(14/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(10:12/10)
[PageFaultHandler][do_handlePageFault] set Page(27:14/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(27:14/10) do swap-in Thread(115:14/W0)
PageTableEntry][do_lock] iorb IORB(Id(1467),Device(0),Page(27:14/10),Diskblock(27),FileRead,Openfile(150:14/0),Thread(115:14/W1)) this Page(27:14/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(38:13/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(38:13/2) swap-in finish Thread(116:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 44126 offset = 94 page no = 43 Thread(116:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(116:13/RU) 22 Page(43:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(116:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(116:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(43:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(46:13/21)
[PageFaultHandler][do_handlePageFault] set Page(43:13/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(43:13/21) do swap-in Thread(116:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1468),Device(0),Page(43:13/21),Diskblock(171),FileRead,Openfile(134:13/0),Thread(116:13/W1)) this Page(43:13/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(44:12/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(44:12/13) swap-in finish Thread(114:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 31559 offset = 839 page no = 30 Thread(114:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(114:12/RU) 21 Page(30:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(114:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(114:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(30:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(10:11/22)
[PageFaultHandler][do_handlePageFault] set Page(30:12/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(30:12/22) do swap-in Thread(114:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1469),Device(0),Page(30:12/22),Diskblock(94),FileRead,Openfile(132:12/0),Thread(114:12/W1)) this Page(30:12/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 12602 offset = 314 page no = 12 Thread(106:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(106:9/RU) 22 Page(12:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(106:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(106:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(12:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(4:11/20)
[PageFaultHandler][do_handlePageFault] set Page(12:9/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(12:9/20) do swap-in Thread(106:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1470),Device(0),Page(12:9/20),Diskblock(204),FileRead,Openfile(112:9/0),Thread(106:9/W1)) this Page(12:9/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(63:12/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(63:12/6) swap-in finish Thread(108:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 7787 offset = 619 page no = 7 Thread(108:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(108:12/RU) 21 Page(7:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(108:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(108:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(7:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(35:13/15)
[PageFaultHandler][do_handlePageFault] Frame(15) is dirty, do swap-out Thread(108:12/W0)
[PageFaultHandler][SwapOut] page Page(35:13/15) frame Frame(15)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 35
PageTableEntry][do_lock] iorb IORB(Id(1471),Device(0),Page(35:13/15),Diskblock(99),FileWrite,Openfile(132:12/0),Thread(108:12/W1)) this Page(35:13/15)
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(61:9/18)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(18) Page(61:9/18) Thread(102:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(50:12/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(50:12/18) do swap-in Thread(102:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1472),Device(0),Page(50:12/18),Diskblock(114),FileRead,Openfile(132:12/0),Thread(102:12/W1)) this Page(50:12/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(27:14/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(27:14/10) swap-in finish Thread(115:14/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 228023/250000[MMU][do_refer] address = 6169 offset = 25 page no = 6 Thread(115:14/RU)
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(1473),Device(1),Page(5:14/11),Diskblock(17),FileWrite,Openfile(154:14/1),Thread(115:14/W0)) this Page(5:14/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(5:14/11)
[PageTableEntry][do_unlock] this Page(43:13/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(43:13/21) swap-in finish Thread(116:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(30:12/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(30:12/22) swap-in finish Thread(114:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(12:9/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(12:9/20) swap-in finish Thread(106:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(35:13/15)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(15) Page(35:13/15) Thread(108:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(7:12/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(7:12/15) do swap-in Thread(108:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1474),Device(0),Page(7:12/15),Diskblock(71),FileRead,Openfile(132:12/0),Thread(108:12/W1)) this Page(7:12/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(50:12/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(50:12/18) swap-in finish Thread(102:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(7:12/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(7:12/15) swap-in finish Thread(108:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 29428 offset = 756 page no = 28 Thread(102:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(102:12/RU) 21 Page(28:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(102:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(18) for Page(28:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(18) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(50:12/18)
[PageFaultHandler][do_handlePageFault] set Page(28:12/null) and Frame(18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(28:12/18) do swap-in Thread(102:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1475),Device(0),Page(28:12/18),Diskblock(92),FileRead,Openfile(132:12/0),Thread(102:12/W1)) this Page(28:12/18)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(18)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(28:12/18)
[PageFaultHandler][do_handlePageFault] Frame(18) Page(28:12/18) swap-in finish Thread(102:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 27614 offset = 990 page no = 26 Thread(108:12/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 29884 offset = 188 page no = 29 Thread(108:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(108:12/RU) 21 Page(29:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(108:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(108:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(29:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(43:13/21)
[PageFaultHandler][do_handlePageFault] Frame(21) is dirty, do swap-out Thread(108:12/W0)
[PageFaultHandler][SwapOut] page Page(43:13/21) frame Frame(21)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 43
PageTableEntry][do_lock] iorb IORB(Id(1476),Device(0),Page(43:13/21),Diskblock(107),FileWrite,Openfile(132:12/0),Thread(108:12/W1)) this Page(43:13/21)
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 229040/250000[PageTableEntry][do_unlock] this Page(43:13/21)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(21) Page(43:13/21) Thread(108:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(29:12/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(29:12/21) do swap-in Thread(108:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1477),Device(0),Page(29:12/21),Diskblock(93),FileRead,Openfile(132:12/0),Thread(108:12/W1)) this Page(29:12/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 44071 offset = 39 page no = 43 Thread(102:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(102:12/RU) 21 Page(43:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(102:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(43:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(44:11/28)
[PageFaultHandler][do_handlePageFault] set Page(43:12/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(43:12/28) do swap-in Thread(102:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1478),Device(0),Page(43:12/28),Diskblock(107),FileRead,Openfile(132:12/0),Thread(102:12/W1)) this Page(43:12/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 58562 offset = 194 page no = 57 Thread(114:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(114:12/RU) 21 Page(57:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(114:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(114:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(57:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(5:12/1)
[PageFaultHandler][do_handlePageFault] Frame(1) is dirty, do swap-out Thread(114:12/W0)
[PageFaultHandler][SwapOut] page Page(5:12/1) frame Frame(1)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 5
PageTableEntry][do_lock] iorb IORB(Id(1479),Device(0),Page(5:12/1),Diskblock(69),FileWrite,Openfile(132:12/0),Thread(114:12/W1)) this Page(5:12/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(29:12/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(29:12/21) swap-in finish Thread(108:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(43:12/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(43:12/28) swap-in finish Thread(102:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(5:12/1)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(1) Page(5:12/1) Thread(114:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(57:12/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(57:12/1) do swap-in Thread(114:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1480),Device(0),Page(57:12/1),Diskblock(121),FileRead,Openfile(132:12/0),Thread(114:12/W1)) this Page(57:12/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 42870 offset = 886 page no = 41 Thread(108:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(108:12/RU) 21 Page(41:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(108:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(108:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(41:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(43:12/28)
[PageFaultHandler][do_handlePageFault] set Page(41:12/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(41:12/28) do swap-in Thread(108:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1481),Device(0),Page(41:12/28),Diskblock(105),FileRead,Openfile(132:12/0),Thread(108:12/W1)) this Page(41:12/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(57:12/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(57:12/1) swap-in finish Thread(114:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(41:12/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(41:12/28) swap-in finish Thread(108:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 230020/250000[MMU][do_refer] address = 20863 offset = 383 page no = 20 Thread(114:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(114:12/RU) 21 Page(20:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(114:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(114:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(20:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(16:12/9)
[PageFaultHandler][do_handlePageFault] Frame(9) is dirty, do swap-out Thread(114:12/W0)
[PageFaultHandler][SwapOut] page Page(16:12/9) frame Frame(9)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 16
PageTableEntry][do_lock] iorb IORB(Id(1482),Device(0),Page(16:12/9),Diskblock(80),FileWrite,Openfile(132:12/0),Thread(114:12/W1)) this Page(16:12/9)
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:12/9)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(9) Page(16:12/9) Thread(114:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(20:12/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(20:12/9) do swap-in Thread(114:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1483),Device(0),Page(20:12/9),Diskblock(84),FileRead,Openfile(132:12/0),Thread(114:12/W1)) this Page(20:12/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 6795 offset = 651 page no = 6 Thread(108:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(108:12/RU) 22 Page(6:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(108:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(108:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(6:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(12:13/5)
[PageFaultHandler][do_handlePageFault] set Page(6:12/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(6:12/5) do swap-in Thread(108:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1484),Device(0),Page(6:12/5),Diskblock(70),FileRead,Openfile(132:12/0),Thread(108:12/W1)) this Page(6:12/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(20:12/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(20:12/9) swap-in finish Thread(114:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(6:12/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(6:12/5) swap-in finish Thread(108:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 31475 offset = 755 page no = 30 Thread(108:12/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 13494 offset = 182 page no = 13 Thread(108:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(108:12/RU) 21 Page(13:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(108:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(108:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(13:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(6:12/5)
[PageFaultHandler][do_handlePageFault] Frame(5) is dirty, do swap-out Thread(108:12/W0)
[PageFaultHandler][SwapOut] page Page(6:12/5) frame Frame(5)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 6
PageTableEntry][do_lock] iorb IORB(Id(1485),Device(0),Page(6:12/5),Diskblock(70),FileWrite,Openfile(132:12/0),Thread(108:12/W1)) this Page(6:12/5)
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(6:12/5)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(5) Page(6:12/5) Thread(108:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(13:12/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(13:12/5) do swap-in Thread(108:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1486),Device(0),Page(13:12/5),Diskblock(77),FileRead,Openfile(132:12/0),Thread(108:12/W1)) this Page(13:12/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 3503 offset = 431 page no = 3 Thread(116:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(116:13/RU) 22 Page(3:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(116:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(116:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(3:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(10:9/19)
[PageFaultHandler][do_handlePageFault] Frame(19) is dirty, do swap-out Thread(116:13/W0)
[PageFaultHandler][SwapOut] page Page(10:9/19) frame Frame(19)file Openfile(134:13/0)
[PageFaultHandler][SwapOut] block no 10
PageTableEntry][do_lock] iorb IORB(Id(1487),Device(0),Page(10:9/19),Diskblock(138),FileWrite,Openfile(134:13/0),Thread(116:13/W1)) this Page(10:9/19)
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(13:12/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(13:12/5) swap-in finish Thread(108:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 59249 offset = 881 page no = 57 Thread(118:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(118:9/RU) 21 Page(57:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(118:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(118:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(57:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(8:12/26)
[PageFaultHandler][do_handlePageFault] set Page(57:9/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(57:9/26) do swap-in Thread(118:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1488),Device(0),Page(57:9/26),Diskblock(249),FileRead,Openfile(112:9/0),Thread(118:9/W1)) this Page(57:9/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 231082/250000[PageTableEntry][do_unlock] this Page(10:9/19)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(19) Page(10:9/19) Thread(116:13/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(3:13/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(3:13/19) do swap-in Thread(116:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1489),Device(0),Page(3:13/19),Diskblock(131),FileRead,Openfile(134:13/0),Thread(116:13/W1)) this Page(3:13/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 25234 offset = 658 page no = 24 Thread(102:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(102:12/RU) 21 Page(24:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(102:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(24:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(12:12/12)
[PageFaultHandler][do_handlePageFault] set Page(24:12/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(24:12/12) do swap-in Thread(102:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1490),Device(0),Page(24:12/12),Diskblock(88),FileRead,Openfile(132:12/0),Thread(102:12/W1)) this Page(24:12/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(57:9/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(57:9/26) swap-in finish Thread(118:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(3:13/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(3:13/19) swap-in finish Thread(116:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(24:12/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(24:12/12) swap-in finish Thread(102:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 51684 offset = 484 page no = 50 Thread(118:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(118:9/RU) 22 Page(50:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(118:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(118:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(50:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(3:13/19)
[PageFaultHandler][do_handlePageFault] Frame(19) is dirty, do swap-out Thread(118:9/W0)
[PageFaultHandler][SwapOut] page Page(3:13/19) frame Frame(19)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 3
PageTableEntry][do_lock] iorb IORB(Id(1491),Device(0),Page(3:13/19),Diskblock(195),FileWrite,Openfile(112:9/0),Thread(118:9/W1)) this Page(3:13/19)
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 4452 offset = 356 page no = 4 Thread(116:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(116:13/RU) 22 Page(4:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(116:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(116:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(4:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(49:13/25)
[PageFaultHandler][do_handlePageFault] set Page(4:13/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(4:13/25) do swap-in Thread(116:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1492),Device(0),Page(4:13/25),Diskblock(132),FileRead,Openfile(134:13/0),Thread(116:13/W1)) this Page(4:13/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 25862 offset = 262 page no = 25 Thread(108:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(108:12/RU) 22 Page(25:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(108:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(108:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(25:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(52:12/29)
[PageFaultHandler][do_handlePageFault] set Page(25:12/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(25:12/29) do swap-in Thread(108:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1493),Device(0),Page(25:12/29),Diskblock(89),FileRead,Openfile(132:12/0),Thread(108:12/W1)) this Page(25:12/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 16945 offset = 561 page no = 16 Thread(102:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(102:12/RU) 21 Page(16:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(102:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(102:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(16:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(5:14/11)
[PageFaultHandler][do_handlePageFault] Frame(11) is dirty, do swap-out Thread(102:12/W0)
[PageFaultHandler][SwapOut] page Page(5:14/11) frame Frame(11)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 5
PageTableEntry][do_lock] iorb IORB(Id(1494),Device(0),Page(5:14/11),Diskblock(69),FileWrite,Openfile(132:12/0),Thread(102:12/W1)) this Page(5:14/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(3:13/19)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(19) Page(3:13/19) Thread(118:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(50:9/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(50:9/19) do swap-in Thread(118:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1495),Device(0),Page(50:9/19),Diskblock(242),FileRead,Openfile(112:9/0),Thread(118:9/W1)) this Page(50:9/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(4:13/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(4:13/25) swap-in finish Thread(116:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 12759 offset = 471 page no = 12 Thread(119:9/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(25:12/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(25:12/29) swap-in finish Thread(108:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 232039/250000[PageTableEntry][do_unlock] this Page(5:14/11)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(11) Page(5:14/11) Thread(102:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(16:12/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(16:12/11) do swap-in Thread(102:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1496),Device(0),Page(16:12/11),Diskblock(80),FileRead,Openfile(132:12/0),Thread(102:12/W1)) this Page(16:12/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 33505 offset = 737 page no = 32 Thread(106:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(106:9/RU) 21 Page(32:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(106:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(106:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(32:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(25:12/29)
[PageFaultHandler][do_handlePageFault] Frame(29) is dirty, do swap-out Thread(106:9/W0)
[PageFaultHandler][SwapOut] page Page(25:12/29) frame Frame(29)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 25
PageTableEntry][do_lock] iorb IORB(Id(1497),Device(0),Page(25:12/29),Diskblock(217),FileWrite,Openfile(112:9/0),Thread(106:9/W1)) this Page(25:12/29)
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(50:9/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(50:9/19) swap-in finish Thread(118:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(16:12/11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(16:12/11) swap-in finish Thread(102:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 52767 offset = 543 page no = 51 Thread(119:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(119:9/RU) 21 Page(51:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(119:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(119:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(51:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(18:13/14)
[PageFaultHandler][do_handlePageFault] set Page(51:9/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(51:9/14) do swap-in Thread(119:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1498),Device(0),Page(51:9/14),Diskblock(243),FileRead,Openfile(112:9/0),Thread(119:9/W1)) this Page(51:9/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 10988 offset = 748 page no = 10 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 21 Page(10:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(10:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(54:11/3)
[PageFaultHandler][do_handlePageFault] set Page(10:13/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(10:13/3) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1499),Device(0),Page(10:13/3),Diskblock(138),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(10:13/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(25:12/29)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(29) Page(25:12/29) Thread(106:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(32:9/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(32:9/29) do swap-in Thread(106:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1500),Device(0),Page(32:9/29),Diskblock(224),FileRead,Openfile(112:9/0),Thread(106:9/W1)) this Page(32:9/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 36510 offset = 670 page no = 35 Thread(118:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(118:9/RU) 22 Page(35:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(118:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(118:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(35:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(36:12/4)
[PageFaultHandler][do_handlePageFault] set Page(35:9/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(35:9/4) do swap-in Thread(118:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1501),Device(0),Page(35:9/4),Diskblock(227),FileRead,Openfile(112:9/0),Thread(118:9/W1)) this Page(35:9/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 45350 offset = 294 page no = 44 Thread(116:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(116:13/RU) 21 Page(44:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(116:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(116:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(44:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(38:13/2)
[PageFaultHandler][do_handlePageFault] Frame(2) is dirty, do swap-out Thread(116:13/W0)
[PageFaultHandler][SwapOut] page Page(38:13/2) frame Frame(2)file Openfile(134:13/0)
[PageFaultHandler][SwapOut] block no 38
PageTableEntry][do_lock] iorb IORB(Id(1502),Device(0),Page(38:13/2),Diskblock(166),FileWrite,Openfile(134:13/0),Thread(116:13/W1)) this Page(38:13/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(51:9/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(51:9/14) swap-in finish Thread(119:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(10:13/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(10:13/3) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 233053/250000[MMU][do_refer] address = 63762 offset = 274 page no = 62 Thread(102:12/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 52843 offset = 619 page no = 51 Thread(119:9/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 42133 offset = 149 page no = 41 Thread(119:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(119:9/RU) 22 Page(41:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(119:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(119:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(41:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(10:13/3)
[PageFaultHandler][do_handlePageFault] set Page(41:9/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(41:9/3) do swap-in Thread(119:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1503),Device(0),Page(41:9/3),Diskblock(233),FileRead,Openfile(112:9/0),Thread(119:9/W1)) this Page(41:9/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(32:9/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(32:9/29) swap-in finish Thread(106:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 51472 offset = 272 page no = 50 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 21 Page(50:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(50:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(32:9/29)
[PageFaultHandler][do_handlePageFault] set Page(50:13/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(50:13/29) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1504),Device(0),Page(50:13/29),Diskblock(178),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(50:13/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(35:9/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(35:9/4) swap-in finish Thread(118:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(38:13/2)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(2) Page(38:13/2) Thread(116:13/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(44:13/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(44:13/2) do swap-in Thread(116:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1505),Device(0),Page(44:13/2),Diskblock(172),FileRead,Openfile(134:13/0),Thread(116:13/W1)) this Page(44:13/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 62757 offset = 293 page no = 61 Thread(106:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(106:9/RU) 21 Page(61:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(106:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(106:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(61:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(11:9/0)
[PageFaultHandler][do_handlePageFault] set Page(61:9/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(61:9/0) do swap-in Thread(106:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1506),Device(0),Page(61:9/0),Diskblock(253),FileRead,Openfile(112:9/0),Thread(106:9/W1)) this Page(61:9/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 46655 offset = 575 page no = 45 Thread(118:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(118:9/RU) 21 Page(45:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(118:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(118:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(45:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(27:14/10)
[PageFaultHandler][do_handlePageFault] Frame(10) is dirty, do swap-out Thread(118:9/W0)
[PageFaultHandler][SwapOut] page Page(27:14/10) frame Frame(10)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 27
PageTableEntry][do_lock] iorb IORB(Id(1507),Device(0),Page(27:14/10),Diskblock(219),FileWrite,Openfile(112:9/0),Thread(118:9/W1)) this Page(27:14/10)
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(41:9/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(41:9/3) swap-in finish Thread(119:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(50:13/29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(50:13/29) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(44:13/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(44:13/2) swap-in finish Thread(116:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 234019/250000[MMU][do_refer] address = 57785 offset = 441 page no = 56 Thread(119:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(119:9/RU) 21 Page(56:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(119:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(119:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(56:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(63:12/6)
[PageFaultHandler][do_handlePageFault] set Page(56:9/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(56:9/6) do swap-in Thread(119:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1508),Device(0),Page(56:9/6),Diskblock(248),FileRead,Openfile(112:9/0),Thread(119:9/W1)) this Page(56:9/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(61:9/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(61:9/0) swap-in finish Thread(106:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 16799 offset = 415 page no = 16 Thread(113:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(113:11/RU) 22 Page(16:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(113:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(113:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(16:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(61:9/0)
[PageFaultHandler][do_handlePageFault] set Page(16:11/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(16:11/0) do swap-in Thread(113:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1509),Device(0),Page(16:11/0),Diskblock(336),FileRead,Openfile(122:11/0),Thread(113:11/W1)) this Page(16:11/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 3310 offset = 238 page no = 3 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 21 Page(3:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(3:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(12:9/20)
[PageFaultHandler][do_handlePageFault] Frame(20) is dirty, do swap-out Thread(104:13/W0)
[PageFaultHandler][SwapOut] page Page(12:9/20) frame Frame(20)file Openfile(134:13/0)
[PageFaultHandler][SwapOut] block no 12
PageTableEntry][do_lock] iorb IORB(Id(1510),Device(0),Page(12:9/20),Diskblock(140),FileWrite,Openfile(134:13/0),Thread(104:13/W1)) this Page(12:9/20)
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 43766 offset = 758 page no = 42 Thread(106:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(106:9/RU) 22 Page(42:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(106:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(106:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(42:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(62:12/16)
[PageFaultHandler][do_handlePageFault] Frame(16) is dirty, do swap-out Thread(106:9/W0)
[PageFaultHandler][SwapOut] page Page(62:12/16) frame Frame(16)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 62
PageTableEntry][do_lock] iorb IORB(Id(1511),Device(0),Page(62:12/16),Diskblock(254),FileWrite,Openfile(112:9/0),Thread(106:9/W1)) this Page(62:12/16)
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(27:14/10)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(10) Page(27:14/10) Thread(118:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(45:9/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(45:9/10) do swap-in Thread(118:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1512),Device(0),Page(45:9/10),Diskblock(237),FileRead,Openfile(112:9/0),Thread(118:9/W1)) this Page(45:9/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(56:9/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(56:9/6) swap-in finish Thread(119:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 45149 offset = 93 page no = 44 Thread(119:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(119:9/RU) 22 Page(44:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(119:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(119:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(17) for Page(44:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(17) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(26:12/17)
[PageFaultHandler][do_handlePageFault] Frame(17) is dirty, do swap-out Thread(119:9/W0)
[PageFaultHandler][SwapOut] page Page(26:12/17) frame Frame(17)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 26
PageTableEntry][do_lock] iorb IORB(Id(1513),Device(0),Page(26:12/17),Diskblock(218),FileWrite,Openfile(112:9/0),Thread(119:9/W1)) this Page(26:12/17)
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:11/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(16:11/0) swap-in finish Thread(113:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(12:9/20)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(20) Page(12:9/20) Thread(104:13/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(3:13/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(3:13/20) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1514),Device(0),Page(3:13/20),Diskblock(131),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(3:13/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 23434 offset = 906 page no = 22 Thread(113:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(113:11/RU) 22 Page(22:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(113:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(113:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(22:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(30:12/22)
[PageFaultHandler][do_handlePageFault] Frame(22) is dirty, do swap-out Thread(113:11/W0)
[PageFaultHandler][SwapOut] page Page(30:12/22) frame Frame(22)file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 30
PageTableEntry][do_lock] iorb IORB(Id(1515),Device(0),Page(30:12/22),Diskblock(350),FileWrite,Openfile(122:11/0),Thread(113:11/W1)) this Page(30:12/22)
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 235007/250000[PageTableEntry][do_unlock] this Page(62:12/16)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(16) Page(62:12/16) Thread(106:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(42:9/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(42:9/16) do swap-in Thread(106:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1516),Device(0),Page(42:9/16),Diskblock(234),FileRead,Openfile(112:9/0),Thread(106:9/W1)) this Page(42:9/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(45:9/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(45:9/10) swap-in finish Thread(118:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 10263 offset = 23 page no = 10 Thread(118:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(118:9/RU) 22 Page(10:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(118:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(118:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(10:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(45:9/10)
[PageFaultHandler][do_handlePageFault] set Page(10:9/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(10:9/10) do swap-in Thread(118:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1517),Device(0),Page(10:9/10),Diskblock(202),FileRead,Openfile(112:9/0),Thread(118:9/W1)) this Page(10:9/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(26:12/17)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(17) Page(26:12/17) Thread(119:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(44:9/null) and Frame(17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(44:9/17) do swap-in Thread(119:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1518),Device(0),Page(44:9/17),Diskblock(236),FileRead,Openfile(112:9/0),Thread(119:9/W1)) this Page(44:9/17)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(17)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(3:13/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(3:13/20) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 6233 offset = 89 page no = 6 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 22 Page(6:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(6:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(6:14/27)
[PageFaultHandler][do_handlePageFault] Frame(27) is dirty, do swap-out Thread(104:13/W0)
[PageFaultHandler][SwapOut] page Page(6:14/27) frame Frame(27)file Openfile(134:13/0)
[PageFaultHandler][SwapOut] block no 6
PageTableEntry][do_lock] iorb IORB(Id(1519),Device(0),Page(6:14/27),Diskblock(134),FileWrite,Openfile(134:13/0),Thread(104:13/W1)) this Page(6:14/27)
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(30:12/22)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(22) Page(30:12/22) Thread(113:11/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(22:11/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(22:11/22) do swap-in Thread(113:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1520),Device(0),Page(22:11/22),Diskblock(342),FileRead,Openfile(122:11/0),Thread(113:11/W1)) this Page(22:11/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(42:9/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(42:9/16) swap-in finish Thread(106:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 236040/250000[PageTableEntry][do_unlock] this Page(10:9/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(10:9/10) swap-in finish Thread(118:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 61310 offset = 894 page no = 59 Thread(118:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(118:9/RU) 21 Page(59:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(118:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(118:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(59:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(42:9/16)
[PageFaultHandler][do_handlePageFault] Frame(16) is dirty, do swap-out Thread(118:9/W0)
[PageFaultHandler][SwapOut] page Page(42:9/16) frame Frame(16)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 42
PageTableEntry][do_lock] iorb IORB(Id(1521),Device(0),Page(42:9/16),Diskblock(234),FileWrite,Openfile(112:9/0),Thread(118:9/W1)) this Page(42:9/16)
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 40676 offset = 740 page no = 39 Thread(106:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(106:9/RU) 21 Page(39:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(106:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(106:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(39:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(29:12/21)
[PageFaultHandler][do_handlePageFault] set Page(39:9/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(39:9/21) do swap-in Thread(106:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1522),Device(0),Page(39:9/21),Diskblock(231),FileRead,Openfile(112:9/0),Thread(106:9/W1)) this Page(39:9/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(44:9/17)
[PageFaultHandler][do_handlePageFault] Frame(17) Page(44:9/17) swap-in finish Thread(119:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(6:14/27)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(27) Page(6:14/27) Thread(104:13/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(6:13/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(6:13/27) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1523),Device(0),Page(6:13/27),Diskblock(134),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(6:13/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 56737 offset = 417 page no = 55 Thread(119:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(119:9/RU) 22 Page(55:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(119:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(119:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(7) for Page(55:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(7) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(38:9/7)
[PageFaultHandler][do_handlePageFault] Frame(7) is dirty, do swap-out Thread(119:9/W0)
[PageFaultHandler][SwapOut] page Page(38:9/7) frame Frame(7)file Openfile(112:9/0)
[PageFaultHandler][SwapOut] block no 38
PageTableEntry][do_lock] iorb IORB(Id(1524),Device(0),Page(38:9/7),Diskblock(230),FileWrite,Openfile(112:9/0),Thread(119:9/W1)) this Page(38:9/7)
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(22:11/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(22:11/22) swap-in finish Thread(113:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(42:9/16)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(16) Page(42:9/16) Thread(118:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(59:9/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(59:9/16) do swap-in Thread(118:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1525),Device(0),Page(59:9/16),Diskblock(251),FileRead,Openfile(112:9/0),Thread(118:9/W1)) this Page(59:9/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 237019/250000[PageTableEntry][do_unlock] this Page(39:9/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(39:9/21) swap-in finish Thread(106:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 2119 offset = 71 page no = 2 Thread(113:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(113:11/RU) 21 Page(2:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(113:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(113:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(28) for Page(2:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(28) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(41:12/28)
[PageFaultHandler][do_handlePageFault] set Page(2:11/null) and Frame(28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(2:11/28) do swap-in Thread(113:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1526),Device(0),Page(2:11/28),Diskblock(322),FileRead,Openfile(122:11/0),Thread(113:11/W1)) this Page(2:11/28)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(6:13/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(6:13/27) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 27770 offset = 122 page no = 27 Thread(104:13/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 23425 offset = 897 page no = 22 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 22 Page(22:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(22:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(6:13/27)
[PageFaultHandler][do_handlePageFault] Frame(27) is dirty, do swap-out Thread(104:13/W0)
[PageFaultHandler][SwapOut] page Page(6:13/27) frame Frame(27)file Openfile(134:13/0)
[PageFaultHandler][SwapOut] block no 6
PageTableEntry][do_lock] iorb IORB(Id(1527),Device(0),Page(6:13/27),Diskblock(134),FileWrite,Openfile(134:13/0),Thread(104:13/W1)) this Page(6:13/27)
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(38:9/7)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(7) Page(38:9/7) Thread(119:9/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(55:9/null) and Frame(7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(55:9/7) do swap-in Thread(119:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1528),Device(0),Page(55:9/7),Diskblock(247),FileRead,Openfile(112:9/0),Thread(119:9/W1)) this Page(55:9/7)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(59:9/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(59:9/16) swap-in finish Thread(118:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(2:11/28)
[PageFaultHandler][do_handlePageFault] Frame(28) Page(2:11/28) swap-in finish Thread(113:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 43781 offset = 773 page no = 42 Thread(118:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(118:9/RU) 22 Page(42:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(118:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(118:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(42:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(20:12/9)
[PageFaultHandler][do_handlePageFault] set Page(42:9/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(42:9/9) do swap-in Thread(118:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1529),Device(0),Page(42:9/9),Diskblock(234),FileRead,Openfile(112:9/0),Thread(118:9/W1)) this Page(42:9/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(6:13/27)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(27) Page(6:13/27) Thread(104:13/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(22:13/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(22:13/27) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1530),Device(0),Page(22:13/27),Diskblock(150),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(22:13/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 4764 offset = 668 page no = 4 Thread(106:9/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(106:9/RU) 22 Page(4:9/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(106:9/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(106:9/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(5) for Page(4:9/null)
[PageFaultHandler][do_handlePageFault] set Frame(5) Reserved by Task(9/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(13:12/5)
[PageFaultHandler][do_handlePageFault] set Page(4:9/null) and Frame(5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(4:9/5) do swap-in Thread(106:9/W0)
PageTableEntry][do_lock] iorb IORB(Id(1531),Device(0),Page(4:9/5),Diskblock(196),FileRead,Openfile(112:9/0),Thread(106:9/W1)) this Page(4:9/5)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(5)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 36977 offset = 113 page no = 36 Thread(113:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(113:11/RU) 22 Page(36:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(113:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(113:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(26) for Page(36:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(26) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(57:9/26)
[PageFaultHandler][do_handlePageFault] set Page(36:11/null) and Frame(26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(36:11/26) do swap-in Thread(113:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1532),Device(0),Page(36:11/26),Diskblock(356),FileRead,Openfile(122:11/0),Thread(113:11/W1)) this Page(36:11/26)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 238028/250000[PageTableEntry][do_unlock] this Page(55:9/7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(55:9/7) swap-in finish Thread(119:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(42:9/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(42:9/9) swap-in finish Thread(118:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(22:13/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(22:13/27) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(4:9/5)
[PageFaultHandler][do_handlePageFault] Frame(5) Page(4:9/5) swap-in finish Thread(106:9/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTable][do_deallocateMemory] this Pagetable(Task(14/T))
[PageTableEntry][do_unlock] this Page(36:11/26)
[PageFaultHandler][do_handlePageFault] Frame(26) Page(36:11/26) swap-in finish Thread(113:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTable][do_deallocateMemory] this Pagetable(Task(9/T))
[PageTable][do_deallocateMemory]  page_table_entry Page(4:9/5) frame_table_entry Frame(5)
[PageTable][do_deallocateMemory]  page_table_entry Page(10:9/10) frame_table_entry Frame(10)
[PageTable][do_deallocateMemory]  page_table_entry Page(35:9/4) frame_table_entry Frame(4)
[PageTable][do_deallocateMemory]  page_table_entry Page(39:9/21) frame_table_entry Frame(21)
[PageTable][do_deallocateMemory]  page_table_entry Page(41:9/3) frame_table_entry Frame(3)
[PageTable][do_deallocateMemory]  page_table_entry Page(42:9/9) frame_table_entry Frame(9)
[PageTable][do_deallocateMemory]  page_table_entry Page(44:9/17) frame_table_entry Frame(17)
[PageTable][do_deallocateMemory]  page_table_entry Page(50:9/19) frame_table_entry Frame(19)
[PageTable][do_deallocateMemory]  page_table_entry Page(51:9/14) frame_table_entry Frame(14)
[PageTable][do_deallocateMemory]  page_table_entry Page(55:9/7) frame_table_entry Frame(7)
[PageTable][do_deallocateMemory]  page_table_entry Page(56:9/6) frame_table_entry Frame(6)
[PageTable][do_deallocateMemory]  page_table_entry Page(59:9/16) frame_table_entry Frame(16)
Simulation progress: 239001/250000[MMU][do_refer] address = 17195 offset = 811 page no = 16 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 21 Page(16:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(27) for Page(16:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(27) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(22:13/27)
[PageFaultHandler][do_handlePageFault] Frame(27) is dirty, do swap-out Thread(104:13/W0)
[PageFaultHandler][SwapOut] page Page(22:13/27) frame Frame(27)file Openfile(134:13/0)
[PageFaultHandler][SwapOut] block no 22
PageTableEntry][do_lock] iorb IORB(Id(1533),Device(0),Page(22:13/27),Diskblock(150),FileWrite,Openfile(134:13/0),Thread(104:13/W1)) this Page(22:13/27)
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(22:13/27)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(27) Page(22:13/27) Thread(104:13/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(16:13/null) and Frame(27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(16:13/27) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1534),Device(0),Page(16:13/27),Diskblock(144),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(16:13/27)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 63888 offset = 400 page no = 62 Thread(121:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(121:11/RU) 21 Page(62:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(121:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(121:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(62:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(24:12/12)
[PageFaultHandler][do_handlePageFault] set Page(62:11/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(62:11/12) do swap-in Thread(121:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1535),Device(0),Page(62:11/12),Diskblock(382),FileRead,Openfile(122:11/0),Thread(121:11/W1)) this Page(62:11/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 52816 offset = 592 page no = 51 Thread(113:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(113:11/RU) 21 Page(51:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(113:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(113:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(25) for Page(51:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(25) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(4:13/25)
[PageFaultHandler][do_handlePageFault] Frame(25) is dirty, do swap-out Thread(113:11/W0)
[PageFaultHandler][SwapOut] page Page(4:13/25) frame Frame(25)file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 4
PageTableEntry][do_lock] iorb IORB(Id(1536),Device(0),Page(4:13/25),Diskblock(324),FileWrite,Openfile(122:11/0),Thread(113:11/W1)) this Page(4:13/25)
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 18320 offset = 912 page no = 17 Thread(114:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(114:12/RU) 21 Page(17:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(114:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(114:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(17:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] set Page(17:12/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(17:12/19) do swap-in Thread(114:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1537),Device(0),Page(17:12/19),Diskblock(81),FileRead,Openfile(132:12/0),Thread(114:12/W1)) this Page(17:12/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:13/27)
[PageFaultHandler][do_handlePageFault] Frame(27) Page(16:13/27) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 22508 offset = 1004 page no = 21 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 22 Page(21:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(21:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(2:13/8)
[PageFaultHandler][do_handlePageFault] set Page(21:13/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(21:13/8) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1538),Device(0),Page(21:13/8),Diskblock(149),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(21:13/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 63655 offset = 167 page no = 62 Thread(108:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(108:12/RU) 21 Page(62:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(108:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(108:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(62:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] set Page(62:12/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(62:12/14) do swap-in Thread(108:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1539),Device(0),Page(62:12/14),Diskblock(126),FileRead,Openfile(132:12/0),Thread(108:12/W1)) this Page(62:12/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 61021 offset = 605 page no = 59 Thread(96:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(96:11/RU) 21 Page(59:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(96:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(96:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(4) for Page(59:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(4) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] set Page(59:11/null) and Frame(4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(59:11/4) do swap-in Thread(96:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1540),Device(0),Page(59:11/4),Diskblock(379),FileRead,Openfile(122:11/0),Thread(96:11/W1)) this Page(59:11/4)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(4)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(62:11/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(62:11/12) swap-in finish Thread(121:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(4:13/25)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(25) Page(4:13/25) Thread(113:11/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(51:11/null) and Frame(25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(51:11/25) do swap-in Thread(113:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1541),Device(0),Page(51:11/25),Diskblock(371),FileRead,Openfile(122:11/0),Thread(113:11/W1)) this Page(51:11/25)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(25)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 43977 offset = 969 page no = 42 Thread(122:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(122:11/RU) 21 Page(42:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(122:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(122:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(12) for Page(42:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(12) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(62:11/12)
[PageFaultHandler][do_handlePageFault] set Page(42:11/null) and Frame(12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(42:11/12) do swap-in Thread(122:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1542),Device(0),Page(42:11/12),Diskblock(362),FileRead,Openfile(122:11/0),Thread(122:11/W1)) this Page(42:11/12)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(12)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 28765 offset = 93 page no = 28 Thread(121:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(121:11/RU) 21 Page(28:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(121:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(121:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(28:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] set Page(28:11/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(28:11/3) do swap-in Thread(121:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1543),Device(0),Page(28:11/3),Diskblock(348),FileRead,Openfile(122:11/0),Thread(121:11/W1)) this Page(28:11/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(17:12/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(17:12/19) swap-in finish Thread(114:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageCleanDaemon][unleash] osp.Memory.PageCleanDaemon@1bf99cf5 execute time 240000
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(0)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(22)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(23)
[PageCleanDaemon][SwapOutDirtyPage] found dirty frame Frame(26)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(0)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(0) Page(16:11/0) isDirty true
[PageFaultHandler][SwapOut] file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 16
PageTableEntry][do_lock] iorb IORB(Id(1544),Device(0),Page(16:11/0),Diskblock(336),FileWrite,Openfile(122:11/0),Thread(124:0/W1)) this Page(16:11/0)
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 240100/250000[PageTableEntry][do_unlock] this Page(21:13/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(21:13/8) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 4254 offset = 158 page no = 4 Thread(123:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(123:12/RU) 21 Page(4:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(123:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(123:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(4:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(17:12/19)
[PageFaultHandler][do_handlePageFault] set Page(4:12/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(4:12/19) do swap-in Thread(123:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1545),Device(0),Page(4:12/19),Diskblock(68),FileRead,Openfile(132:12/0),Thread(123:12/W1)) this Page(4:12/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(62:12/14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(62:12/14) swap-in finish Thread(108:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(1546),Device(2),Page(7:12/15),Diskblock(11),FileRead,Openfile(158:12/2),Thread(108:12/W0)) this Page(7:12/15)
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 41166 offset = 206 page no = 40 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 22 Page(40:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(8) for Page(40:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(8) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(21:13/8)
[PageFaultHandler][do_handlePageFault] Frame(8) is dirty, do swap-out Thread(104:13/W0)
[PageFaultHandler][SwapOut] page Page(21:13/8) frame Frame(8)file Openfile(134:13/0)
[PageFaultHandler][SwapOut] block no 21
PageTableEntry][do_lock] iorb IORB(Id(1547),Device(0),Page(21:13/8),Diskblock(149),FileWrite,Openfile(134:13/0),Thread(104:13/W1)) this Page(21:13/8)
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(59:11/4)
[PageFaultHandler][do_handlePageFault] Frame(4) Page(59:11/4) swap-in finish Thread(96:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 25005 offset = 429 page no = 24 Thread(126:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(126:12/RU) 22 Page(24:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(126:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(126:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(24:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(44:13/2)
[PageFaultHandler][do_handlePageFault] set Page(24:12/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(24:12/2) do swap-in Thread(126:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1548),Device(0),Page(24:12/2),Diskblock(88),FileRead,Openfile(132:12/0),Thread(126:12/W1)) this Page(24:12/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 16700 offset = 316 page no = 16 Thread(114:12/RU)
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(1549),Device(2),Page(16:12/11),Diskblock(8),FileWrite,Openfile(158:12/2),Thread(114:12/W0)) this Page(16:12/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(51:11/25)
[PageFaultHandler][do_handlePageFault] Frame(25) Page(51:11/25) swap-in finish Thread(113:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(7:12/15)
[MMU][do_refer] address = 29857 offset = 161 page no = 29 Thread(125:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(125:12/RU) 21 Page(29:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(125:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(125:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(29:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(7:12/15)
[PageFaultHandler][do_handlePageFault] Frame(15) is dirty, do swap-out Thread(125:12/W0)
[PageFaultHandler][SwapOut] page Page(7:12/15) frame Frame(15)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 7
PageTableEntry][do_lock] iorb IORB(Id(1550),Device(0),Page(7:12/15),Diskblock(71),FileWrite,Openfile(132:12/0),Thread(125:12/W1)) this Page(7:12/15)
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 241036/250000PageTableEntry][do_lock] iorb IORB(Id(1551),Device(2),Page(2:11/28),Diskblock(12),FileWrite,Openfile(158:12/2),Thread(113:11/W0)) this Page(2:11/28)
[PageTableEntry][do_lock] Get frame Frame(28)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 3258 offset = 186 page no = 3 Thread(96:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(96:11/RU) 22 Page(3:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(96:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(96:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(3:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] set Page(3:11/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(3:11/6) do swap-in Thread(96:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1552),Device(0),Page(3:11/6),Diskblock(323),FileRead,Openfile(122:11/0),Thread(96:11/W1)) this Page(3:11/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(42:11/12)
[PageFaultHandler][do_handlePageFault] Frame(12) Page(42:11/12) swap-in finish Thread(122:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 41665 offset = 705 page no = 40 Thread(108:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(108:12/RU) 21 Page(40:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(108:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(108:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(20) for Page(40:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(20) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(3:13/20)
[PageFaultHandler][do_handlePageFault] set Page(40:12/null) and Frame(20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(40:12/20) do swap-in Thread(108:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1553),Device(0),Page(40:12/20),Diskblock(104),FileRead,Openfile(132:12/0),Thread(108:12/W1)) this Page(40:12/20)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(20)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(28:11/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(28:11/3) swap-in finish Thread(121:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 54084 offset = 836 page no = 52 Thread(122:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(122:11/RU) 22 Page(52:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(122:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(122:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(3) for Page(52:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(3) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(28:11/3)
[PageFaultHandler][do_handlePageFault] set Page(52:11/null) and Frame(3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(52:11/3) do swap-in Thread(122:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1554),Device(0),Page(52:11/3),Diskblock(372),FileRead,Openfile(122:11/0),Thread(122:11/W1)) this Page(52:11/3)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(3)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:12/11)
[PageTableEntry][do_unlock] this Page(16:11/0)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(0) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(22)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(22) Page(22:11/22) isDirty true
[PageFaultHandler][SwapOut] file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 22
PageTableEntry][do_lock] iorb IORB(Id(1555),Device(0),Page(22:11/22),Diskblock(342),FileWrite,Openfile(122:11/0),Thread(124:0/W1)) this Page(22:11/22)
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 13630 offset = 318 page no = 13 Thread(121:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(121:11/RU) 22 Page(13:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(121:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(121:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(0) for Page(13:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(0) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(16:11/0)
[PageFaultHandler][do_handlePageFault] set Page(13:11/null) and Frame(0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(13:11/0) do swap-in Thread(121:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1556),Device(0),Page(13:11/0),Diskblock(333),FileRead,Openfile(122:11/0),Thread(121:11/W1)) this Page(13:11/0)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(0)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(4:12/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(4:12/19) swap-in finish Thread(123:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 29180 offset = 508 page no = 28 Thread(123:12/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(21:13/8)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(8) Page(21:13/8) Thread(104:13/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(40:13/null) and Frame(8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(40:13/8) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1557),Device(0),Page(40:13/8),Diskblock(168),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(40:13/8)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(8)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 242026/250000[PageTableEntry][do_unlock] this Page(24:12/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(24:12/2) swap-in finish Thread(126:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(2:11/28)
[PageTableEntry][do_unlock] this Page(7:12/15)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(15) Page(7:12/15) Thread(125:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(29:12/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(29:12/15) do swap-in Thread(125:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1558),Device(0),Page(29:12/15),Diskblock(93),FileRead,Openfile(132:12/0),Thread(125:12/W1)) this Page(29:12/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 50754 offset = 578 page no = 49 Thread(114:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(114:12/RU) 21 Page(49:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(114:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(114:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(19) for Page(49:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(19) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(4:12/19)
[PageFaultHandler][do_handlePageFault] set Page(49:12/null) and Frame(19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(49:12/19) do swap-in Thread(114:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1559),Device(0),Page(49:12/19),Diskblock(113),FileRead,Openfile(132:12/0),Thread(114:12/W1)) this Page(49:12/19)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(19)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 58274 offset = 930 page no = 56 Thread(113:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(113:11/RU) 22 Page(56:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(113:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(113:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(2) for Page(56:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(2) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(24:12/2)
[PageFaultHandler][do_handlePageFault] Frame(2) is dirty, do swap-out Thread(113:11/W0)
[PageFaultHandler][SwapOut] page Page(24:12/2) frame Frame(2)file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 24
PageTableEntry][do_lock] iorb IORB(Id(1560),Device(0),Page(24:12/2),Diskblock(344),FileWrite,Openfile(122:11/0),Thread(113:11/W1)) this Page(24:12/2)
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(3:11/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(3:11/6) swap-in finish Thread(96:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(1561),Device(2),Page(16:12/11),Diskblock(11),FileWrite,Openfile(158:12/2),Thread(127:12/W0)) this Page(16:12/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(40:12/20)
[PageFaultHandler][do_handlePageFault] Frame(20) Page(40:12/20) swap-in finish Thread(108:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 53950 offset = 702 page no = 52 Thread(96:11/RU)
[PageTableEntry][do_unlock] this Page(16:12/11)
Simulation progress: 243016/250000[PageTableEntry][do_unlock] this Page(52:11/3)
[PageFaultHandler][do_handlePageFault] Frame(3) Page(52:11/3) swap-in finish Thread(122:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 19512 offset = 56 page no = 19 Thread(126:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(126:12/RU) 21 Page(19:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(126:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(126:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(6) for Page(19:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(6) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(3:11/6)
[PageFaultHandler][do_handlePageFault] Frame(6) is dirty, do swap-out Thread(126:12/W0)
[PageFaultHandler][SwapOut] page Page(3:11/6) frame Frame(6)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 3
PageTableEntry][do_lock] iorb IORB(Id(1562),Device(0),Page(3:11/6),Diskblock(67),FileWrite,Openfile(132:12/0),Thread(126:12/W1)) this Page(3:11/6)
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 32104 offset = 360 page no = 31 Thread(96:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(96:11/RU) 21 Page(31:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(96:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(96:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(31:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] set Page(31:11/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(31:11/10) do swap-in Thread(96:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1563),Device(0),Page(31:11/10),Diskblock(351),FileRead,Openfile(122:11/0),Thread(96:11/W1)) this Page(31:11/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 669 offset = 669 page no = 0 Thread(122:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(122:11/RU) 22 Page(0:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(122:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(122:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(1) for Page(0:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(1) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(57:12/1)
[PageFaultHandler][do_handlePageFault] set Page(0:11/null) and Frame(1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(0:11/1) do swap-in Thread(122:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1564),Device(0),Page(0:11/1),Diskblock(320),FileRead,Openfile(122:11/0),Thread(122:11/W1)) this Page(0:11/1)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(22:11/22)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(22) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(23)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(23) Page(47:11/23) isDirty true
[PageFaultHandler][SwapOut] file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 47
PageTableEntry][do_lock] iorb IORB(Id(1565),Device(0),Page(47:11/23),Diskblock(367),FileWrite,Openfile(122:11/0),Thread(124:0/W1)) this Page(47:11/23)
[PageTableEntry][do_lock] Get frame Frame(23)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 5067 offset = 971 page no = 4 Thread(127:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(127:12/RU) 21 Page(4:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(127:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(127:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(22) for Page(4:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(22) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(22:11/22)
[PageFaultHandler][do_handlePageFault] set Page(4:12/null) and Frame(22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(4:12/22) do swap-in Thread(127:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1566),Device(0),Page(4:12/22),Diskblock(68),FileRead,Openfile(132:12/0),Thread(127:12/W1)) this Page(4:12/22)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(13:11/0)
[PageFaultHandler][do_handlePageFault] Frame(0) Page(13:11/0) swap-in finish Thread(121:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(40:13/8)
[PageFaultHandler][do_handlePageFault] Frame(8) Page(40:13/8) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 59966 offset = 574 page no = 58 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 22 Page(58:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(7) for Page(58:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(7) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] set Page(58:13/null) and Frame(7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(58:13/7) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1567),Device(0),Page(58:13/7),Diskblock(186),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(58:13/7)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(7)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(29:12/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(29:12/15) swap-in finish Thread(125:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 15420 offset = 60 page no = 15 Thread(125:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(125:12/RU) 21 Page(15:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(125:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(125:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(15:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(29:12/15)
[PageFaultHandler][do_handlePageFault] set Page(15:12/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(15:12/15) do swap-in Thread(125:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1568),Device(0),Page(15:12/15),Diskblock(79),FileRead,Openfile(132:12/0),Thread(125:12/W1)) this Page(15:12/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(49:12/19)
[PageFaultHandler][do_handlePageFault] Frame(19) Page(49:12/19) swap-in finish Thread(114:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
Simulation progress: 244005/250000[PageTableEntry][do_unlock] this Page(24:12/2)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(2) Page(24:12/2) Thread(113:11/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(56:11/null) and Frame(2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(56:11/2) do swap-in Thread(113:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1569),Device(0),Page(56:11/2),Diskblock(376),FileRead,Openfile(122:11/0),Thread(113:11/W1)) this Page(56:11/2)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(2)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 25191 offset = 615 page no = 24 Thread(121:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(121:11/RU) 22 Page(24:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(121:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(121:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(21) for Page(24:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(21) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] set Page(24:11/null) and Frame(21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(24:11/21) do swap-in Thread(121:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1570),Device(0),Page(24:11/21),Diskblock(344),FileRead,Openfile(122:11/0),Thread(121:11/W1)) this Page(24:11/21)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(21)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(3:11/6)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(6) Page(3:11/6) Thread(126:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(19:12/null) and Frame(6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(19:12/6) do swap-in Thread(126:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1571),Device(0),Page(19:12/6),Diskblock(83),FileRead,Openfile(132:12/0),Thread(126:12/W1)) this Page(19:12/6)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(6)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(31:11/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(31:11/10) swap-in finish Thread(96:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(1572),Device(2),Page(16:12/11),Diskblock(15),FileRead,Openfile(160:12/2),Thread(114:12/W0)) this Page(16:12/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 18157 offset = 749 page no = 17 Thread(128:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(128:11/RU) 22 Page(17:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(128:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(128:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(10) for Page(17:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(10) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(31:11/10)
[PageFaultHandler][do_handlePageFault] set Page(17:11/null) and Frame(10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(17:11/10) do swap-in Thread(128:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1573),Device(0),Page(17:11/10),Diskblock(337),FileRead,Openfile(122:11/0),Thread(128:11/W1)) this Page(17:11/10)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(10)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:11/1)
[PageFaultHandler][do_handlePageFault] Frame(1) Page(0:11/1) swap-in finish Thread(122:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 245011/250000[MMU][do_refer] address = 43898 offset = 890 page no = 42 Thread(122:11/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(47:11/23)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(23) finish
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(26)
[PageCleanDaemon][SwapOutDirtyPage] dirty_frame Frame(26) Page(36:11/26) isDirty true
[PageFaultHandler][SwapOut] file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 36
PageTableEntry][do_lock] iorb IORB(Id(1574),Device(0),Page(36:11/26),Diskblock(356),FileWrite,Openfile(122:11/0),Thread(124:0/W1)) this Page(36:11/26)
[PageTableEntry][do_lock] Get frame Frame(26)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 57809 offset = 465 page no = 56 Thread(96:11/RU)
[PageTableEntry][do_unlock] this Page(4:12/22)
[PageFaultHandler][do_handlePageFault] Frame(22) Page(4:12/22) swap-in finish Thread(127:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 64471 offset = 983 page no = 62 Thread(127:12/RU)
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(16:12/11)
PageTableEntry][do_lock] iorb IORB(Id(1575),Device(2),Page(4:12/22),Diskblock(15),FileRead,Openfile(160:12/2),Thread(114:12/W0)) this Page(4:12/22)
[PageTableEntry][do_lock] Get frame Frame(22)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 26083 offset = 483 page no = 25 Thread(127:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(127:12/RU) 21 Page(25:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(127:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(127:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(25:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] set Page(25:12/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(25:12/16) do swap-in Thread(127:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1576),Device(0),Page(25:12/16),Diskblock(89),FileRead,Openfile(132:12/0),Thread(127:12/W1)) this Page(25:12/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(58:13/7)
[PageFaultHandler][do_handlePageFault] Frame(7) Page(58:13/7) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(15:12/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(15:12/15) swap-in finish Thread(125:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(4:12/22)
[MMU][do_refer] address = 53215 offset = 991 page no = 51 Thread(104:13/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(104:13/RU) 21 Page(51:13/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(104:13/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(104:13/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(15) for Page(51:13/null)
[PageFaultHandler][do_handlePageFault] set Frame(15) Reserved by Task(13/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(15:12/15)
[PageFaultHandler][do_handlePageFault] set Page(51:13/null) and Frame(15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(51:13/15) do swap-in Thread(104:13/W0)
PageTableEntry][do_lock] iorb IORB(Id(1577),Device(0),Page(51:13/15),Diskblock(179),FileRead,Openfile(134:13/0),Thread(104:13/W1)) this Page(51:13/15)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(15)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
Simulation progress: 246046/250000[PageTableEntry][do_unlock] this Page(56:11/2)
[PageFaultHandler][do_handlePageFault] Frame(2) Page(56:11/2) swap-in finish Thread(113:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(24:11/21)
[PageFaultHandler][do_handlePageFault] Frame(21) Page(24:11/21) swap-in finish Thread(121:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 41371 offset = 411 page no = 40 Thread(113:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(113:11/RU) 22 Page(40:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(113:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(113:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(9) for Page(40:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(9) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] set Page(40:11/null) and Frame(9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(40:11/9) do swap-in Thread(113:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1578),Device(0),Page(40:11/9),Diskblock(360),FileRead,Openfile(122:11/0),Thread(113:11/W1)) this Page(40:11/9)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(9)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 29679 offset = 1007 page no = 28 Thread(114:12/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 55253 offset = 981 page no = 53 Thread(114:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(114:12/RU) 22 Page(53:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(114:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(114:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(24) for Page(53:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(24) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(27:13/24)
[PageFaultHandler][do_handlePageFault] set Page(53:12/null) and Frame(24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(53:12/24) do swap-in Thread(114:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1579),Device(0),Page(53:12/24),Diskblock(117),FileRead,Openfile(132:12/0),Thread(114:12/W1)) this Page(53:12/24)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(24)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(19:12/6)
[PageFaultHandler][do_handlePageFault] Frame(6) Page(19:12/6) swap-in finish Thread(126:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 41435 offset = 475 page no = 40 Thread(130:12/RU)
[MMU][do_refer] Do memory write.
[MMU][do_refer] address = 41962 offset = 1002 page no = 40 Thread(125:12/RU)
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(17:11/10)
[PageFaultHandler][do_handlePageFault] Frame(10) Page(17:11/10) swap-in finish Thread(128:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 247081/250000[PageTableEntry][do_unlock] this Page(36:11/26)
[PageCleanDaemon][SwapOutDirtyPage] Swap-out Frame(26) finish
[PageTableEntry][do_unlock] this Page(25:12/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(25:12/16) swap-in finish Thread(127:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(51:13/15)
[PageFaultHandler][do_handlePageFault] Frame(15) Page(51:13/15) swap-in finish Thread(104:13/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory read.
[PageTableEntry][do_unlock] this Page(40:11/9)
[PageFaultHandler][do_handlePageFault] Frame(9) Page(40:11/9) swap-in finish Thread(113:11/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
[PageTableEntry][do_unlock] this Page(53:12/24)
[PageFaultHandler][do_handlePageFault] Frame(24) Page(53:12/24) swap-in finish Thread(114:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 248056/250000[MMU][do_refer] address = 50460 offset = 284 page no = 49 Thread(125:12/RU)
[MMU][do_refer] Do memory read.
PageTableEntry][do_lock] iorb IORB(Id(1580),Device(1),Page(16:13/27),Diskblock(8),FileWrite,Openfile(162:12/1),Thread(104:13/W0)) this Page(16:13/27)
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:13/27)
[MMU][do_refer] address = 48580 offset = 452 page no = 47 Thread(121:11/RU)
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(1581),Device(1),Page(0:11/1),Diskblock(8),FileWrite,Openfile(162:12/1),Thread(121:11/W0)) this Page(0:11/1)
[PageTableEntry][do_lock] Get frame Frame(1)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(0:11/1)
[MMU][do_refer] address = 57013 offset = 693 page no = 55 Thread(130:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(130:12/RU) 22 Page(55:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(130:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(130:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(16) for Page(55:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(16) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(25:12/16)
[PageFaultHandler][do_handlePageFault] set Page(55:12/null) and Frame(16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(55:12/16) do swap-in Thread(130:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1582),Device(0),Page(55:12/16),Diskblock(119),FileRead,Openfile(132:12/0),Thread(130:12/W1)) this Page(55:12/16)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(16)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(55:12/16)
[PageFaultHandler][do_handlePageFault] Frame(16) Page(55:12/16) swap-in finish Thread(130:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 249031/250000[MMU][do_refer] address = 64375 offset = 887 page no = 62 Thread(125:12/RU)
[MMU][do_refer] Do memory write.
PageTableEntry][do_lock] iorb IORB(Id(1583),Device(1),Page(16:13/27),Diskblock(8),FileRead,Openfile(162:12/1),Thread(104:13/W0)) this Page(16:13/27)
[PageTableEntry][do_lock] Get frame Frame(27)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:13/27)
[MMU][do_refer] address = 30143 offset = 447 page no = 29 Thread(121:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(121:11/RU) 21 Page(29:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(121:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(121:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(11) for Page(29:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(11) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(16:12/11)
[PageFaultHandler][do_handlePageFault] Frame(11) is dirty, do swap-out Thread(121:11/W0)
[PageFaultHandler][SwapOut] page Page(16:12/11) frame Frame(11)file Openfile(122:11/0)
[PageFaultHandler][SwapOut] block no 16
PageTableEntry][do_lock] iorb IORB(Id(1584),Device(0),Page(16:12/11),Diskblock(336),FileWrite,Openfile(122:11/0),Thread(121:11/W1)) this Page(16:12/11)
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 57901 offset = 557 page no = 56 Thread(122:11/RU)
[MMU][do_refer] Do memory read.
[MMU][do_refer] address = 29790 offset = 94 page no = 29 Thread(130:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(130:12/RU) 21 Page(29:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(130:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(130:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(14) for Page(29:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(14) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(62:12/14)
[PageFaultHandler][do_handlePageFault] Frame(14) is dirty, do swap-out Thread(130:12/W0)
[PageFaultHandler][SwapOut] page Page(62:12/14) frame Frame(14)file Openfile(132:12/0)
[PageFaultHandler][SwapOut] block no 62
PageTableEntry][do_lock] iorb IORB(Id(1585),Device(0),Page(62:12/14),Diskblock(126),FileWrite,Openfile(132:12/0),Thread(130:12/W1)) this Page(62:12/14)
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = true
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 35716 offset = 900 page no = 34 Thread(127:12/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(127:12/RU) 22 Page(34:12/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(127:12/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(127:12/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(13) for Page(34:12/null)
[PageFaultHandler][do_handlePageFault] set Frame(13) Reserved by Task(12/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(44:12/13)
[PageFaultHandler][do_handlePageFault] set Page(34:12/null) and Frame(13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(34:12/13) do swap-in Thread(127:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1586),Device(0),Page(34:12/13),Diskblock(98),FileRead,Openfile(132:12/0),Thread(127:12/W1)) this Page(34:12/13)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(13)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(16:12/11)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(11) Page(16:12/11) Thread(121:11/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(29:11/null) and Frame(11)
[PageFaultHandler][do_handlePageFault] Frame(11) Page(29:11/11) do swap-in Thread(121:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1587),Device(0),Page(29:11/11),Diskblock(349),FileRead,Openfile(122:11/0),Thread(121:11/W1)) this Page(29:11/11)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(11)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[MMU][do_refer] address = 56815 offset = 495 page no = 55 Thread(128:11/RU)
[MMU][do_refer] setInterruptType
[PageFaultHandler][do_handlePageFault] start do_handlePageFault( Thread(128:11/RU) 21 Page(55:11/null) )
[PageFaultHandler][do_handlePageFault] Found available frame 
[PageFaultHandler][do_handlePageFault] Thread(128:11/RU) suspend on system event 
[PageFaultHandler][do_handlePageFault] Thread(128:11/W0) rsesume from system event 
[PageFaultHandler][do_handlePageFault] reserve Frame(29) for Page(55:11/null)
[PageFaultHandler][do_handlePageFault] set Frame(29) Reserved by Task(11/L)
[PageFaultHandler][do_handlePageFault] victim_page Page(50:13/29)
[PageFaultHandler][do_handlePageFault] set Page(55:11/null) and Frame(29)
[PageFaultHandler][do_handlePageFault] Frame(29) Page(55:11/29) do swap-in Thread(128:11/W0)
PageTableEntry][do_lock] iorb IORB(Id(1588),Device(0),Page(55:11/29),Diskblock(375),FileRead,Openfile(122:11/0),Thread(128:11/W1)) this Page(55:11/29)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(29)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(62:12/14)
[PageFaultHandler][do_handlePageFault] Swap-out Frame(14) Page(62:12/14) Thread(130:12/W0) finish
[PageFaultHandler][do_handlePageFault] set Page(29:12/null) and Frame(14)
[PageFaultHandler][do_handlePageFault] Frame(14) Page(29:12/14) do swap-in Thread(130:12/W0)
PageTableEntry][do_lock] iorb IORB(Id(1589),Device(0),Page(29:12/14),Diskblock(93),FileRead,Openfile(132:12/0),Thread(130:12/W1)) this Page(29:12/14)
PageTableEntry][do_lock] Invalid page. 
PageTableEntry][do_lock] Request pagefault by same task, increase lock count
[PageTableEntry][do_lock] Get frame Frame(14)
[PageTableEntry][do_lock] Valid = false
[PageTableEntry][do_lock] lockcount = 0
[PageTableEntry][do_unlock] this Page(34:12/13)
[PageFaultHandler][do_handlePageFault] Frame(13) Page(34:12/13) swap-in finish Thread(127:12/W0)
[PageFaultHandler][do_handlePageFault] Thread do_handlePageFault Success
[MMU][do_refer] return from interrupt
[MMU][do_refer] Do memory write.
Simulation progress: 250000/250000


Simulation ended successfully!
Elapsed time: 7 seconds

Details are in the log file OSP.log

